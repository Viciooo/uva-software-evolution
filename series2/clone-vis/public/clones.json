[
    {
        "content": "SQLTokenizer.getKeyWord(dataType),SQLTokenizer.getKeyWord(getFunction())};",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunction/createUnspportedDataType(int)",
                "startLine": 6,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunction/createUnspportedConversion(int)",
                "startLine": 6,
                "lastLine": 8
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 41,
                "lastLine": 43
            }
        ],
        "window": 3
    },
    {
        "content": "break;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Utils/compareBytes(byte%5B%5D,byte%5B%5D)",
                "startLine": 6,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/Index/numericToBinarySortOrder(smallsql.database.MutableNumeric)",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)",
                "startLine": 177,
                "lastLine": 179
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/compile(smallsql.database.SSConnection)",
                "startLine": 41,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/setValue(byte%5B%5D)",
                "startLine": 16,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)",
                "startLine": 193,
                "lastLine": 195
            },
            {
                "locFile": "java+method:///smallsql/database/Utils/like(java.lang.String,java.lang.String)",
                "startLine": 42,
                "lastLine": 44
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getKeywordFromOperation(int)",
                "startLine": 10,
                "lastLine": 12
            }
        ],
        "window": 3
    },
    {
        "content": "return readInt() / 10000;case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 30,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 31,
                "lastLine": 33
            }
        ],
        "window": 3
    },
    {
        "content": "return node.addRoot();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)",
                "startLine": 27,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 30,
                "lastLine": 32
            }
        ],
        "window": 3
    },
    {
        "content": "formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 144,
                "lastLine": 146
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 270,
                "lastLine": 272
            }
        ],
        "window": 3
    },
    {
        "content": "assertNotNull(\"RETURN_GENERATED_KEYS\", rs);assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());assertRowCount(1,rs);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 34,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 47,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 50,
                "lastLine": 52
            }
        ],
        "window": 3
    },
    {
        "content": "stat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");fail();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testLocalizedErrors()",
                "startLine": 8,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testBogusLocale()",
                "startLine": 14,
                "lastLine": 16
            }
        ],
        "window": 3
    },
    {
        "content": "con.close();con = AllTests.getConnection();st = con.createStatement();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/runTest()",
                "startLine": 94,
                "lastLine": 96
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testManyColumns()",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.SMALLDATETIME:return readSmallDateTime();default:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 57,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 57,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 57,
                "lastLine": 59
            }
        ],
        "window": 3
    },
    {
        "content": "assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");Savepoint savepoint = con.setSavepoint();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testUpdateAndSavepoint()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertAndUpdate()",
                "startLine": 23,
                "lastLine": 26
            }
        ],
        "window": 3
    },
    {
        "content": "@Overridevoid writeMagic(FileChannel raFile) throws Exception{ByteBuffer buffer = ByteBuffer.allocate(8);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/View/writeMagic(java.nio.channels.FileChannel)",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/Table/writeMagic(java.nio.channels.FileChannel)",
                "startLine": 0,
                "lastLine": 2
            }
        ],
        "window": 3
    },
    {
        "content": "nextToken(MISSING_COMMA);expr = expression( cmd, 0);nextToken(MISSING_COMMA);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/function(smallsql.database.Command,smallsql.database.SQLToken,boolean)",
                "startLine": 36,
                "lastLine": 38
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/function(smallsql.database.Command,smallsql.database.SQLToken,boolean)",
                "startLine": 44,
                "lastLine": 46
            }
        ],
        "window": 3
    },
    {
        "content": "int count = 1;while(rs.next()){String newValue = rs.getString(\"v\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 16,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 16,
                "lastLine": 18
            }
        ],
        "window": 3
    },
    {
        "content": "}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/updateRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 24,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/database/CommandInsert/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 56,
                "lastLine": 58
            },
            {
                "locFile": "java+method:///smallsql/database/CommandInsert/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 46,
                "lastLine": 48
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 45,
                "lastLine": 47
            },
            {
                "locFile": "java+method:///smallsql/database/SSDriver/parse(java.lang.String,java.util.Properties)",
                "startLine": 34,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getCatalogs(smallsql.database.Database)",
                "startLine": 19,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)",
                "startLine": 120,
                "lastLine": 122
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/parse(java.lang.String)",
                "startLine": 97,
                "lastLine": 99
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String%5B%5D)",
                "startLine": 39,
                "lastLine": 41
            },
            {
                "locFile": "java+method:///smallsql/database/TableResult/moveToRow()",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 44,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 45,
                "lastLine": 47
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBoolean(int,int)",
                "startLine": 44,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 44,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getMoney(int,int)",
                "startLine": 42,
                "lastLine": 44
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 44,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 44,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 45,
                "lastLine": 47
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 44,
                "lastLine": 46
            }
        ],
        "window": 3
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs = null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptions/runTest()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test2Columns()",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 18,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getInt()",
                "startLine": 18,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getLong()",
                "startLine": 18,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 18,
                "lastLine": 20
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('.');formatNumber( details.day, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 40,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 47,
                "lastLine": 49
            }
        ],
        "window": 3
    },
    {
        "content": "return readBoolean() ? 1 : 0;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 10,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 10,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 10,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 10,
                "lastLine": 12
            }
        ],
        "window": 3
    },
    {
        "content": "break;}if((nextEntry == 0 && !firstNode) || nextEntry > octet){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/remove(long)",
                "startLine": 49,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/add(long)",
                "startLine": 32,
                "lastLine": 34
            }
        ],
        "window": 3
    },
    {
        "content": "return true;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Scrollable/previous()",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/next()",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/Join/createJoinScrollIndex()",
                "startLine": 20,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/database/Scrollable/absolute(int)",
                "startLine": 11,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/database/Distinct/next()",
                "startLine": 14,
                "lastLine": 16
            }
        ],
        "window": 3
    },
    {
        "content": "}else{int idx = internalExpressions.indexOf(expr);if(idx >= 0) return idx;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/GroupResult/addInternalExpressionFromSelect(smallsql.database.Expression)",
                "startLine": 18,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/database/GroupResult/addInternalExpressionFromGroupBy(smallsql.database.Expression)",
                "startLine": 10,
                "lastLine": 12
            }
        ],
        "window": 3
    },
    {
        "content": "if(num.scale > scale){setScale(num.scale);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/sub(smallsql.database.MutableNumeric)",
                "startLine": 8,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/add(smallsql.database.MutableNumeric)",
                "startLine": 8,
                "lastLine": 10
            }
        ],
        "window": 3
    },
    {
        "content": "if(lock == storePage){if(lock == prev){if(lock.nextLock == null){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 15,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 42,
                "lastLine": 45
            }
        ],
        "window": 3
    },
    {
        "content": "assertFalse(rs.wasNull());count++;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_boolean()",
                "startLine": 27,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_boolean()",
                "startLine": 22,
                "lastLine": 24
            }
        ],
        "window": 3
    },
    {
        "content": "}break;default:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/CommandTable/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 47,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)",
                "startLine": 165,
                "lastLine": 167
            }
        ],
        "window": 3
    },
    {
        "content": "if (comment != NOT_COMMENT) {break;}else if(quote == 0){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)",
                "startLine": 168,
                "lastLine": 170
            },
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)",
                "startLine": 34,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)",
                "startLine": 15,
                "lastLine": 17
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append(' ');formatNumber( details.year % 100, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 96,
                "lastLine": 98
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 111,
                "lastLine": 113
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:return readLongBinary();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBytes(int,int)",
                "startLine": 52,
                "lastLine": 54
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 48,
                "lastLine": 50
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:return ((DateTime)obj).getTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)",
                "startLine": 12,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)",
                "startLine": 14,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 15,
                "lastLine": 17
            }
        ],
        "window": 3
    },
    {
        "content": "prev = lock;lock = lock.nextLock;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 58,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 31,
                "lastLine": 33
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 117,
                "lastLine": 119
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/initValue(smallsql.database.Expression)",
                "startLine": 8,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionAbs/getObject()",
                "startLine": 14,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getNumeric()",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 32,
                "lastLine": 34
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 25,
                "lastLine": 27
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 60,
                "lastLine": 62
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getMoney()",
                "startLine": 7,
                "lastLine": 9
            }
        ],
        "window": 3
    },
    {
        "content": "prevLock = lock;lock = lock.nextLock;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 85,
                "lastLine": 87
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestWriteLock(smallsql.database.SSConnection,smallsql.database.TableStorePage)",
                "startLine": 23,
                "lastLine": 25
            }
        ],
        "window": 3
    },
    {
        "content": "cal.close();checkValues( st, values, needTrim);st.execute(\"Delete From \"+ table);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/runTest()",
                "startLine": 173,
                "lastLine": 177
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/runTest()",
                "startLine": 122,
                "lastLine": 125
            }
        ],
        "window": 3
    },
    {
        "content": "Statement st = con.createStatement();ResultSet rs;Integer oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_desc()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "return node;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,long,int,java.util.ArrayList)",
                "startLine": 9,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,char%5B%5D,java.util.ArrayList)",
                "startLine": 16,
                "lastLine": 18
            }
        ],
        "window": 3
    },
    {
        "content": "}switch(token.value){case SQLTokenizer.COMMA:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionTokenList(smallsql.database.Command,int)",
                "startLine": 23,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/singleSelect()",
                "startLine": 51,
                "lastLine": 54
            }
        ],
        "window": 3
    },
    {
        "content": "try{Expression expr = getValue(columnIndex);wasNull = expr.isNull();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getFloat(int)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getLong(int)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getInt(int)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDouble(int)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBoolean(int)",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 16,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 66,
                "lastLine": 68
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getBoolean(java.lang.Object,int)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getNumeric()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBoolean(int,int)",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getMoney()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getMoney(int,int)",
                "startLine": 5,
                "lastLine": 7
            }
        ],
        "window": 3
    },
    {
        "content": "final int getInt() throws Exception {if(isNull()) return 0;String str = param1.getString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionCharLen/getInt()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionBitLen/getInt()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionOctetLen/getInt()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "Thread thread = new Thread(new Runnable(){public void run(){try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentRead()",
                "startLine": 25,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 17,
                "lastLine": 20
            }
        ],
        "window": 3
    },
    {
        "content": "token = nextToken(MISSING_OUTER_JOIN);if(token.value == SQLTokenizer.OUTER)token = nextToken(MISSING_JOIN);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/rowSource(smallsql.database.Command,smallsql.database.DataSources,int)",
                "startLine": 34,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/rowSource(smallsql.database.Command,smallsql.database.DataSources,int)",
                "startLine": 28,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/rowSource(smallsql.database.Command,smallsql.database.DataSources,int)",
                "startLine": 40,
                "lastLine": 42
            }
        ],
        "window": 3
    },
    {
        "content": "if(init) return;Connection con = AllTests.getConnection();Statement st = con.createStatement();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/setUp()",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptions/init()",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/setUp()",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('/');formatNumber( details.year % 100, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 26,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 54,
                "lastLine": 56
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.LONGNVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 47,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 41,
                "lastLine": 43
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:MutableNumeric newValue = expr.getNumeric();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 40,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 139,
                "lastLine": 141
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 82,
                "lastLine": 84
            }
        ],
        "window": 3
    },
    {
        "content": "previousToken();return leftExpr;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expression(smallsql.database.Command,int)",
                "startLine": 88,
                "lastLine": 90
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expression(smallsql.database.Command,int)",
                "startLine": 31,
                "lastLine": 33
            }
        ],
        "window": 3
    },
    {
        "content": "System.out.print('\\t');}System.out.println();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/tools/CommandLine/printRS(java.sql.ResultSet)",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/tools/CommandLine/printRS(java.sql.ResultSet)",
                "startLine": 11,
                "lastLine": 13
            }
        ],
        "window": 3
    },
    {
        "content": "token = nextToken();if(token != null) offset = token.offset;previousToken();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/addColumn(smallsql.database.SQLToken,smallsql.database.CommandTable)",
                "startLine": 27,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionDefList(smallsql.database.Command,smallsql.database.Expressions,smallsql.database.Strings)",
                "startLine": 6,
                "lastLine": 8
            }
        ],
        "window": 3
    },
    {
        "content": "MutableNumeric obj = getValue(i).getNumeric();wasNull = obj == null;if(wasNull) return null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int,int)",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append(' ');formatNumber( details.year, 4, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 119,
                "lastLine": 121
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 103,
                "lastLine": 105
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.UNIQUEIDENTIFIER:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 52,
                "lastLine": 54
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 59,
                "lastLine": 61
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBoolean(int,int)",
                "startLine": 40,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 40,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 41,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/convertExpressionIfNeeded(smallsql.database.Expression,smallsql.database.Expression)",
                "startLine": 12,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 40,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBytes(int,int)",
                "startLine": 47,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getMoney(int,int)",
                "startLine": 38,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 40,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 40,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 115,
                "lastLine": 117
            }
        ],
        "window": 3
    },
    {
        "content": "Connection con = AllTests.getConnection();dropTable(con,\"testUpdate\");Statement st = con.createStatement();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestDeleteUpdate/testUpdate1()",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDeleteUpdate/testUpdate2()",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.REAL:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 10,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getMoney(java.lang.Object,int)",
                "startLine": 10,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/isSignedDataType(int)",
                "startLine": 9,
                "lastLine": 11
            }
        ],
        "window": 3
    },
    {
        "content": "offset++;break;case SQLTokenizer.SMALLINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 20,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 10,
                "lastLine": 12
            }
        ],
        "window": 3
    },
    {
        "content": "formatNumber( details.month+1, 2, buf);formatNumber( details.day, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 182,
                "lastLine": 184
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 177,
                "lastLine": 179
            }
        ],
        "window": 3
    },
    {
        "content": "assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 28,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 55,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 50,
                "lastLine": 52
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 44,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 35,
                "lastLine": 37
            }
        ],
        "window": 3
    },
    {
        "content": "super(FUNCTION);this.left   = left;this.right  = right;",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/ExpressionArithmetic/ExpressionArithmetic(smallsql.database.Expression,smallsql.database.Expression,int)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+constructor:///smallsql/database/ExpressionArithmetic/ExpressionArithmetic(smallsql.database.Expression,smallsql.database.Expression,smallsql.database.Expression,int)",
                "startLine": 4,
                "lastLine": 6
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:case SQLTokenizer.LONGVARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getBytes(java.lang.Object,int)",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionConvert/getString()",
                "startLine": 6,
                "lastLine": 8
            }
        ],
        "window": 3
    },
    {
        "content": "}elseif (value.length == 2 && (value[0] > 0)){long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/doubleValue()",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/toString()",
                "startLine": 13,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/floatValue()",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/longValue()",
                "startLine": 12,
                "lastLine": 15
            }
        ],
        "window": 3
    },
    {
        "content": "String message = \"Check DisplaySize: \" + expectedLen + \"!=\" + Integer.MAX_VALUE + \")\";assertTrue( message, expectedLen == Integer.MAX_VALUE );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertEqualsRsValue(java.lang.Object,java.sql.ResultSet,boolean)",
                "startLine": 113,
                "lastLine": 115
            },
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertEqualsRsValue(java.lang.Object,java.sql.ResultSet,boolean)",
                "startLine": 105,
                "lastLine": 107
            }
        ],
        "window": 3
    },
    {
        "content": "try{Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRows(java.sql.Connection)",
                "startLine": 8,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertRows(java.sql.Connection)",
                "startLine": 8,
                "lastLine": 10
            }
        ],
        "window": 3
    },
    {
        "content": "int length = param3.getInt();if(length < 0)throw SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSubstring/getBytes()",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSubstring/getString()",
                "startLine": 5,
                "lastLine": 7
            }
        ],
        "window": 3
    },
    {
        "content": "}else{switch(expr.getDataType()){case SQLTokenizer.REAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 19,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 13,
                "lastLine": 15
            }
        ],
        "window": 3
    },
    {
        "content": "con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");ResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery(\"Select * from transactions Where 1=0\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 13,
                "lastLine": 16
            }
        ],
        "window": 3
    },
    {
        "content": "factor = 1;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/setScale(int)",
                "startLine": 8,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/setScale(int)",
                "startLine": 17,
                "lastLine": 19
            }
        ],
        "window": 3
    },
    {
        "content": "throw new IllegalArgumentException(\"Duplicate key: \" + key);}else {",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/language/Language/setSqlStates()",
                "startLine": 17,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/database/language/Language/addMessages(java.lang.String%5B%5D%5B%5D)",
                "startLine": 18,
                "lastLine": 20
            }
        ],
        "window": 3
    },
    {
        "content": "MutableNumeric obj = getValue(columnIndex).getNumeric();wasNull = obj == null;if(wasNull) return null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int,int)",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "}IndexNode node = status.nodes[idx];nodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 47,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 76,
                "lastLine": 78
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.VARCHAR:case SQLTokenizer.LONGVARCHAR:String str = expr.getString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 76,
                "lastLine": 78
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 133,
                "lastLine": 135
            }
        ],
        "window": 3
    },
    {
        "content": "int count = commitPages.size();for(int i=0; i<count; i++){TransactionStep page = (TransactionStep)commitPages.get(i);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSConnection/commit()",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSConnection/rollback()",
                "startLine": 4,
                "lastLine": 6
            }
        ],
        "window": 3
    },
    {
        "content": "ResultSet rs;rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");assertFalse( \"To many rows\", rs.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/runTest()",
                "startLine": 3,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 3,
                "lastLine": 6
            }
        ],
        "window": 3
    },
    {
        "content": "}else{previousToken();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/nextIdentiferPart(java.lang.String)",
                "startLine": 11,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)",
                "startLine": 113,
                "lastLine": 115
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)",
                "startLine": 20,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/index(smallsql.database.Command,int,java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 22,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/tableSource(smallsql.database.Command,smallsql.database.DataSources)",
                "startLine": 36,
                "lastLine": 38
            }
        ],
        "window": 3
    },
    {
        "content": "pr.setFloat (  4, (float)1234.56789 );pr.setFloat (  5 , (float)9876.54321 );pr.setBytes (  6, largeByteArray );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 14,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 18,
                "lastLine": 20
            }
        ],
        "window": 3
    },
    {
        "content": "fos.close();java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");long time = -System.currentTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 14,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 14,
                "lastLine": 16
            }
        ],
        "window": 3
    },
    {
        "content": "rs.moveToInsertRow();rs.updateString(\"v\", \"qwert2\");rs.insertRow();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 18,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 11,
                "lastLine": 13
            }
        ],
        "window": 3
    },
    {
        "content": "Statement st = con.createStatement();ResultSet rs;Long oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_bigint()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_bigint_withDoublicateValues()",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "}store.setCurrentOffsetInPage(offsetInPage + size);}",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/View/View(smallsql.database.SSConnection,java.lang.String,java.nio.channels.FileChannel,long)",
                "startLine": 16,
                "lastLine": 18
            },
            {
                "locFile": "java+constructor:///smallsql/database/Table/Table(smallsql.database.Database,smallsql.database.SSConnection,java.lang.String,java.nio.channels.FileChannel,long,int)",
                "startLine": 29,
                "lastLine": 31
            }
        ],
        "window": 3
    },
    {
        "content": "try{Connection con = AllTests.getConnection();Statement st = con.createStatement();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/setUp()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/setUp()",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "}break;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/convertExpressionIfNeeded(smallsql.database.Expression,smallsql.database.Expression)",
                "startLine": 26,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/setParamAt(smallsql.database.Expression,int)",
                "startLine": 13,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/convertExpressionIfNeeded(smallsql.database.Expression,smallsql.database.Expression)",
                "startLine": 24,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/database/Utils/like(java.lang.String,java.lang.String)",
                "startLine": 41,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/datatype(boolean)",
                "startLine": 112,
                "lastLine": 114
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.NVARCHAR:case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDataTypePrecision(int,int)",
                "startLine": 25,
                "lastLine": 27
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/datatype(boolean)",
                "startLine": 54,
                "lastLine": 56
            }
        ],
        "window": 3
    },
    {
        "content": "while(true){int nextEntry = getUnsignedShort();if(nextEntry == octet){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/remove(long)",
                "startLine": 18,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/add(long)",
                "startLine": 26,
                "lastLine": 28
            }
        ],
        "window": 3
    },
    {
        "content": "throw new Error(String.valueOf(expr.getDataType()));}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 74,
                "lastLine": 76
            },
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 67,
                "lastLine": 69
            }
        ],
        "window": 3
    },
    {
        "content": "shift -= 16;listEnum.stack++;listEnum.resultStack[listEnum.stack] = result;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 28,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 22,
                "lastLine": 24
            }
        ],
        "window": 3
    },
    {
        "content": "} catch (SQLException ex) {assertSQLException( \"01000\", 0, ex );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_READ_COMMITTED()",
                "startLine": 13,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_REPEATABLE_READ()",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "fail(failureMessage);}catch (SQLException e) {",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTokenizer/failureTest(java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTokenizer/failureTest(java.lang.String,java.lang.String)",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "final int getInt() throws Exception {if(param1.isNull()) return 0;DateTime.Details details = new DateTime.Details(param1.getLong());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionDayOfYear/getInt()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionYear/getInt()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionMinute/getInt()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionMonth/getInt()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionHour/getInt()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionDayOfMonth/getInt()",
                "startLine": 0,
                "lastLine": 2
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append(':');formatNumber( details.second, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 222,
                "lastLine": 224
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 127,
                "lastLine": 129
            }
        ],
        "window": 3
    },
    {
        "content": "return true;}}else fullRightRowCounter++;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 23,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 59,
                "lastLine": 61
            }
        ],
        "window": 3
    },
    {
        "content": "break;default: throw new Error();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 59,
                "lastLine": 61
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/createStore(smallsql.database.Table,smallsql.database.StorePage,int,long)",
                "startLine": 48,
                "lastLine": 50
            }
        ],
        "window": 3
    },
    {
        "content": "rowSource.setRowPosition( rowList.get(rowIdx) );return true;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Scrollable/next()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/Scrollable/absolute(int)",
                "startLine": 16,
                "lastLine": 18
            }
        ],
        "window": 3
    },
    {
        "content": "}case SQLTokenizer.SQL_TSI_QUARTER:{DateTime.Details details2 = new DateTime.Details(param2.getLong());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getLong()",
                "startLine": 19,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getInt()",
                "startLine": 22,
                "lastLine": 24
            }
        ],
        "window": 3
    },
    {
        "content": "pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 31,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 27,
                "lastLine": 29
            }
        ],
        "window": 3
    },
    {
        "content": "rs.insertRow();rs.beforeFirst();assertTrue( rs.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withRightWhere()",
                "startLine": 16,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 20,
                "lastLine": 23
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBytes(int,int)",
                "startLine": 31,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 11,
                "lastLine": 13
            }
        ],
        "window": 3
    },
    {
        "content": "value = newValue;break;case SQLTokenizer.MONEY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 86,
                "lastLine": 88
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 143,
                "lastLine": 145
            }
        ],
        "window": 3
    },
    {
        "content": "rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();int count = rs.getInt(1);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 17,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertRows(java.sql.Connection)",
                "startLine": 35,
                "lastLine": 37
            }
        ],
        "window": 3
    },
    {
        "content": "byte[] b = new byte[length];System.arraycopy(bytes, start, b, 0, length);return b;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSubstring/getBytes()",
                "startLine": 10,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionLTrim/getBytes()",
                "startLine": 9,
                "lastLine": 11
            }
        ],
        "window": 3
    },
    {
        "content": "assertTrue( \"To few rows\", rs.next() );assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);assertFalse( \"To many rows\", rs.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 11,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 18,
                "lastLine": 20
            }
        ],
        "window": 3
    },
    {
        "content": "case LIKE:case ISNULL:case ISNOTNULL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/isNull()",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDataType()",
                "startLine": 16,
                "lastLine": 18
            }
        ],
        "window": 3
    },
    {
        "content": "for(int i=0; i<columnExpressions.size(); i++){Expression src = newRowSources[i];if(src != null && (!(src instanceof ExpressionValue) || !((ExpressionValue)src).isEmpty())){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/updateRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 13,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/insertRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 16,
                "lastLine": 18
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('-');formatNumber( details.year % 100, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 151,
                "lastLine": 153
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 82,
                "lastLine": 84
            }
        ],
        "window": 3
    },
    {
        "content": "con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");assertTrue( rs2.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadCommited()",
                "startLine": 9,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadUncommited()",
                "startLine": 9,
                "lastLine": 12
            }
        ],
        "window": 3
    },
    {
        "content": "break;case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 41,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 55,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 67,
                "lastLine": 69
            },
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 60,
                "lastLine": 62
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/initValue(smallsql.database.Expression)",
                "startLine": 26,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 99,
                "lastLine": 101
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/datatype(boolean)",
                "startLine": 83,
                "lastLine": 85
            }
        ],
        "window": 3
    },
    {
        "content": "Statement st = con.createStatement();ResultSet rs;String oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_nvarchar()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_Join()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_GroupBy()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_char()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "rs.getString(\"v\");fail(\"SQLException 'No current row' should be throw\");}catch(SQLException ex){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testLastWithWhereAssert(java.sql.ResultSet)",
                "startLine": 4,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testNextWithWhereAssert(java.sql.ResultSet)",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.BINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/convertExpressionIfNeeded(smallsql.database.Expression,smallsql.database.Expression)",
                "startLine": 19,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/convertExpressionIfNeeded(smallsql.database.Expression,smallsql.database.Expression)",
                "startLine": 5,
                "lastLine": 7
            }
        ],
        "window": 3
    },
    {
        "content": "con.setAutoCommit(false);con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 12,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "assertSQLException(\"HY010\", 0, ex);}try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 21,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedStatement()",
                "startLine": 8,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 9,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 15,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedStatement()",
                "startLine": 14,
                "lastLine": 16
            }
        ],
        "window": 3
    },
    {
        "content": "Connection con1 = AllTests.getConnection();Connection con2 = AllTests.createConnection();try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadUncommited()",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadCommited()",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "assertTrue( rs.next() );oldValue = rs.getBoolean(\"b\");assertFalse(oldValue);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_boolean()",
                "startLine": 14,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_boolean()",
                "startLine": 9,
                "lastLine": 12
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.SMALLMONEY:case SQLTokenizer.MONEY:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/isSignedDataType(int)",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/getSQLDataType(int)",
                "startLine": 23,
                "lastLine": 25
            }
        ],
        "window": 3
    },
    {
        "content": "}}while(true){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/singleSelect()",
                "startLine": 30,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 14,
                "lastLine": 16
            }
        ],
        "window": 3
    },
    {
        "content": "}return;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 61,
                "lastLine": 63
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/remove(long)",
                "startLine": 38,
                "lastLine": 40
            }
        ],
        "window": 3
    },
    {
        "content": "Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);ResultSet rs;int count;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "Expression expr = getValue(i);wasNull = expr.isNull();if(wasNull) return null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTime(int)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTimestamp(int)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDate(int)",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "}switch(token.value){case SQLTokenizer.PARENTHESIS_R:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createTable()",
                "startLine": 50,
                "lastLine": 52
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/addColumn(smallsql.database.SQLToken,smallsql.database.CommandTable)",
                "startLine": 18,
                "lastLine": 20
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append(':');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 208,
                "lastLine": 210
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 285,
                "lastLine": 287
            }
        ],
        "window": 3
    },
    {
        "content": "init();Connection con = AllTests.getConnection();Statement st = con.createStatement();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testViewWidthGroupBy()",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testCountNoRow()",
                "startLine": 1,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "break;case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 47,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 105,
                "lastLine": 107
            }
        ],
        "window": 3
    },
    {
        "content": "try{PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );long time = -System.currentTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 10,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 7,
                "lastLine": 9
            }
        ],
        "window": 3
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testVarcharEmpty()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testVarbinaryEmpty()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testGroupBy()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_boolean()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testTest()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_double()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_real()",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "con.add(lock);return lock;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 40,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 67,
                "lastLine": 69
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestWriteLock(smallsql.database.SSConnection,smallsql.database.TableStorePage)",
                "startLine": 9,
                "lastLine": 11
            }
        ],
        "window": 3
    },
    {
        "content": "final void setParamAt( Expression param, int idx){switch(idx){case 0:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/setParamAt(smallsql.database.Expression,int)",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunction/setParamAt(smallsql.database.Expression,int)",
                "startLine": 0,
                "lastLine": 2
            }
        ],
        "window": 3
    },
    {
        "content": "return 0;}else{if (value.length == 1 && (value[0] > 0)){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/floatValue()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/longValue()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/doubleValue()",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "node = node.getChildNode(digit);if(node == null) return null;if(nodeList != null) nodeList.add(node);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,char%5B%5D,java.util.ArrayList)",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,long,int,java.util.ArrayList)",
                "startLine": 3,
                "lastLine": 6
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.VIEW:case SQLTokenizer.INDEX:case SQLTokenizer.PROCEDURE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/drop()",
                "startLine": 11,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/alter()",
                "startLine": 6,
                "lastLine": 8
            }
        ],
        "window": 3
    },
    {
        "content": "assertNull(rs.getObject(\"i\"));assertTrue( rs.next() );oldValue = Math.abs( rs.getInt(\"i\") );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_function()",
                "startLine": 11,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_functionAscDesc()",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "char nodeDigit = nodes[mid].digit;if(nodeDigit == digit) return mid;if(nodeDigit < digit){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexNode/findNodeInsertPos(char,int,int)",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/database/IndexNode/findNodePos(char,int,int)",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "buffer.position(0);int magic   = buffer.getInt();int version = buffer.getInt();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 13,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 8,
                "lastLine": 10
            }
        ],
        "window": 3
    },
    {
        "content": "break;default:previousToken();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/singleSelect()",
                "startLine": 26,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/from(smallsql.database.CommandSelect)",
                "startLine": 16,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/index(smallsql.database.Command,int,java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 18,
                "lastLine": 20
            }
        ],
        "window": 3
    },
    {
        "content": "offset = previousOffset;return;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/setPreviousOffset(smallsql.database.LongTreeListEnum)",
                "startLine": 16,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/setPreviousOffset(smallsql.database.LongTreeListEnum)",
                "startLine": 10,
                "lastLine": 12
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('.');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 238,
                "lastLine": 240
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 254,
                "lastLine": 256
            }
        ],
        "window": 3
    },
    {
        "content": "assertRowCount( 1, \"Select * from Scrollable\");assertRowCount( 0, \"Select * from Scrollable Where 1=0\");Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhere()",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhere()",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testLastWithWhere()",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testNextWithWhere()",
                "startLine": 7,
                "lastLine": 10
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 34,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 50,
                "lastLine": 52
            }
        ],
        "window": 3
    },
    {
        "content": "con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");assertRowCount( 4, \"Select * from transactions\");con.rollback();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollback()",
                "startLine": 13,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 16,
                "lastLine": 19
            }
        ],
        "window": 3
    },
    {
        "content": "int count = 0;while(rs.next()){count++;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertRowCount(int,java.sql.ResultSet)",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentRead()",
                "startLine": 17,
                "lastLine": 19
            }
        ],
        "window": 3
    },
    {
        "content": "Connection con2 = AllTests.createConnection();try{con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadSerialized()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadWriteLock()",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "break;case SQLTokenizer.DOUBLE:case SQLTokenizer.FLOAT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 17,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 23,
                "lastLine": 25
            }
        ],
        "window": 3
    },
    {
        "content": "return new DateTime( getLong(), dataType );case SQLTokenizer.UNIQUEIDENTIFIER:return getBytes();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 48,
                "lastLine": 50
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 40,
                "lastLine": 42
            }
        ],
        "window": 3
    },
    {
        "content": "}elsereturn getReturnValue(status.nodeValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 31,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 62,
                "lastLine": 64
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.UNIQUEIDENTIFIER:offset += 16;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 53,
                "lastLine": 55
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 55,
                "lastLine": 57
            }
        ],
        "window": 3
    },
    {
        "content": "int offsetInPage = store.getCurrentOffsetInPage();int size = store.readInt();switch(type){",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/Table/Table(smallsql.database.Database,smallsql.database.SSConnection,java.lang.String,java.nio.channels.FileChannel,long,int)",
                "startLine": 23,
                "lastLine": 25
            },
            {
                "locFile": "java+constructor:///smallsql/database/View/View(smallsql.database.SSConnection,java.lang.String,java.nio.channels.FileChannel,long)",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "assertNull(oldValue);assertTrue( rs.next() );oldValue = rs.getString(\"v\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 13,
                "lastLine": 16
            }
        ],
        "window": 3
    },
    {
        "content": "Expression expr = getValue(columnIndex);wasNull = expr.isNull();if(wasNull) return null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTime(int)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTimestamp(int,java.util.Calendar)",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getURL(int)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTimestamp(int)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTime(int,java.util.Calendar)",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDate(int,java.util.Calendar)",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDate(int)",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "}node = node.addNode(digit);if(node.isEmpty()){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)",
                "startLine": 13,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 16,
                "lastLine": 18
            }
        ],
        "window": 3
    },
    {
        "content": "tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 37,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 55,
                "lastLine": 57
            }
        ],
        "window": 3
    },
    {
        "content": "TableView table = fromEntry.getTableView();int colIdx = table.findColumnIdx(expr.getName());if(colIdx >= 0){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/compileLinkExpressionName(smallsql.database.ExpressionName)",
                "startLine": 11,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/compileLinkExpressionName(smallsql.database.ExpressionName)",
                "startLine": 28,
                "lastLine": 30
            }
        ],
        "window": 3
    },
    {
        "content": "if(size >= data.length ){resize(size << 1);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongList/add(long)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescriptions/add(smallsql.database.IndexDescription)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/Expressions/add(smallsql.database.Expression)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/Expressions/add(int,smallsql.database.Expression)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/Strings/add(java.lang.String)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ForeignKeys/add(smallsql.database.ForeignKey)",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"next\", rs.next() );assertTrue(\"isFirst\", rs.isFirst() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 13,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 15,
                "lastLine": 17
            }
        ],
        "window": 3
    },
    {
        "content": "Statement stat = conn.createStatement();try {try {",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testSyntaxErrors()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testLocalizedErrors()",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "Statement st = con.createStatement();int firstValue = -10000;for(int i=firstValue; i<10000; i++){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/testMoney1()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/testMoney2()",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "rowSource.setRowPosition( insertedRows.get( currentInsertedRow() ) );return true;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SortedResult/previous()",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/next()",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "return cmdCreate;case SQLTokenizer.COMMA:continue nextCol;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createTable()",
                "startLine": 53,
                "lastLine": 55
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createTable()",
                "startLine": 41,
                "lastLine": 43
            }
        ],
        "window": 3
    },
    {
        "content": "assertTrue(rs.next());assertEquals(\"Columnname:\", \"id1\", rs.getString(\"COLUMN_NAME\"));assertFalse(rs.next());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetBestRowIdentifier()",
                "startLine": 19,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetBestRowIdentifier()",
                "startLine": 27,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetBestRowIdentifier()",
                "startLine": 11,
                "lastLine": 13
            }
        ],
        "window": 3
    },
    {
        "content": "}}st1.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 24,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 25,
                "lastLine": 27
            }
        ],
        "window": 3
    },
    {
        "content": "if(isNull()) return 0;switch(interval){case SQLTokenizer.SQL_TSI_FRAC_SECOND:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getInt()",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getLong()",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('.');formatNumber( details.month+1, 2, buf);buf.append('.');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 66,
                "lastLine": 68
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 73,
                "lastLine": 75
            }
        ],
        "window": 3
    },
    {
        "content": "nodeStack.pop();continue;}else{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 70,
                "lastLine": 72
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 40,
                "lastLine": 42
            }
        ],
        "window": 3
    },
    {
        "content": "assertTrue( rs.isFirst() );assertTrue( rs.isLast() );assertFalse( rs.isAfterLast() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 27,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 15,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 39,
                "lastLine": 41
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 45,
                "lastLine": 47
            }
        ],
        "window": 3
    },
    {
        "content": "assertRowCount( 1, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollback()",
                "startLine": 8,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 8,
                "lastLine": 11
            }
        ],
        "window": 3
    },
    {
        "content": "while(rs.next()){rs.getObject(1);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testTest()",
                "startLine": 17,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testTest()",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDataTypePrecision(int,int)",
                "startLine": 46,
                "lastLine": 48
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDisplaySize(int,int,int)",
                "startLine": 20,
                "lastLine": 22
            }
        ],
        "window": 3
    },
    {
        "content": "formatNumber( details.day, 2, buf);buf.append(',');buf.append(' ');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 109,
                "lastLine": 111
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 117,
                "lastLine": 119
            }
        ],
        "window": 3
    },
    {
        "content": "int isolation = con.getTransactionIsolation();con.setAutoCommit(false);try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_REPEATABLE_READ()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_READ_COMMITTED()",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");}finally{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertAndUpdate()",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testUpdateAndSavepoint()",
                "startLine": 40,
                "lastLine": 42
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 53,
                "lastLine": 55
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getMoney(int,int)",
                "startLine": 50,
                "lastLine": 52
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 18,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBytes(int,int)",
                "startLine": 24,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 52,
                "lastLine": 54
            }
        ],
        "window": 3
    },
    {
        "content": "rs.getObject(i);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptions/runTest()",
                "startLine": 18,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertRowCount(int,java.sql.ResultSet)",
                "startLine": 7,
                "lastLine": 11
            }
        ],
        "window": 3
    },
    {
        "content": "beforeFirst();return false;}else{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Scrollable/absolute(int)",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/Scrollable/relative(int)",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "if(idx >= 0) return idx;internalExpressions.add(expr);return internalExpressions.size()-1;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/GroupResult/addInternalExpressionFromSelect(smallsql.database.Expression)",
                "startLine": 15,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/database/GroupResult/addInternalExpressionFromGroupBy(smallsql.database.Expression)",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "case Join.LEFT_JOIN:case Join.FULL_JOIN:isOuterValid = false;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 18,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 55,
                "lastLine": 57
            }
        ],
        "window": 3
    },
    {
        "content": "assertTrue(\"start\", rs.first());rs.updateObject(\"c\", value, Types.VARCHAR );assertEquals(\"getObject\", value, rs.getObject(\"c\"));",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testUpdateAndScroll()",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testUpdateAndScroll()",
                "startLine": 42,
                "lastLine": 44
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testUpdateAndScroll()",
                "startLine": 21,
                "lastLine": 23
            }
        ],
        "window": 3
    },
    {
        "content": "Connection con = AllTests.getConnection();try{Statement st = con.createStatement();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testAmbiguousColumn()",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testBinaryStore()",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "if(longValue > 0)return 1;return 0;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSign/getInt()",
                "startLine": 14,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSign/getInt()",
                "startLine": 21,
                "lastLine": 23
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('-');formatNumber( details.month+1, 2, buf);buf.append('-');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 80,
                "lastLine": 82
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 87,
                "lastLine": 89
            }
        ],
        "window": 3
    },
    {
        "content": "break;case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/initValue(smallsql.database.Expression)",
                "startLine": 18,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 70,
                "lastLine": 72
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 89,
                "lastLine": 91
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 127,
                "lastLine": 129
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('/');formatNumber( details.year, 4, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 61,
                "lastLine": 63
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 33,
                "lastLine": 35
            }
        ],
        "window": 3
    },
    {
        "content": "k++;byte[] tmp2 = new byte[k];System.arraycopy( tmp, 0, tmp2, 0, k);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertEqualsObject(java.lang.String,java.lang.Object,java.lang.Object,boolean)",
                "startLine": 8,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertEqualsObject(java.lang.String,java.lang.Object,java.lang.Object,boolean)",
                "startLine": 21,
                "lastLine": 23
            }
        ],
        "window": 3
    },
    {
        "content": "node.addRemainderKey( rowOffset, key, i );return null;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)",
                "startLine": 17,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 20,
                "lastLine": 22
            }
        ],
        "window": 3
    },
    {
        "content": "this.value  = value;this.offset = tokenStart;this.length = tokenEnd-tokenStart;",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/SQLToken/SQLToken(java.lang.String,int,int,int)",
                "startLine": 4,
                "lastLine": 6
            },
            {
                "locFile": "java+constructor:///smallsql/database/SQLToken/SQLToken(int,int,int)",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs = st.executeQuery(sql);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/printSQL(java.lang.String)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertEqualsRsValue(java.lang.Object,java.lang.String)",
                "startLine": 4,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertRowCount(int,java.lang.String)",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "}}}else{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SortedResult/relative(int)",
                "startLine": 6,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 33,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)",
                "startLine": 105,
                "lastLine": 107
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/absolute(int)",
                "startLine": 7,
                "lastLine": 9
            }
        ],
        "window": 3
    },
    {
        "content": "assertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") );assertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") );assertEquals( \"5\", rs.getObject(\"COLUMN_Def\") );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetColumn()",
                "startLine": 12,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetColumn()",
                "startLine": 21,
                "lastLine": 23
            }
        ],
        "window": 3
    },
    {
        "content": "assertFalse( rs.isFirst() );assertFalse( rs.isLast() );assertFalse( rs.isAfterLast() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 33,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 9,
                "lastLine": 11
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.VARBINARY:return readBinary();case SQLTokenizer.TINYINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBytes(int,int)",
                "startLine": 9,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "formatNumber( details.month+1, 2, buf);buf.append('/');formatNumber( details.year % 100, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 53,
                "lastLine": 55
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 276,
                "lastLine": 278
            }
        ],
        "window": 3
    },
    {
        "content": "default:throw new Error();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/caseExpr(smallsql.database.Command)",
                "startLine": 30,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/setTransaction()",
                "startLine": 15,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 67,
                "lastLine": 69
            }
        ],
        "window": 3
    },
    {
        "content": "count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 19,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 20,
                "lastLine": 22
            }
        ],
        "window": 3
    },
    {
        "content": "long temp = 0;int v1 = value.length;for(int v2 = val2.length; v2>0; ){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/add(int%5B%5D)",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/sub(int%5B%5D)",
                "startLine": 7,
                "lastLine": 9
            }
        ],
        "window": 3
    },
    {
        "content": "this.condition = condition;this.left = left;this.right = right;",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/JoinScroll/JoinScroll(int,smallsql.database.RowSource,smallsql.database.RowSource,smallsql.database.Expression)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+constructor:///smallsql/database/Join/Join(int,smallsql.database.RowSource,smallsql.database.RowSource,smallsql.database.Expression)",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "Statement st = con.createStatement();ResultSet rs;int oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_functionAscDesc()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_function()",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('/');formatNumber( details.day, 2, buf);buf.append('/');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 24,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 31,
                "lastLine": 33
            }
        ],
        "window": 3
    },
    {
        "content": "previousToken();return fromSource;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/rowSource(smallsql.database.Command,smallsql.database.DataSources,int)",
                "startLine": 49,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/rowSource(smallsql.database.Command,smallsql.database.DataSources,int)",
                "startLine": 55,
                "lastLine": 57
            }
        ],
        "window": 3
    },
    {
        "content": "public void testOther() throws Exception{Connection con = AllTests.getConnection();Statement st = con.createStatement();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testOther()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testOther()",
                "startLine": 0,
                "lastLine": 2
            }
        ],
        "window": 3
    },
    {
        "content": "throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/parse(java.lang.String)",
                "startLine": 87,
                "lastLine": 89
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/parse(java.lang.String)",
                "startLine": 96,
                "lastLine": 98
            }
        ],
        "window": 3
    },
    {
        "content": "switch(dataType){case SQLTokenizer.DECIMAL:case SQLTokenizer.NUMERIC:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Column/getScale()",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getScale()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getScale()",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "final byte[] getBytes() throws Exception{if(isNull()) return null;byte[] bytes = param1.getBytes();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRTrim/getBytes()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionInsert/getBytes()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSubstring/getBytes()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRepeat/getBytes()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionLTrim/getBytes()",
                "startLine": 0,
                "lastLine": 2
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.BIGINT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)",
                "startLine": 6,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 9,
                "lastLine": 11
            }
        ],
        "window": 3
    },
    {
        "content": "previousToken();return list;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionTokenList(smallsql.database.Command,int)",
                "startLine": 30,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionTokenList(smallsql.database.Command,int)",
                "startLine": 21,
                "lastLine": 23
            }
        ],
        "window": 3
    },
    {
        "content": "}boolean isNext = next();previous();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SortedResult/isLast()",
                "startLine": 6,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/Scrollable/isLast()",
                "startLine": 5,
                "lastLine": 7
            }
        ],
        "window": 3
    },
    {
        "content": "switch(operation){case IN:case EQUALS_NULL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 25,
                "lastLine": 27
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 106,
                "lastLine": 108
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 36,
                "lastLine": 38
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 72,
                "lastLine": 74
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 56,
                "lastLine": 58
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 89,
                "lastLine": 91
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.DATE:case SQLTokenizer.TIME:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 149,
                "lastLine": 151
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 92,
                "lastLine": 94
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/initValue(smallsql.database.Expression)",
                "startLine": 32,
                "lastLine": 34
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('-');formatNumber( details.day, 2, buf);buf.append('-');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 149,
                "lastLine": 151
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 156,
                "lastLine": 158
            }
        ],
        "window": 3
    },
    {
        "content": "continue;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/insertRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 25,
                "lastLine": 27
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/updateRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 23,
                "lastLine": 25
            }
        ],
        "window": 3
    },
    {
        "content": "assertSQLException(\"01000\", 0, e);}}finally{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testAmbiguousColumn()",
                "startLine": 10,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 77,
                "lastLine": 79
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.VARBINARY:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 166,
                "lastLine": 168
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 147,
                "lastLine": 149
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/isBinaryDataType(int)",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "if(length == 0){return str1;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReplace/getString()",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReplace/getBytes()",
                "startLine": 5,
                "lastLine": 7
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.MONEY:return 19;case SQLTokenizer.REAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDisplaySize(int,int,int)",
                "startLine": 13,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDataTypePrecision(int,int)",
                "startLine": 15,
                "lastLine": 17
            }
        ],
        "window": 3
    },
    {
        "content": "assertNull( rs.getObject(\"c2\") );assertTrue( rs.next() );oldValue = rs.getString(\"c2\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test2Columns()",
                "startLine": 11,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test2Columns()",
                "startLine": 28,
                "lastLine": 31
            }
        ],
        "window": 3
    },
    {
        "content": "Statement st = con.createStatement();st.execute(\"Create Table DuplicatedColumn(col INT)\");try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnInsert()",
                "startLine": 3,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnAlter()",
                "startLine": 3,
                "lastLine": 5
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 30,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 30,
                "lastLine": 32
            }
        ],
        "window": 3
    },
    {
        "content": "store.page = storePage.page;store.sharedPageData = true;store.readPageHeader();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/createStore(smallsql.database.Table,smallsql.database.StorePage,int,long)",
                "startLine": 43,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/recreateStore(smallsql.database.Table,smallsql.database.StorePage,int)",
                "startLine": 5,
                "lastLine": 7
            }
        ],
        "window": 3
    },
    {
        "content": "for(int i=1; i<=3; i++){ResultSet rs = pr.executeQuery( );assertTrue  ( \"loop:\"+i, rs.next());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testCountOrderBy()",
                "startLine": 4,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testGroupByWithExpression()",
                "startLine": 4,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testComplex()",
                "startLine": 4,
                "lastLine": 6
            }
        ],
        "window": 3
    },
    {
        "content": "return false;}right.next();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 86,
                "lastLine": 88
            }
        ],
        "window": 3
    },
    {
        "content": "}else{quoteBuffer.append(c);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)",
                "startLine": 189,
                "lastLine": 191
            },
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)",
                "startLine": 163,
                "lastLine": 165
            }
        ],
        "window": 3
    },
    {
        "content": "}}break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 33,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 155,
                "lastLine": 157
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 106,
                "lastLine": 108
            }
        ],
        "window": 3
    },
    {
        "content": "assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));assertRowCount(1,rs);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 20,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 43,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 28,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 41,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 28,
                "lastLine": 30
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:case SQLTokenizer.BIGINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/isSignedDataType(int)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getMoney(java.lang.Object,int)",
                "startLine": 6,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getBoolean(java.lang.Object,int)",
                "startLine": 7,
                "lastLine": 9
            }
        ],
        "window": 3
    },
    {
        "content": "}else{rowSource.beforeFirst();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SortedResult/afterLast()",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/next()",
                "startLine": 17,
                "lastLine": 19
            }
        ],
        "window": 3
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnCreate()",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testViewWidthGroupBy()",
                "startLine": 6,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 9,
                "lastLine": 11
            }
        ],
        "window": 3
    },
    {
        "content": "try{Expression expr = getValue(i);wasNull = expr.isNull();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getFloat(int)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getInt(int)",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBoolean(int)",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "}catch(SQLException ex){assertSQLException(\"01000\", 0, ex);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadSerialized()",
                "startLine": 24,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 9,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testMoreResults()",
                "startLine": 11,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadWriteLock()",
                "startLine": 13,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 9,
                "lastLine": 11
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('/');formatNumber( details.day, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 172,
                "lastLine": 174
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 165,
                "lastLine": 167
            }
        ],
        "window": 3
    },
    {
        "content": "oldValue = newValue;count++;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test2Columns()",
                "startLine": 20,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 26,
                "lastLine": 28
            }
        ],
        "window": 3
    },
    {
        "content": "case LES_EQU:   return comp <= 0;case UNEQUALS:  return comp != 0;case BETWEEN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 133,
                "lastLine": 135
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 180,
                "lastLine": 182
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 158,
                "lastLine": 160
            }
        ],
        "window": 3
    },
    {
        "content": "}}else fullRightRowCounter++;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 62,
                "lastLine": 65
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 60,
                "lastLine": 62
            }
        ],
        "window": 3
    },
    {
        "content": "assertSQLException(\"01000\", 0, e);}try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 14,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 42,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 70,
                "lastLine": 73
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 56,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 28,
                "lastLine": 31
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 35,
                "lastLine": 38
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 21,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 63,
                "lastLine": 66
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 49,
                "lastLine": 52
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.MONEY:case SQLTokenizer.DECIMAL:case SQLTokenizer.NUMERIC:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/isSignedDataType(int)",
                "startLine": 6,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 13,
                "lastLine": 15
            }
        ],
        "window": 3
    },
    {
        "content": "ResultSet rs = st.executeQuery(\"Select * From \" + table);assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );rs = con.getMetaData().getIndexInfo( null, null, table, false, false );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable2/testAdd2Keys()",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable2/testAddPrimaryKey()",
                "startLine": 5,
                "lastLine": 7
            }
        ],
        "window": 3
    },
    {
        "content": "locks.put( pageKey, lock );}con.add(lock);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestWriteLock(smallsql.database.SSConnection,smallsql.database.TableStorePage)",
                "startLine": 30,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 97,
                "lastLine": 99
            }
        ],
        "window": 3
    },
    {
        "content": "while(true){char digit = (i<0) ? (length == 0 ? (char)1 : 2): (key[i]);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,char%5B%5D,java.util.ArrayList)",
                "startLine": 3,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 6,
                "lastLine": 9
            }
        ],
        "window": 3
    },
    {
        "content": "}elseif (value.length == 1){long temp = value[0] & 0xFFFFFFFFL;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/doubleValue()",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/toString()",
                "startLine": 8,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/floatValue()",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/longValue()",
                "startLine": 7,
                "lastLine": 10
            }
        ],
        "window": 3
    },
    {
        "content": "t += 86400000;d--;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/addDateTimeOffset(long,java.util.TimeZone)",
                "startLine": 5,
                "lastLine": 7
            },
            {
                "locFile": "java+constructor:///smallsql/database/DateTime/Details/Details(long)",
                "startLine": 5,
                "lastLine": 7
            }
        ],
        "window": 3
    },
    {
        "content": "assertRSMetaData(rs, colNames, colTypes);assertTrue(rs.next());assertFalse(rs.next());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetCrossReference()",
                "startLine": 19,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetCrossReference()",
                "startLine": 24,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetCrossReference()",
                "startLine": 14,
                "lastLine": 16
            }
        ],
        "window": 3
    },
    {
        "content": "}catch(NumberFormatException e){throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/singleSelect()",
                "startLine": 17,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/limit(smallsql.database.CommandSelect)",
                "startLine": 5,
                "lastLine": 7
            }
        ],
        "window": 3
    },
    {
        "content": "buf.append('-');formatNumber( details.year, 4, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 89,
                "lastLine": 91
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 158,
                "lastLine": 160
            }
        ],
        "window": 3
    },
    {
        "content": "final String getString() throws Exception {if(isNull()) return null;String str = param1.getString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionLeft/getString()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSubstring/getString()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRTrim/getString()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionInsert/getString()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRight/getString()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRepeat/getString()",
                "startLine": 0,
                "lastLine": 2
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionLTrim/getString()",
                "startLine": 0,
                "lastLine": 2
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.TINYINT:return 3;case SQLTokenizer.SMALLINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDisplaySize(int,int,int)",
                "startLine": 6,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDataTypePrecision(int,int)",
                "startLine": 7,
                "lastLine": 9
            }
        ],
        "window": 3
    },
    {
        "content": "}case SQLTokenizer.SQL_TSI_YEAR:{DateTime.Details details2 = new DateTime.Details(param2.getLong());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getLong()",
                "startLine": 24,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getInt()",
                "startLine": 27,
                "lastLine": 29
            }
        ],
        "window": 3
    },
    {
        "content": "assertEquals(3, rs.getRow());assertTrue(rs.isLast());assertFalse(rs.isFirst());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 42,
                "lastLine": 44
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 24,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 30,
                "lastLine": 32
            }
        ],
        "window": 3
    },
    {
        "content": "}catch(Exception e){throw createSyntaxError(token, MISSING_NUMBERVALUE );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/datatype(boolean)",
                "startLine": 68,
                "lastLine": 70
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/datatype(boolean)",
                "startLine": 93,
                "lastLine": 95
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/datatype(boolean)",
                "startLine": 103,
                "lastLine": 105
            }
        ],
        "window": 3
    },
    {
        "content": "case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDataTypePrecision(int,int)",
                "startLine": 23,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 26,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 49,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBytes(int,int)",
                "startLine": 42,
                "lastLine": 44
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 36,
                "lastLine": 38
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBoolean(int,int)",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getMoney(int,int)",
                "startLine": 33,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 35,
                "lastLine": 37
            }
        ],
        "window": 3
    },
    {
        "content": "try{if(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);moveToCurrentRow();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/first()",
                "startLine": 1,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/afterLast()",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "try{Connection con = AllTests.getConnection();dropTable( con, table1 );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/init()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/init()",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "if( database.isReadOnly() ){throw SmallSQLException.create(Language.DB_READONLY);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/createFile(smallsql.database.SSConnection,smallsql.database.Database)",
                "startLine": 9,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/createFile(smallsql.database.SSConnection,smallsql.database.Database)",
                "startLine": 1,
                "lastLine": 3
            }
        ],
        "window": 3
    },
    {
        "content": "int length = param2.getInt();if(bytes.length <= length) return bytes;byte[] b = new byte[length];",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionLeft/getBytes()",
                "startLine": 3,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRight/getBytes()",
                "startLine": 3,
                "lastLine": 6
            }
        ],
        "window": 3
    },
    {
        "content": "break;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 36,
                "lastLine": 38
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 70,
                "lastLine": 72
            }
        ],
        "window": 3
    },
    {
        "content": "assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );pr.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 88,
                "lastLine": 90
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 76,
                "lastLine": 78
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 67,
                "lastLine": 69
            }
        ],
        "window": 3
    },
    {
        "content": "assertFalse(rs.isFirst());assertTrue(rs.isBeforeFirst());assertFalse(rs.isAfterLast());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 49,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 63,
                "lastLine": 65
            }
        ],
        "window": 3
    },
    {
        "content": "IndexDescriptions indexes = ((Table)tab).indexes;for(int i=0; i<indexes.size(); i++){IndexDescription index = indexes.get(i);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 7,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)",
                "startLine": 8,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 7,
                "lastLine": 9
            }
        ],
        "window": 3
    },
    {
        "content": "String tableName = catalog = nextIdentifier();tableName = nextIdentiferPart(tableName);if(tableName == catalog) catalog = null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createTable()",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createIndex(boolean)",
                "startLine": 4,
                "lastLine": 6
            }
        ],
        "window": 3
    },
    {
        "content": "listEnum.stack--;if(listEnum.stack<0) return -1; // no more entriesresult = listEnum.resultStack[listEnum.stack];",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 29,
                "lastLine": 31
            }
        ],
        "window": 3
    },
    {
        "content": "break;case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 63,
                "lastLine": 65
            },
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 56,
                "lastLine": 58
            }
        ],
        "window": 3
    },
    {
        "content": "}boolean uebertrag = (temp >>> 32) != 0;while(v1 > 0 && uebertrag)",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/sub(int%5B%5D)",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/add(int%5B%5D)",
                "startLine": 12,
                "lastLine": 14
            }
        ],
        "window": 3
    },
    {
        "content": "pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 33,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 25,
                "lastLine": 27
            }
        ],
        "window": 3
    },
    {
        "content": "}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 13,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 13,
                "lastLine": 15
            }
        ],
        "window": 3
    },
    {
        "content": "return 0;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Join/createJoinScrollIndex(smallsql.database.ExpressionArithmetic,smallsql.database.Expressions,smallsql.database.Expressions,int)",
                "startLine": 35,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getScale()",
                "startLine": 16,
                "lastLine": 18
            }
        ],
        "window": 3
    },
    {
        "content": "break;case SQLTokenizer.NCHAR:case SQLTokenizer.CHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 45,
                "lastLine": 47
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 52,
                "lastLine": 54
            }
        ],
        "window": 3
    },
    {
        "content": "return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 23,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 23,
                "lastLine": 25
            }
        ],
        "window": 3
    },
    {
        "content": "signum = 0;value = EMPTY_INTS;}else{",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/MutableNumeric/MutableNumeric(int)",
                "startLine": 2,
                "lastLine": 4
            },
            {
                "locFile": "java+constructor:///smallsql/database/MutableNumeric/MutableNumeric(long)",
                "startLine": 2,
                "lastLine": 4
            }
        ],
        "window": 3
    },
    {
        "content": "assertFalse(rs.isFirst());assertFalse(rs.isBeforeFirst());assertTrue(rs.isAfterLast());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 37,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 56,
                "lastLine": 58
            }
        ],
        "window": 3
    },
    {
        "content": "long time = -System.currentTimeMillis();for (int i=0; i<rowCount; i++){rs.moveToInsertRow();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 11,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertRows(java.sql.Connection)",
                "startLine": 11,
                "lastLine": 13
            }
        ],
        "window": 3
    },
    {
        "content": "}commitPages.clear();transactionTime = System.currentTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSConnection/commit()",
                "startLine": 13,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/SSConnection/rollback()",
                "startLine": 9,
                "lastLine": 11
            }
        ],
        "window": 3
    },
    {
        "content": "}return bytes;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionConvert/getObject()",
                "startLine": 43,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionConvert/getObject()",
                "startLine": 32,
                "lastLine": 35
            }
        ],
        "window": 3
    },
    {
        "content": "}shift -= 16;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/remove(long)",
                "startLine": 57,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/add(long)",
                "startLine": 49,
                "lastLine": 52
            }
        ],
        "window": 4
    },
    {
        "content": "String catalog;String tableName = catalog = nextIdentifier();tableName = nextIdentiferPart(tableName);if(tableName == catalog) catalog = null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createTable()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createIndex(boolean)",
                "startLine": 3,
                "lastLine": 6
            }
        ],
        "window": 4
    },
    {
        "content": "break;}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/CommandInsert/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 55,
                "lastLine": 58
            },
            {
                "locFile": "java+method:///smallsql/database/CommandInsert/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 45,
                "lastLine": 48
            },
            {
                "locFile": "java+constructor:///smallsql/database/DateTime/Details/Details(long)",
                "startLine": 49,
                "lastLine": 52
            }
        ],
        "window": 4
    },
    {
        "content": "}}catch(Exception e){}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getColumns(smallsql.database.SSConnection,java.lang.String,java.lang.String)",
                "startLine": 30,
                "lastLine": 34
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String%5B%5D)",
                "startLine": 36,
                "lastLine": 40
            }
        ],
        "window": 4
    },
    {
        "content": "selCmd.setMaxRows(maxRows);}catch(NumberFormatException e){throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/singleSelect()",
                "startLine": 16,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/limit(smallsql.database.CommandSelect)",
                "startLine": 4,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "}throw SmallSQLException.createFromException(e);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 36,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 24,
                "lastLine": 27
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:return readBinary();case SQLTokenizer.TINYINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBytes(int,int)",
                "startLine": 8,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 11,
                "lastLine": 14
            }
        ],
        "window": 4
    },
    {
        "content": "}}}}",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/MemoryResult/MemoryResult(java.lang.Object%5B%5D%5B%5D,int)",
                "startLine": 22,
                "lastLine": 25
            },
            {
                "locFile": "java+constructor:///smallsql/database/DateTime/Details/Details(long)",
                "startLine": 50,
                "lastLine": 53
            },
            {
                "locFile": "java+method:///smallsql/database/Database/closeConnection(smallsql.database.SSConnection)",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/SSConnection/rollbackFile(java.nio.channels.FileChannel)",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 68,
                "lastLine": 71
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionInSelect/loadInList()",
                "startLine": 11,
                "lastLine": 14
            }
        ],
        "window": 4
    },
    {
        "content": "}}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)",
                "startLine": 119,
                "lastLine": 122
            },
            {
                "locFile": "java+method:///smallsql/database/SSDriver/parse(java.lang.String,java.util.Properties)",
                "startLine": 33,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/Database/closeConnection(smallsql.database.SSConnection)",
                "startLine": 16,
                "lastLine": 19
            }
        ],
        "window": 4
    },
    {
        "content": "assertFalse( rs.isBeforeFirst() );assertTrue( rs.isFirst() );assertTrue( rs.isLast() );assertFalse( rs.isAfterLast() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 26,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 14,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 38,
                "lastLine": 41
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 44,
                "lastLine": 47
            }
        ],
        "window": 4
    },
    {
        "content": "}default: throw new Error();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getLong()",
                "startLine": 29,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getInt()",
                "startLine": 32,
                "lastLine": 35
            }
        ],
        "window": 4
    },
    {
        "content": "if(value.length == 0 || signum == 0){return 0;}else{if (value.length == 1 && (value[0] > 0)){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/floatValue()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/longValue()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/doubleValue()",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "int octet = (int)(value >> shift) & 0xFFFF;while(true){int nextEntry = getUnsignedShort();if(nextEntry == octet){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/remove(long)",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/add(long)",
                "startLine": 25,
                "lastLine": 28
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBoolean(int,int)",
                "startLine": 39,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 39,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 40,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/convertExpressionIfNeeded(smallsql.database.Expression,smallsql.database.Expression)",
                "startLine": 11,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 39,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBytes(int,int)",
                "startLine": 46,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getMoney(int,int)",
                "startLine": 37,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 39,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 39,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 114,
                "lastLine": 117
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.LONGNVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 46,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 40,
                "lastLine": 43
            }
        ],
        "window": 4
    },
    {
        "content": "continue;}elsereturn getReturnValue(status.nodeValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 30,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 61,
                "lastLine": 64
            }
        ],
        "window": 4
    },
    {
        "content": "if(fullReturnCounter >= fullRowCount){return false;}right.next();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 85,
                "lastLine": 88
            }
        ],
        "window": 4
    },
    {
        "content": "final void beforeFirst() throws Exception {rowSource.beforeFirst();row = 0;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Where/beforeFirst()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/Distinct/beforeFirst()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 25,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 22,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 29,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollback()",
                "startLine": 22,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertAndUpdate()",
                "startLine": 40,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCreateTable()",
                "startLine": 28,
                "lastLine": 31
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 25,
                "lastLine": 28
            }
        ],
        "window": 4
    },
    {
        "content": "value = Integer.parseInt(token.getName(sql) );}catch(Exception e){throw createSyntaxError(token, MISSING_NUMBERVALUE );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/datatype(boolean)",
                "startLine": 92,
                "lastLine": 95
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/datatype(boolean)",
                "startLine": 102,
                "lastLine": 105
            }
        ],
        "window": 4
    },
    {
        "content": "byte[] bytes = param1.getBytes();int length = param2.getInt();if(bytes.length <= length) return bytes;byte[] b = new byte[length];",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionLeft/getBytes()",
                "startLine": 2,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRight/getBytes()",
                "startLine": 2,
                "lastLine": 6
            }
        ],
        "window": 4
    },
    {
        "content": "offset = getPointer();shift -= 16;listEnum.stack++;listEnum.resultStack[listEnum.stack] = result;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 27,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 21,
                "lastLine": 24
            }
        ],
        "window": 4
    },
    {
        "content": "while(lock != null){if(lock == storePage){if(lock == prev){if(lock.nextLock == null){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 14,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 41,
                "lastLine": 45
            }
        ],
        "window": 4
    },
    {
        "content": "Object[] params = {SQLTokenizer.getKeyWord(dataType),SQLTokenizer.getKeyWord(getFunction())};",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunction/createUnspportedDataType(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunction/createUnspportedConversion(int)",
                "startLine": 5,
                "lastLine": 8
            }
        ],
        "window": 4
    },
    {
        "content": "buf.append( SHORT_MONTHS[ details.month ]);buf.append(' ');formatNumber( details.year, 4, buf);buf.append(' ');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 189,
                "lastLine": 192
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 260,
                "lastLine": 263
            }
        ],
        "window": 4
    },
    {
        "content": "factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 12,
                "lastLine": 15
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:case SQLTokenizer.BIGINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getMoney(java.lang.Object,int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getBoolean(java.lang.Object,int)",
                "startLine": 6,
                "lastLine": 9
            }
        ],
        "window": 4
    },
    {
        "content": "return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 43,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 44,
                "lastLine": 47
            }
        ],
        "window": 4
    },
    {
        "content": "try{MutableNumeric obj = getValue(columnIndex).getNumeric();wasNull = obj == null;if(wasNull) return null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int,int)",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.TIMESTAMP:case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 52,
                "lastLine": 55
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getMoney(int,int)",
                "startLine": 49,
                "lastLine": 52
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 51,
                "lastLine": 54
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(Exception e){throw SmallSQLException.createFromException(e);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/absolute(int)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/beforeFirst()",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/previous()",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getRow()",
                "startLine": 3,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/addBatch()",
                "startLine": 11,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/first()",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/StorePage/commit()",
                "startLine": 18,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/last()",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/afterLast()",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/isAfterLast()",
                "startLine": 3,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/relative(int)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/next()",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+constructor:///smallsql/database/Database/Database(java.lang.String,java.io.File,boolean)",
                "startLine": 19,
                "lastLine": 22
            },
            {
                "locFile": "java+constructor:///smallsql/database/ViewResult/ViewResult(smallsql.database.SSConnection,smallsql.database.CommandSelect)",
                "startLine": 10,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/isLast()",
                "startLine": 3,
                "lastLine": 6
            }
        ],
        "window": 4
    },
    {
        "content": "boolean last() throws Exception{afterLast();return previous();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Scrollable/last()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/last()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "final float getFloat() throws Exception {if(isNull()) return 0;return Float.parseFloat(getString().trim());}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getFloat()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnString/getFloat()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "st.close();}catch(Throwable e){}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/tearDown()",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/tearDown()",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/tearDown()",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/tearDown()",
                "startLine": 5,
                "lastLine": 9
            }
        ],
        "window": 4
    },
    {
        "content": "try{Expression expr = getValue(columnIndex);wasNull = expr.isNull();if(wasNull) return null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTime(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getURL(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTimestamp(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDate(int)",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "}finally{dropTable(con, \"DuplicatedColumn\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnAlter()",
                "startLine": 11,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnInsert()",
                "startLine": 11,
                "lastLine": 14
            }
        ],
        "window": 4
    },
    {
        "content": "formatNumber( details.month+1, 2, buf);buf.append('-');formatNumber( details.day, 2, buf);buf.append('-');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 148,
                "lastLine": 151
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 155,
                "lastLine": 158
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 33,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 49,
                "lastLine": 52
            }
        ],
        "window": 4
    },
    {
        "content": "assertTrue( \"No row\", rs.next() );assertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") );assertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") );assertEquals( \"5\", rs.getObject(\"COLUMN_Def\") );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetColumn()",
                "startLine": 11,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetColumn()",
                "startLine": 20,
                "lastLine": 23
            }
        ],
        "window": 4
    },
    {
        "content": "}rs.close();assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_char()",
                "startLine": 22,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 22,
                "lastLine": 25
            }
        ],
        "window": 4
    },
    {
        "content": "assertRowCount( 1, \"Select * from transactions\");con.setAutoCommit(false);con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 10,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 10,
                "lastLine": 14
            }
        ],
        "window": 4
    },
    {
        "content": "count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_functionAscDesc()",
                "startLine": 27,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_double()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 21,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_function()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_nvarchar()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_real()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_GroupBy()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_bigint()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_bigint_withDoublicateValues()",
                "startLine": 21,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_Join()",
                "startLine": 17,
                "lastLine": 20
            }
        ],
        "window": 4
    },
    {
        "content": "}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 46,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 48,
                "lastLine": 51
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.SMALLDATETIME:return new DateTime( getLong(), dataType );case SQLTokenizer.UNIQUEIDENTIFIER:return getBytes();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 47,
                "lastLine": 50
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 39,
                "lastLine": 42
            }
        ],
        "window": 4
    },
    {
        "content": "assertTrue( rs.next() );assertNull(rs.getObject(\"i\"));assertTrue( rs.next() );oldValue = Math.abs( rs.getInt(\"i\") );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_function()",
                "startLine": 9,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_functionAscDesc()",
                "startLine": 10,
                "lastLine": 14
            }
        ],
        "window": 4
    },
    {
        "content": "buf.append( digits[ (bytes[i]     ) & 0x0F ] );}return buf.toString();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/bytes2hex(byte%5B%5D)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/Utils/bytes2hex(byte%5B%5D)",
                "startLine": 4,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "node.fileOffset = offset;node.load( store );return node;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/FileIndexNode/loadRootNode(boolean,java.nio.channels.FileChannel,long)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/FileIndexNode/loadRef(long)",
                "startLine": 6,
                "lastLine": 9
            }
        ],
        "window": 4
    },
    {
        "content": "puffer[ offset++ ] = (byte)(value >> 16);puffer[ offset++ ] = (byte)(value >> 8);puffer[ offset++ ] = (byte)(value);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MemoryStream/writeInt(int)",
                "startLine": 3,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/MemoryStream/writeLong(long)",
                "startLine": 7,
                "lastLine": 10
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.BINARY:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.UNIQUEIDENTIFIER:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 51,
                "lastLine": 54
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 58,
                "lastLine": 61
            }
        ],
        "window": 4
    },
    {
        "content": "final void nullRow() {rowSource.nullRow();row = 0;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Where/nullRow()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/Distinct/nullRow()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "oldValue = rs.getBoolean(\"b\");assertFalse(rs.wasNull());count++;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_boolean()",
                "startLine": 26,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_boolean()",
                "startLine": 21,
                "lastLine": 24
            }
        ],
        "window": 4
    },
    {
        "content": "assertTrue( rs.isBeforeFirst() );assertFalse( rs.isFirst() );assertFalse( rs.isLast() );assertFalse( rs.isAfterLast() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 32,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOther/testNoFromResult()",
                "startLine": 8,
                "lastLine": 11
            }
        ],
        "window": 4
    },
    {
        "content": "fail(\"NO_GENERATED_KEYS\");}catch(SQLException ex){assertSQLException(\"01000\", 0, ex);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 8,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 8,
                "lastLine": 11
            }
        ],
        "window": 4
    },
    {
        "content": "case LESSER:    return comp <  0;case LES_EQU:   return comp <= 0;case UNEQUALS:  return comp != 0;case BETWEEN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 132,
                "lastLine": 135
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 179,
                "lastLine": 182
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 157,
                "lastLine": 160
            }
        ],
        "window": 4
    },
    {
        "content": "case NOT:case LIKE:case ISNULL:case ISNOTNULL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/isNull()",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDataType()",
                "startLine": 15,
                "lastLine": 18
            }
        ],
        "window": 4
    },
    {
        "content": "final byte[] getBytes() throws Exception{if(isNull()) return null;return getString().getBytes();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionLCase/getBytes()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionUCase/getBytes()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );pr.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 87,
                "lastLine": 90
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 75,
                "lastLine": 78
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 66,
                "lastLine": 69
            }
        ],
        "window": 4
    },
    {
        "content": "final MutableNumeric getNumeric() throws Exception {if(isNull()) return null;return new MutableNumeric(getString().trim());}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getNumeric()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnString/getNumeric()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "buf.append('/');formatNumber( details.month+1, 2, buf);buf.append('/');formatNumber( details.year % 100, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 52,
                "lastLine": 55
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 275,
                "lastLine": 278
            }
        ],
        "window": 4
    },
    {
        "content": "oldValue = rs.getString(\"v\");assertNull(oldValue);assertTrue( rs.next() );oldValue = rs.getString(\"v\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 16,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 12,
                "lastLine": 16
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 165,
                "lastLine": 168
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 146,
                "lastLine": 149
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/isBinaryDataType(int)",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 21,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 21,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_desc()",
                "startLine": 21,
                "lastLine": 24
            }
        ],
        "window": 4
    },
    {
        "content": "assertFalse(rs.isLast());assertFalse(rs.isFirst());assertTrue(rs.isBeforeFirst());assertFalse(rs.isAfterLast());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 48,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 62,
                "lastLine": 65
            }
        ],
        "window": 4
    },
    {
        "content": "return buffer;}return bytes;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionConvert/getObject()",
                "startLine": 42,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionConvert/getObject()",
                "startLine": 31,
                "lastLine": 35
            }
        ],
        "window": 4
    },
    {
        "content": "time += System.currentTimeMillis();rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();int count = rs.getInt(1);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 16,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertRows(java.sql.Connection)",
                "startLine": 34,
                "lastLine": 37
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.CHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.LONGVARCHAR:String str = expr.getString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 75,
                "lastLine": 78
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 132,
                "lastLine": 135
            }
        ],
        "window": 4
    },
    {
        "content": "pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 31,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 23,
                "lastLine": 27
            }
        ],
        "window": 4
    },
    {
        "content": "String newValue = rs.getString(\"c2\");assertTrue( oldValue.compareTo( newValue ) < 0 );oldValue = newValue;count++;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test2Columns()",
                "startLine": 37,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test2Columns()",
                "startLine": 18,
                "lastLine": 21
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(Throwable ex){throwable = ex;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()/$anonymous1/run()",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()/$anonymous1/run()",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentRead()/$anonymous1/run()",
                "startLine": 3,
                "lastLine": 6
            }
        ],
        "window": 4
    },
    {
        "content": "}}return true;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DataSource/isExpressionsFromThisRowSource(smallsql.database.Expressions)",
                "startLine": 8,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/relative(int)",
                "startLine": 13,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/absolute(int)",
                "startLine": 15,
                "lastLine": 18
            }
        ],
        "window": 4
    },
    {
        "content": "}return node.addRoot();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)",
                "startLine": 26,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 29,
                "lastLine": 32
            }
        ],
        "window": 4
    },
    {
        "content": "for(int i = 0; i < 200; i++){Thread thread = new Thread(new Runnable(){public void run(){try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 16,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentRead()",
                "startLine": 24,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 16,
                "lastLine": 20
            }
        ],
        "window": 4
    },
    {
        "content": "for(; k>= 0; k--) if(tmp[k] != 0) break;k++;byte[] tmp2 = new byte[k];System.arraycopy( tmp, 0, tmp2, 0, k);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertEqualsObject(java.lang.String,java.lang.Object,java.lang.Object,boolean)",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertEqualsObject(java.lang.String,java.lang.Object,java.lang.Object,boolean)",
                "startLine": 20,
                "lastLine": 23
            }
        ],
        "window": 4
    },
    {
        "content": "con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withRightWhere()",
                "startLine": 24,
                "lastLine": 27
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 28,
                "lastLine": 31
            }
        ],
        "window": 4
    },
    {
        "content": "con.setTransactionIsolation(isolation);con.setAutoCommit(true);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_READ_COMMITTED()",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_REPEATABLE_READ()",
                "startLine": 17,
                "lastLine": 20
            }
        ],
        "window": 4
    },
    {
        "content": "page.freeLock();}commitPages.clear();transactionTime = System.currentTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSConnection/commit()",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/SSConnection/rollback()",
                "startLine": 8,
                "lastLine": 11
            }
        ],
        "window": 4
    },
    {
        "content": "final int getInt() throws Exception {if(isNull()) return 0;return Integer.parseInt(getString().trim());}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getInt()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnString/getInt()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "assertTrue( oldValue.compareTo( newValue ) < 0 );oldValue = newValue;count++;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 19,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test2Columns()",
                "startLine": 19,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 25,
                "lastLine": 28
            }
        ],
        "window": 4
    },
    {
        "content": "formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 207,
                "lastLine": 210
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 284,
                "lastLine": 287
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(SQLException e){assertSQLException(\"01000\", 0, e);}try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 13,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 41,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 69,
                "lastLine": 73
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 55,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 27,
                "lastLine": 31
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 34,
                "lastLine": 38
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 20,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 62,
                "lastLine": 66
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 48,
                "lastLine": 52
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(SQLException e){assertSQLException(\"01000\", 0, e);}}finally{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testAmbiguousColumn()",
                "startLine": 9,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 76,
                "lastLine": 79
            }
        ],
        "window": 4
    },
    {
        "content": "switch(type){case Join.LEFT_JOIN:case Join.FULL_JOIN:isOuterValid = false;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 54,
                "lastLine": 57
            }
        ],
        "window": 4
    },
    {
        "content": "| ((puffer[ offset++ ] & 0xFF) << 16)| ((puffer[ offset++ ] & 0xFF) << 8)|  (puffer[ offset++ ] & 0xFF);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MemoryStream/readLong()",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/MemoryStream/readInt()",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );pr.setFloat (  4, (float)1234.56789 );pr.setFloat (  5 , (float)9876.54321 );pr.setBytes (  6, largeByteArray );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 13,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 17,
                "lastLine": 20
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.INT:case SQLTokenizer.BIGINT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 8,
                "lastLine": 11
            }
        ],
        "window": 4
    },
    {
        "content": "break;default: throw new Error();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 157,
                "lastLine": 160
            },
            {
                "locFile": "java+constructor:///smallsql/database/ExpressionValue/ExpressionValue(int)",
                "startLine": 19,
                "lastLine": 22
            }
        ],
        "window": 4
    },
    {
        "content": "throw new Error();}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionDefList(smallsql.database.Command,smallsql.database.Expressions,smallsql.database.Strings)",
                "startLine": 22,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionParenthesisList(smallsql.database.Command)",
                "startLine": 26,
                "lastLine": 29
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 22,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 22,
                "lastLine": 25
            }
        ],
        "window": 4
    },
    {
        "content": "rowSource.setRowPosition( rowList.get(rowIdx) );return true;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Scrollable/previous()",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/Scrollable/absolute(int)",
                "startLine": 10,
                "lastLine": 13
            }
        ],
        "window": 4
    },
    {
        "content": "Connection conn = AllTests.createConnection(\"?locale=it\", null);Statement stat = conn.createStatement();try {try {",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testSyntaxErrors()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testLocalizedErrors()",
                "startLine": 1,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "return false;}boolean isNext = next();previous();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SortedResult/isLast()",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/Scrollable/isLast()",
                "startLine": 4,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "token = nextToken(MISSING_INTERVALS);nextToken(MISSING_COMMA);expr = expression( cmd, 0);nextToken(MISSING_COMMA);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/function(smallsql.database.Command,smallsql.database.SQLToken,boolean)",
                "startLine": 35,
                "lastLine": 38
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/function(smallsql.database.Command,smallsql.database.SQLToken,boolean)",
                "startLine": 43,
                "lastLine": 46
            }
        ],
        "window": 4
    },
    {
        "content": "return readDate();case SQLTokenizer.SMALLDATETIME:return readSmallDateTime();default:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 56,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 56,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 56,
                "lastLine": 59
            }
        ],
        "window": 4
    },
    {
        "content": "final boolean getBoolean() throws Exception {if(isNull()) return false;return Utils.string2boolean(getString().trim());}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getBoolean()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnString/getBoolean()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "break;case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:MutableNumeric newValue = expr.getNumeric();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 39,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 138,
                "lastLine": 141
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 81,
                "lastLine": 84
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(SQLException ex){assertSQLException(\"HY010\", 0, ex);}try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedStatement()",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 8,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 14,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedStatement()",
                "startLine": 13,
                "lastLine": 16
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(SQLException ex){assertSQLException(\"HY010\", 0, ex);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 26,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedStatement()",
                "startLine": 19,
                "lastLine": 22
            }
        ],
        "window": 4
    },
    {
        "content": "switch(dataType){case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 116,
                "lastLine": 119
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 24,
                "lastLine": 27
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/initValue(smallsql.database.Expression)",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 59,
                "lastLine": 62
            }
        ],
        "window": 4
    },
    {
        "content": "switch(dataType){case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:case SQLTokenizer.LONGVARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/isBinaryDataType(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getBytes(java.lang.Object,int)",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 39,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 37,
                "lastLine": 40
            }
        ],
        "window": 4
    },
    {
        "content": "int getScale(){switch(dataType){case SQLTokenizer.DECIMAL:case SQLTokenizer.NUMERIC:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Column/getScale()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getScale()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "int mid = start + (end - start)/2;char nodeDigit = nodes[mid].digit;if(nodeDigit == digit) return mid;if(nodeDigit < digit){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexNode/findNodeInsertPos(char,int,int)",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/database/IndexNode/findNodePos(char,int,int)",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "return Utils.bytes2unique( page, this.offset);default: throw new Error();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 61,
                "lastLine": 64
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 60,
                "lastLine": 63
            }
        ],
        "window": 4
    },
    {
        "content": "((page[ offset++ ] & 0xFF) << 16) |((page[ offset++ ] & 0xFF) << 8) |((page[ offset++ ] & 0xFF));}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/readInt()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/readLong()",
                "startLine": 7,
                "lastLine": 10
            }
        ],
        "window": 4
    },
    {
        "content": "break;case SQLTokenizer.UNIQUEIDENTIFIER:offset += 16;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 52,
                "lastLine": 55
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 54,
                "lastLine": 57
            }
        ],
        "window": 4
    },
    {
        "content": "}}IndexNode node = status.nodes[idx];nodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 46,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 75,
                "lastLine": 78
            }
        ],
        "window": 4
    },
    {
        "content": "if(!(tab instanceof Table)) continue;IndexDescriptions indexes = ((Table)tab).indexes;for(int i=0; i<indexes.size(); i++){IndexDescription index = indexes.get(i);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 6,
                "lastLine": 9
            }
        ],
        "window": 4
    },
    {
        "content": "Connection con1 = AllTests.getConnection();Connection con2 = AllTests.createConnection();try{con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadSerialized()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadWriteLock()",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "fail(\"Alter Table should not work on a table with a lock.\");} catch (SQLException ex) {assertSQLException( \"01000\", 0, ex );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_READ_COMMITTED()",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_REPEATABLE_READ()",
                "startLine": 11,
                "lastLine": 14
            }
        ],
        "window": 4
    },
    {
        "content": "page = (IndexNode)page.getValue();}throw new Error();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expressions,boolean,java.util.ArrayList)",
                "startLine": 21,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expression%5B%5D,boolean,java.util.ArrayList)",
                "startLine": 21,
                "lastLine": 24
            }
        ],
        "window": 4
    },
    {
        "content": "byte[] b = new byte[length];System.arraycopy(bytes, 0, b, 0, length);return b;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRTrim/getBytes()",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionLeft/getBytes()",
                "startLine": 6,
                "lastLine": 9
            }
        ],
        "window": 4
    },
    {
        "content": "return (obj.equals(Boolean.TRUE)) ? 1 : 0;case SQLTokenizer.INT:case SQLTokenizer.BIGINT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)",
                "startLine": 4,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "Object getObject() throws Exception {if(isNull()) return null;return Utils.getInteger(getInt());}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getObject()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnInt/getObject()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getInt()",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getLong()",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 17,
                "lastLine": 20
            }
        ],
        "window": 4
    },
    {
        "content": "init();Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs = null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptions/runTest()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test2Columns()",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "init();Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testVarcharEmpty()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testVarbinaryEmpty()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testGroupBy()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_boolean()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/testTest()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_double()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_real()",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "try{Statement st = con.createStatement();st.execute(\"Create Table DuplicatedColumn(col INT)\");try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnInsert()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnAlter()",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "signum = 1;}}}",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/MutableNumeric/MutableNumeric(int)",
                "startLine": 11,
                "lastLine": 14
            },
            {
                "locFile": "java+constructor:///smallsql/database/MutableNumeric/MutableNumeric(long)",
                "startLine": 13,
                "lastLine": 16
            }
        ],
        "window": 4
    },
    {
        "content": "right.nullRow();return true;}}else fullRightRowCounter++;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 22,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 58,
                "lastLine": 61
            }
        ],
        "window": 4
    },
    {
        "content": "pr.setByte  (  16, (byte)28 );pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 30,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 26,
                "lastLine": 29
            }
        ],
        "window": 4
    },
    {
        "content": "isOuterValid = false;right.nullRow();return true;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 42,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 57,
                "lastLine": 60
            }
        ],
        "window": 4
    },
    {
        "content": "page[ offset++ ] = (byte)(value >> 16);page[ offset++ ] = (byte)(value >> 8);page[ offset++ ] = (byte)(value);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeInt(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeLong(long)",
                "startLine": 9,
                "lastLine": 12
            }
        ],
        "window": 4
    },
    {
        "content": "int offset = token.offset + token.length;token = nextToken();if(token != null) offset = token.offset;previousToken();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/addColumn(smallsql.database.SQLToken,smallsql.database.CommandTable)",
                "startLine": 26,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionDefList(smallsql.database.Command,smallsql.database.Expressions,smallsql.database.Strings)",
                "startLine": 5,
                "lastLine": 8
            }
        ],
        "window": 4
    },
    {
        "content": "Statement st = con.createStatement();ResultSet rs;rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");assertFalse( \"To many rows\", rs.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/runTest()",
                "startLine": 2,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 2,
                "lastLine": 6
            }
        ],
        "window": 4
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;int oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_functionAscDesc()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_function()",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;Integer oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_desc()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;String oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_nvarchar()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_Join()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_GroupBy()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_char()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;Long oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_bigint()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_bigint_withDoublicateValues()",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "stat.executeQuery(sql);fail(failureMessage);}catch (SQLException e) {",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTokenizer/failureTest(java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTokenizer/failureTest(java.lang.String,java.lang.String)",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "setValue( big.unscaledValue().toByteArray() );scale = big.scale();signum = big.signum();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/div(smallsql.database.MutableNumeric)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/mul(smallsql.database.MutableNumeric)",
                "startLine": 3,
                "lastLine": 6
            }
        ],
        "window": 4
    },
    {
        "content": "return node.addRoot(digit);}node = node.addNode(digit);if(node.isEmpty()){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 15,
                "lastLine": 18
            }
        ],
        "window": 4
    },
    {
        "content": "formatNumber( details.second, 2, buf);buf.append('.');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 237,
                "lastLine": 240
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 253,
                "lastLine": 256
            }
        ],
        "window": 4
    },
    {
        "content": "if(readBoolean()) return null;switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 6,
                "lastLine": 9
            }
        ],
        "window": 4
    },
    {
        "content": "buf.append(' ');formatNumber( details.day, 2, buf);buf.append(',');buf.append(' ');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 108,
                "lastLine": 111
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 116,
                "lastLine": 119
            }
        ],
        "window": 4
    },
    {
        "content": "formatNumber( details.day, 2, buf);buf.append('.');formatNumber( details.month+1, 2, buf);buf.append('.');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 65,
                "lastLine": 68
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 72,
                "lastLine": 75
            }
        ],
        "window": 4
    },
    {
        "content": "expr.setNameAfterTableAlias( nextIdentifier() );}else{previousToken();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)",
                "startLine": 112,
                "lastLine": 115
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)",
                "startLine": 19,
                "lastLine": 22
            }
        ],
        "window": 4
    },
    {
        "content": "assertNotNull(\"RETURN_GENERATED_KEYS\", rs);assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));assertRowCount(1,rs);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 19,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 42,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 27,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 40,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 27,
                "lastLine": 30
            }
        ],
        "window": 4
    },
    {
        "content": "count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 25,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 25,
                "lastLine": 28
            }
        ],
        "window": 4
    },
    {
        "content": "buffer.putInt(TABLE_VIEW_VERSION);buffer.position(0);raFile.write(buffer);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/View/writeMagic(java.nio.channels.FileChannel)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/Table/writeMagic(java.nio.channels.FileChannel)",
                "startLine": 4,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "if(failed != null)throw failed;return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/executeBatch()",
                "startLine": 22,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SSStatement/executeBatch()",
                "startLine": 18,
                "lastLine": 21
            }
        ],
        "window": 4
    },
    {
        "content": "con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");assertRowCount( 1, \"Select * from Scrollable\");assertRowCount( 0, \"Select * from Scrollable Where 1=0\");Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhere()",
                "startLine": 6,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhere()",
                "startLine": 6,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testLastWithWhere()",
                "startLine": 6,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testNextWithWhere()",
                "startLine": 6,
                "lastLine": 10
            }
        ],
        "window": 4
    },
    {
        "content": "formatNumber( details.month+1, 2, buf);buf.append('.');formatNumber( details.day, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 39,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 46,
                "lastLine": 49
            }
        ],
        "window": 4
    },
    {
        "content": "}finally{if(con.getAutoCommit()) con.commit();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Command/execute(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/deleteRow(smallsql.database.SSConnection)",
                "startLine": 11,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/insertRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 37,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/updateRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 36,
                "lastLine": 39
            }
        ],
        "window": 4
    },
    {
        "content": "break;default:throw new Error();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/setTransaction()",
                "startLine": 14,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 66,
                "lastLine": 69
            }
        ],
        "window": 4
    },
    {
        "content": "rs.next();count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 18,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 19,
                "lastLine": 22
            }
        ],
        "window": 4
    },
    {
        "content": "return;}}st1.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 23,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 24,
                "lastLine": 27
            }
        ],
        "window": 4
    },
    {
        "content": "return;}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/correctPointers(int,int,int,int)",
                "startLine": 33,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/from(smallsql.database.CommandSelect)",
                "startLine": 19,
                "lastLine": 22
            }
        ],
        "window": 4
    },
    {
        "content": "buf.append(':');formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 143,
                "lastLine": 146
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 269,
                "lastLine": 272
            }
        ],
        "window": 4
    },
    {
        "content": "con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");assertRowCount( 1, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollback()",
                "startLine": 7,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 7,
                "lastLine": 11
            }
        ],
        "window": 4
    },
    {
        "content": "if (idx >= size)throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);return data[idx];}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Columns/get(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/ForeignKeys/get(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/Strings/get(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescriptions/get(int)",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "wasWhiteSpace = false;break;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)",
                "startLine": 192,
                "lastLine": 195
            },
            {
                "locFile": "java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)",
                "startLine": 176,
                "lastLine": 179
            }
        ],
        "window": 4
    },
    {
        "content": "}System.out.println();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/printRS(java.sql.ResultSet)",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/tools/CommandLine/printRS(java.sql.ResultSet)",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/junit/AllTests/printRS(java.sql.ResultSet)",
                "startLine": 4,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "if(equals(node.getRemainderValue(), key, i)){return node;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,long,int,java.util.ArrayList)",
                "startLine": 8,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,char%5B%5D,java.util.ArrayList)",
                "startLine": 15,
                "lastLine": 18
            }
        ],
        "window": 4
    },
    {
        "content": "formatNumber( details.month+1, 2, buf);buf.append('/');formatNumber( details.day, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 171,
                "lastLine": 174
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 164,
                "lastLine": 167
            }
        ],
        "window": 4
    },
    {
        "content": "formatNumber( details.month+1, 2, buf);buf.append('/');formatNumber( details.day, 2, buf);buf.append('/');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 23,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 30,
                "lastLine": 33
            }
        ],
        "window": 4
    },
    {
        "content": "}st.close();verify(firstValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/testMoney2()",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/testMoney1()",
                "startLine": 6,
                "lastLine": 9
            }
        ],
        "window": 4
    },
    {
        "content": "int dataType = getDataType();switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getNumeric()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getMoney()",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "try{MutableNumeric obj = getValue(i).getNumeric();wasNull = obj == null;if(wasNull) return null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int,int)",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.TINYINT:offset++;break;case SQLTokenizer.SMALLINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 19,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 9,
                "lastLine": 12
            }
        ],
        "window": 4
    },
    {
        "content": "assertNotSame(\"getObject\", value, rs.getObject(\"c\"));assertTrue(\"start\", rs.first());rs.updateObject(\"c\", value, Types.VARCHAR );assertEquals(\"getObject\", value, rs.getObject(\"c\"));",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testUpdateAndScroll()",
                "startLine": 32,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testUpdateAndScroll()",
                "startLine": 39,
                "lastLine": 44
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testUpdateAndScroll()",
                "startLine": 18,
                "lastLine": 23
            }
        ],
        "window": 4
    },
    {
        "content": "int idx = internalExpressions.indexOf(expr);if(idx >= 0) return idx;internalExpressions.add(expr);return internalExpressions.size()-1;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/GroupResult/addInternalExpressionFromSelect(smallsql.database.Expression)",
                "startLine": 14,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/database/GroupResult/addInternalExpressionFromGroupBy(smallsql.database.Expression)",
                "startLine": 11,
                "lastLine": 14
            }
        ],
        "window": 4
    },
    {
        "content": "try{rs.getString(\"v\");fail(\"SQLException 'No current row' should be throw\");}catch(SQLException ex){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testLastWithWhereAssert(java.sql.ResultSet)",
                "startLine": 3,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testNextWithWhereAssert(java.sql.ResultSet)",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "raFile.read(buffer);buffer.position(0);int magic   = buffer.getInt();int version = buffer.getInt();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 7,
                "lastLine": 10
            }
        ],
        "window": 4
    },
    {
        "content": "firstNode = true;break;}if((nextEntry == 0 && !firstNode) || nextEntry > octet){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/remove(long)",
                "startLine": 48,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/add(long)",
                "startLine": 31,
                "lastLine": 34
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:return ((DateTime)obj).getTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)",
                "startLine": 11,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)",
                "startLine": 13,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 14,
                "lastLine": 17
            }
        ],
        "window": 4
    },
    {
        "content": "con1.setAutoCommit(false);con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");assertTrue( rs2.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadCommited()",
                "startLine": 8,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadUncommited()",
                "startLine": 8,
                "lastLine": 12
            }
        ],
        "window": 4
    },
    {
        "content": "tearDown();try{Connection con = AllTests.getConnection();Statement st = con.createStatement();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/setUp()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/setUp()",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "value.small     = small;value.large     = large;return value;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/a(java.lang.String,java.lang.Object,java.lang.Object)",
                "startLine": 3,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/a(java.lang.String,java.lang.Object,java.lang.Object)",
                "startLine": 3,
                "lastLine": 6
            }
        ],
        "window": 4
    },
    {
        "content": "return true;}return false;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/supportsResultSetType(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/supportsTransactionIsolationLevel(int)",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/isSignedDataType(int)",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/TableResult/init(smallsql.database.SSConnection)",
                "startLine": 16,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/isKeyword(smallsql.database.SQLToken)",
                "startLine": 16,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/isBinaryDataType(int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/isCurrency(int)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/TableViewResult/init(smallsql.database.SSConnection)",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ViewResult/init(smallsql.database.SSConnection)",
                "startLine": 10,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/database/TableResult/rowDeleted()",
                "startLine": 9,
                "lastLine": 12
            }
        ],
        "window": 4
    },
    {
        "content": "assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 27,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 49,
                "lastLine": 52
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 34,
                "lastLine": 37
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(Exception e){}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String%5B%5D)",
                "startLine": 37,
                "lastLine": 41
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionInSelect/loadInList()",
                "startLine": 9,
                "lastLine": 13
            }
        ],
        "window": 4
    },
    {
        "content": "try{Statement st = con.createStatement();st.execute(\"DELETE FROM \" + tableName);st.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/deleteTestTable(java.sql.Connection)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertRows(java.sql.Connection)",
                "startLine": 45,
                "lastLine": 49
            }
        ],
        "window": 4
    },
    {
        "content": "assertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );oldValue = newValue;count++;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_char()",
                "startLine": 19,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 19,
                "lastLine": 22
            }
        ],
        "window": 4
    },
    {
        "content": "assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");ResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery(\"Select * from transactions Where 1=0\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 3,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 11,
                "lastLine": 16
            }
        ],
        "window": 4
    },
    {
        "content": "}elseif(num.scale > scale){setScale(num.scale);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/sub(smallsql.database.MutableNumeric)",
                "startLine": 7,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/add(smallsql.database.MutableNumeric)",
                "startLine": 7,
                "lastLine": 10
            }
        ],
        "window": 4
    },
    {
        "content": "value *= factor;}return value;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 20,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 20,
                "lastLine": 23
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDate(int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDate(int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBytes(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getFloat(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTime(int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTimestamp(int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTime(int,java.util.Calendar)",
                "startLine": 9,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBoolean(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getString(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getLong(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int,int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getObject(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBoolean(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDouble(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getURL(int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getFloat(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getInt(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTimestamp(int,java.util.Calendar)",
                "startLine": 9,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBytes(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getLong(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getString(int)",
                "startLine": 13,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getObject(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTimestamp(int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTime(int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDate(int,java.util.Calendar)",
                "startLine": 9,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDouble(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getInt(int)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int,int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int)",
                "startLine": 6,
                "lastLine": 9
            }
        ],
        "window": 4
    },
    {
        "content": "return false;}}}else{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SortedResult/absolute(int)",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/relative(int)",
                "startLine": 5,
                "lastLine": 8
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(Throwable e){e.printStackTrace();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/init()",
                "startLine": 57,
                "lastLine": 60
            },
            {
                "locFile": "java+initializer:///smallsql/database/SSDriver$initializer1",
                "startLine": 6,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/setUp()",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/setUp()",
                "startLine": 8,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/init()",
                "startLine": 27,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 37,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/junit/AllTests/main(java.lang.String%5B%5D)",
                "startLine": 4,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "shift += 16;listEnum.stack--;if(listEnum.stack<0) return -1; // no more entriesresult = listEnum.resultStack[listEnum.stack];",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 34,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 28,
                "lastLine": 31
            }
        ],
        "window": 4
    },
    {
        "content": "oldValue = rs.getString(\"v\");int count = 1;while(rs.next()){String newValue = rs.getString(\"v\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 14,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 14,
                "lastLine": 18
            }
        ],
        "window": 4
    },
    {
        "content": "Object[][] result = new Object[rows.size()][];rows.toArray(result);return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 30,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)",
                "startLine": 31,
                "lastLine": 34
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getReferenceKeys(smallsql.database.SSConnection,java.lang.String,java.lang.String)",
                "startLine": 37,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 25,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getColumns(smallsql.database.SSConnection,java.lang.String,java.lang.String)",
                "startLine": 35,
                "lastLine": 38
            }
        ],
        "window": 4
    },
    {
        "content": "System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 42,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRows(java.sql.Connection)",
                "startLine": 29,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 54,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_Scroll_getXXX(java.sql.Connection)",
                "startLine": 40,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 29,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 46,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 27,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteAll(java.sql.Connection)",
                "startLine": 18,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection)",
                "startLine": 25,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 48,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 33,
                "lastLine": 36
            }
        ],
        "window": 4
    },
    {
        "content": "formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 221,
                "lastLine": 224
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 126,
                "lastLine": 129
            }
        ],
        "window": 4
    },
    {
        "content": "assertFalse(rs.isLast());assertFalse(rs.isFirst());assertFalse(rs.isBeforeFirst());assertTrue(rs.isAfterLast());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 36,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 55,
                "lastLine": 58
            }
        ],
        "window": 4
    },
    {
        "content": "assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);assertTrue( \"To few rows\", rs.next() );assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);assertFalse( \"To many rows\", rs.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 10,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 17,
                "lastLine": 20
            }
        ],
        "window": 4
    },
    {
        "content": "formatNumber( details.day, 2, buf);buf.append('-');formatNumber( details.month+1, 2, buf);buf.append('-');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 79,
                "lastLine": 82
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 86,
                "lastLine": 89
            }
        ],
        "window": 4
    },
    {
        "content": "}tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 36,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 54,
                "lastLine": 57
            }
        ],
        "window": 4
    },
    {
        "content": "Statement st = con.createStatement();int isolation = con.getTransactionIsolation();con.setAutoCommit(false);try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_REPEATABLE_READ()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_READ_COMMITTED()",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "assertRowCount( 2, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");assertRowCount( 4, \"Select * from transactions\");con.rollback();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollback()",
                "startLine": 11,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 14,
                "lastLine": 19
            }
        ],
        "window": 4
    },
    {
        "content": "default:throw new Error();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/set()",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1Number/getNumeric()",
                "startLine": 15,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSign/getInt()",
                "startLine": 33,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/CommandDrop/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 25,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/database/CommandTable/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 49,
                "lastLine": 52
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/insert()",
                "startLine": 39,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSet/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 8,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/parse(char%5B%5D)",
                "startLine": 34,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/setTransaction()",
                "startLine": 26,
                "lastLine": 31
            }
        ],
        "window": 4
    },
    {
        "content": "st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");ResultSet rs = st.executeQuery(\"Select * From \" + table);assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );rs = con.getMetaData().getIndexInfo( null, null, table, false, false );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable2/testAdd2Keys()",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable2/testAddPrimaryKey()",
                "startLine": 4,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "if(complement == 0){signum = 0;value = EMPTY_INTS;}else{",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/MutableNumeric/MutableNumeric(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+constructor:///smallsql/database/MutableNumeric/MutableNumeric(long)",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "recreateTestTab(stat);stat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");fail();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testLocalizedErrors()",
                "startLine": 6,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testBogusLocale()",
                "startLine": 12,
                "lastLine": 16
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.DATE:case SQLTokenizer.TIME:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 148,
                "lastLine": 151
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 91,
                "lastLine": 94
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/initValue(smallsql.database.Expression)",
                "startLine": 31,
                "lastLine": 34
            }
        ],
        "window": 4
    },
    {
        "content": "} catch (SQLException ex) {ex.printStackTrace();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable2/tearDown()",
                "startLine": 3,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/tearDown()",
                "startLine": 3,
                "lastLine": 6
            }
        ],
        "window": 4
    },
    {
        "content": "Object obj = getObject();if(obj == null) return null;return obj.toString();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionFloor/getString()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnFloat/getString()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionAbs/getString()",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "}}return null;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/getMetaData()",
                "startLine": 10,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)",
                "startLine": 121,
                "lastLine": 124
            },
            {
                "locFile": "java+method:///smallsql/database/Columns/get(java.lang.String)",
                "startLine": 14,
                "lastLine": 17
            }
        ],
        "window": 4
    },
    {
        "content": "if (idx >= size)throw new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);return data[idx];}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Expressions/get(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/DataSources/get(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/LongList/get(int)",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "}prevLock = lock;lock = lock.nextLock;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 84,
                "lastLine": 87
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestWriteLock(smallsql.database.SSConnection,smallsql.database.TableStorePage)",
                "startLine": 22,
                "lastLine": 25
            }
        ],
        "window": 4
    },
    {
        "content": "assertFalse(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"next\", rs.next() );assertTrue(\"isFirst\", rs.isFirst() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 14,
                "lastLine": 17
            }
        ],
        "window": 4
    },
    {
        "content": "assertEquals(\"qwert3\", rs.getString(\"v\"));assertEquals(3, rs.getRow());assertTrue(rs.isLast());assertFalse(rs.isFirst());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 23,
                "lastLine": 26
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 29,
                "lastLine": 32
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.PARENTHESIS_R:return cmdCreate;case SQLTokenizer.COMMA:continue nextCol;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createTable()",
                "startLine": 52,
                "lastLine": 55
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createTable()",
                "startLine": 40,
                "lastLine": 43
            }
        ],
        "window": 4
    },
    {
        "content": "con.commit();assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");}finally{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertAndUpdate()",
                "startLine": 34,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testUpdateAndSavepoint()",
                "startLine": 39,
                "lastLine": 42
            }
        ],
        "window": 4
    },
    {
        "content": "if(nodeStack.size() > 1){nodeStack.pop();continue;}else{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 69,
                "lastLine": 72
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 39,
                "lastLine": 42
            }
        ],
        "window": 4
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();int firstValue = -10000;for(int i=firstValue; i<10000; i++){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/testMoney1()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/testMoney2()",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "}cal.close();checkValues( st, values, needTrim);st.execute(\"Delete From \"+ table);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/runTest()",
                "startLine": 172,
                "lastLine": 177
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/runTest()",
                "startLine": 121,
                "lastLine": 125
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDataTypePrecision(int,int)",
                "startLine": 22,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 34,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 25,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 48,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBytes(int,int)",
                "startLine": 41,
                "lastLine": 44
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 35,
                "lastLine": 38
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getBoolean(int,int)",
                "startLine": 34,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getMoney(int,int)",
                "startLine": 32,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 34,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 34,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 34,
                "lastLine": 37
            }
        ],
        "window": 4
    },
    {
        "content": "con1.setAutoCommit(true);con2.close();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadUncommited()",
                "startLine": 16,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadCommited()",
                "startLine": 16,
                "lastLine": 19
            }
        ],
        "window": 4
    },
    {
        "content": "if(init) return;try{Connection con = AllTests.getConnection();dropTable( con, table1 );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/init()",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/init()",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "return -1;if(longValue > 0)return 1;return 0;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSign/getInt()",
                "startLine": 13,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSign/getInt()",
                "startLine": 20,
                "lastLine": 23
            }
        ],
        "window": 4
    },
    {
        "content": "assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));assertRowCount(1,rs);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 54,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 58,
                "lastLine": 61
            }
        ],
        "window": 4
    },
    {
        "content": "} catch (Exception e) {throw SmallSQLException.createFromException(e);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/updateRow()",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getVersionColumns(java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 5,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 5,
                "lastLine": 8
            }
        ],
        "window": 4
    },
    {
        "content": "Money money = new Money();money.value = value;return money;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Money/createFromUnscaledValue(long)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/Money/createFromUnscaledValue(int)",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "result = (result << 8) | (bytes[i] & 0xFF);}return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Utils/bytes2int(byte%5B%5D)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/Utils/bytes2long(byte%5B%5D)",
                "startLine": 4,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 34,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 40,
                "lastLine": 43
            }
        ],
        "window": 4
    },
    {
        "content": "try{Expression expr = getValue(i);wasNull = expr.isNull();if(wasNull) return null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTime(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTimestamp(int)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDate(int)",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "}catch(SQLException ex){assertSQLException(\"01000\", 0, ex);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhereAssert(java.sql.ResultSet)",
                "startLine": 9,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhereAssert(java.sql.ResultSet)",
                "startLine": 9,
                "lastLine": 12
            }
        ],
        "window": 4
    },
    {
        "content": "while((type = store.readInt()) != 0){int offsetInPage = store.getCurrentOffsetInPage();int size = store.readInt();switch(type){",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/Table/Table(smallsql.database.Database,smallsql.database.SSConnection,java.lang.String,java.nio.channels.FileChannel,long,int)",
                "startLine": 22,
                "lastLine": 25
            },
            {
                "locFile": "java+constructor:///smallsql/database/View/View(smallsql.database.SSConnection,java.lang.String,java.nio.channels.FileChannel,long)",
                "startLine": 11,
                "lastLine": 14
            }
        ],
        "window": 4
    },
    {
        "content": "int i=-1;while(true){char digit = (i<0) ? (length == 0 ? (char)1 : 2): (key[i]);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,char%5B%5D,java.util.ArrayList)",
                "startLine": 2,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 5,
                "lastLine": 9
            }
        ],
        "window": 4
    },
    {
        "content": "final long getLong() throws Exception {if(isNull()) return 0;return Long.parseLong(getString().trim());}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnString/getLong()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getLong()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "value[v1] = (int)temp;}boolean uebertrag = (temp >>> 32) != 0;while(v1 > 0 && uebertrag)",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/sub(int%5B%5D)",
                "startLine": 11,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/add(int%5B%5D)",
                "startLine": 11,
                "lastLine": 14
            }
        ],
        "window": 4
    },
    {
        "content": "con.setAutoCommit(false);con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 3,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 9,
                "lastLine": 13
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.SMALLMONEY:return readInt() / 10000;case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 29,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 30,
                "lastLine": 33
            }
        ],
        "window": 4
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);ResultSet rs;int count;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 2,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 2,
                "lastLine": 5
            }
        ],
        "window": 4
    },
    {
        "content": "final double getDouble() throws Exception {if(isNull()) return 0;return Double.parseDouble(getString().trim());}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getDouble()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnString/getDouble()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "default:throw new Error(String.valueOf(expr.getDataType()));}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 72,
                "lastLine": 76
            },
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 65,
                "lastLine": 69
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.TABLE:case SQLTokenizer.VIEW:case SQLTokenizer.INDEX:case SQLTokenizer.PROCEDURE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/drop()",
                "startLine": 10,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/alter()",
                "startLine": 5,
                "lastLine": 8
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 29,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 29,
                "lastLine": 32
            }
        ],
        "window": 4
    },
    {
        "content": "default:return super.getPrecision();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionConvert/getPrecision()",
                "startLine": 10,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getPrecision()",
                "startLine": 8,
                "lastLine": 11
            }
        ],
        "window": 4
    },
    {
        "content": "this.type = type;this.condition = condition;this.left = left;this.right = right;",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/JoinScroll/JoinScroll(int,smallsql.database.RowSource,smallsql.database.RowSource,smallsql.database.Expression)",
                "startLine": 1,
                "lastLine": 4
            },
            {
                "locFile": "java+constructor:///smallsql/database/Join/Join(int,smallsql.database.RowSource,smallsql.database.RowSource,smallsql.database.Expression)",
                "startLine": 1,
                "lastLine": 4
            }
        ],
        "window": 4
    },
    {
        "content": "final long getMoney() throws Exception {if(isNull()) return 0;return Money.parseMoney(getString().trim());}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnString/getMoney()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getMoney()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "}prev = lock;lock = lock.nextLock;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 57,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 30,
                "lastLine": 33
            }
        ],
        "window": 4
    },
    {
        "content": "final void noRow() {rowSource.noRow();row = 0;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Distinct/noRow()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/database/Where/noRow()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "rs = pr.getGeneratedKeys();assertNotNull(\"RETURN_GENERATED_KEYS\", rs);assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());assertRowCount(1,rs);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 34,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 49,
                "lastLine": 52
            }
        ],
        "window": 4
    },
    {
        "content": "protected void setUp() throws Exception{if(init) return;Connection con = AllTests.getConnection();Statement st = con.createStatement();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/setUp()",
                "startLine": 0,
                "lastLine": 3
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/setUp()",
                "startLine": 0,
                "lastLine": 3
            }
        ],
        "window": 4
    },
    {
        "content": "finally {conn.close();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testLocalizedErrors()",
                "startLine": 30,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testSyntaxErrors()",
                "startLine": 35,
                "lastLine": 38
            },
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/tearDown()",
                "startLine": 8,
                "lastLine": 11
            }
        ],
        "window": 4
    },
    {
        "content": "if (! inserted.add(key)) {throw new IllegalArgumentException(\"Duplicate key: \" + key);}else {",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/language/Language/setSqlStates()",
                "startLine": 16,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/database/language/Language/addMessages(java.lang.String%5B%5D%5B%5D)",
                "startLine": 17,
                "lastLine": 20
            }
        ],
        "window": 4
    },
    {
        "content": "}row = 0;return false;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/UnionAll/next()",
                "startLine": 9,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/TableResult/moveToValidRow()",
                "startLine": 9,
                "lastLine": 12
            }
        ],
        "window": 4
    },
    {
        "content": "if(t<0){t += 86400000;d--;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/addDateTimeOffset(long,java.util.TimeZone)",
                "startLine": 3,
                "lastLine": 7
            },
            {
                "locFile": "java+constructor:///smallsql/database/DateTime/Details/Details(long)",
                "startLine": 3,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "rs = st.getGeneratedKeys();assertNotNull(\"RETURN_GENERATED_KEYS\", rs);assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());assertRowCount(1,rs);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 33,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 46,
                "lastLine": 49
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.BIGINT:case SQLTokenizer.MONEY:return 19;case SQLTokenizer.REAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDisplaySize(int,int,int)",
                "startLine": 12,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDataTypePrecision(int,int)",
                "startLine": 14,
                "lastLine": 17
            }
        ],
        "window": 4
    },
    {
        "content": "}finally{dropTable( con, \"Scrollable\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhere()",
                "startLine": 15,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhere()",
                "startLine": 17,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelative()",
                "startLine": 15,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testUpdatable()",
                "startLine": 13,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testLastWithWhere()",
                "startLine": 15,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testNextWithWhere()",
                "startLine": 15,
                "lastLine": 18
            }
        ],
        "window": 4
    },
    {
        "content": "case SQLTokenizer.BOOLEAN:return readBoolean() ? 1 : 0;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 9,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 9,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 9,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 9,
                "lastLine": 12
            }
        ],
        "window": 4
    },
    {
        "content": "}Expression expr = getValue(columnIndex);wasNull = expr.isNull();if(wasNull) return null;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTimestamp(int,java.util.Calendar)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTime(int,java.util.Calendar)",
                "startLine": 4,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDate(int,java.util.Calendar)",
                "startLine": 4,
                "lastLine": 7
            }
        ],
        "window": 4
    },
    {
        "content": "}fos.close();java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");long time = -System.currentTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 13,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 13,
                "lastLine": 16
            }
        ],
        "window": 4
    },
    {
        "content": "}else{shift += 16;listEnum.stack--;if(listEnum.stack<0) return -1; // no more entriesresult = listEnum.resultStack[listEnum.stack];",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 32,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 26,
                "lastLine": 31
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 33,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 39,
                "lastLine": 43
            }
        ],
        "window": 5
    },
    {
        "content": "con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 24,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 21,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 28,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollback()",
                "startLine": 21,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertAndUpdate()",
                "startLine": 39,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCreateTable()",
                "startLine": 27,
                "lastLine": 31
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 24,
                "lastLine": 28
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 32,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 48,
                "lastLine": 52
            }
        ],
        "window": 5
    },
    {
        "content": "}}}return true;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SortedResult/relative(int)",
                "startLine": 12,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/absolute(int)",
                "startLine": 14,
                "lastLine": 18
            }
        ],
        "window": 5
    },
    {
        "content": "buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );buf.append( digits[ (bytes[i]     ) & 0x0F ] );}return buf.toString();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/bytes2hex(byte%5B%5D)",
                "startLine": 3,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/Utils/bytes2hex(byte%5B%5D)",
                "startLine": 3,
                "lastLine": 7
            }
        ],
        "window": 5
    },
    {
        "content": "if(isNull()) return null;byte[] bytes = param1.getBytes();int length = param2.getInt();if(bytes.length <= length) return bytes;byte[] b = new byte[length];",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionLeft/getBytes()",
                "startLine": 1,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRight/getBytes()",
                "startLine": 1,
                "lastLine": 6
            }
        ],
        "window": 5
    },
    {
        "content": "return 10;case SQLTokenizer.BIGINT:case SQLTokenizer.MONEY:return 19;case SQLTokenizer.REAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDisplaySize(int,int,int)",
                "startLine": 11,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSetMetaData/getDataTypePrecision(int,int)",
                "startLine": 13,
                "lastLine": 17
            }
        ],
        "window": 5
    },
    {
        "content": "break;case SQLTokenizer.CHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.LONGVARCHAR:String str = expr.getString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 74,
                "lastLine": 78
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 131,
                "lastLine": 135
            }
        ],
        "window": 5
    },
    {
        "content": "try {stat.executeQuery(sql);fail(failureMessage);}catch (SQLException e) {",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTokenizer/failureTest(java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTokenizer/failureTest(java.lang.String,java.lang.String)",
                "startLine": 1,
                "lastLine": 5
            }
        ],
        "window": 5
    },
    {
        "content": "dropTable(con1, \"transactions\");con1.setAutoCommit(true);con2.close();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadUncommited()",
                "startLine": 15,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadCommited()",
                "startLine": 15,
                "lastLine": 19
            }
        ],
        "window": 5
    },
    {
        "content": "int length = key.length;int i=-1;while(true){char digit = (i<0) ? (length == 0 ? (char)1 : 2): (key[i]);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,char%5B%5D,java.util.ArrayList)",
                "startLine": 1,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 4,
                "lastLine": 9
            }
        ],
        "window": 5
    },
    {
        "content": "return DateTime.getDate( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDate(int)",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDate(int)",
                "startLine": 5,
                "lastLine": 9
            }
        ],
        "window": 5
    },
    {
        "content": "}time += System.currentTimeMillis();rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();int count = rs.getInt(1);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 15,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertRows(java.sql.Connection)",
                "startLine": 33,
                "lastLine": 37
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.TIMESTAMP:case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:return ((DateTime)obj).getTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)",
                "startLine": 10,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)",
                "startLine": 12,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 13,
                "lastLine": 17
            }
        ],
        "window": 5
    },
    {
        "content": "int type;while((type = store.readInt()) != 0){int offsetInPage = store.getCurrentOffsetInPage();int size = store.readInt();switch(type){",
        "cloneLocs": [
            {
                "locFile": "java+constructor:///smallsql/database/Table/Table(smallsql.database.Database,smallsql.database.SSConnection,java.lang.String,java.nio.channels.FileChannel,long,int)",
                "startLine": 21,
                "lastLine": 25
            },
            {
                "locFile": "java+constructor:///smallsql/database/View/View(smallsql.database.SSConnection,java.lang.String,java.nio.channels.FileChannel,long)",
                "startLine": 10,
                "lastLine": 14
            }
        ],
        "window": 5
    },
    {
        "content": "formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 142,
                "lastLine": 146
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 268,
                "lastLine": 272
            }
        ],
        "window": 5
    },
    {
        "content": "return DateTime.getTimestamp( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTimestamp(int)",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTimestamp(int)",
                "startLine": 5,
                "lastLine": 9
            }
        ],
        "window": 5
    },
    {
        "content": "fos.write(bytes);}fos.close();java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");long time = -System.currentTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 12,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 12,
                "lastLine": 16
            }
        ],
        "window": 5
    },
    {
        "content": "}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 41,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRows(java.sql.Connection)",
                "startLine": 28,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 53,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_Scroll_getXXX(java.sql.Connection)",
                "startLine": 39,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 28,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 45,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 26,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteAll(java.sql.Connection)",
                "startLine": 17,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection)",
                "startLine": 24,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 47,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 32,
                "lastLine": 36
            }
        ],
        "window": 5
    },
    {
        "content": "return;}prev = lock;lock = lock.nextLock;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 56,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 29,
                "lastLine": 33
            }
        ],
        "window": 5
    },
    {
        "content": "listEnum.offsetStack[listEnum.stack] = offset+pointerSize;offset = getPointer();shift -= 16;listEnum.stack++;listEnum.resultStack[listEnum.stack] = result;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 26,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 20,
                "lastLine": 24
            }
        ],
        "window": 5
    },
    {
        "content": "count++;}rs.close();assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_char()",
                "startLine": 21,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 21,
                "lastLine": 25
            }
        ],
        "window": 5
    },
    {
        "content": "buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 206,
                "lastLine": 210
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 283,
                "lastLine": 287
            }
        ],
        "window": 5
    },
    {
        "content": "page[ offset++ ] = (byte)(value >> 24);page[ offset++ ] = (byte)(value >> 16);page[ offset++ ] = (byte)(value >> 8);page[ offset++ ] = (byte)(value);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeInt(int)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeLong(long)",
                "startLine": 8,
                "lastLine": 12
            }
        ],
        "window": 5
    },
    {
        "content": "buf.append('/');formatNumber( details.month+1, 2, buf);buf.append('/');formatNumber( details.day, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 170,
                "lastLine": 174
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 163,
                "lastLine": 167
            }
        ],
        "window": 5
    },
    {
        "content": "buf.append( SHORT_MONTHS[ details.month ]);buf.append(' ');formatNumber( details.day, 2, buf);buf.append(',');buf.append(' ');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 107,
                "lastLine": 111
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 115,
                "lastLine": 119
            }
        ],
        "window": 5
    },
    {
        "content": "for(int i=0; i<length; i++){result = (result << 8) | (bytes[i] & 0xFF);}return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Utils/bytes2int(byte%5B%5D)",
                "startLine": 3,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/Utils/bytes2long(byte%5B%5D)",
                "startLine": 3,
                "lastLine": 7
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.VARBINARY:case SQLTokenizer.BINARY:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.UNIQUEIDENTIFIER:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 50,
                "lastLine": 54
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 57,
                "lastLine": 61
            }
        ],
        "window": 5
    },
    {
        "content": "assertRowCount( 0, \"Select * from Scrollable\");con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");assertRowCount( 1, \"Select * from Scrollable\");assertRowCount( 0, \"Select * from Scrollable Where 1=0\");Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhere()",
                "startLine": 4,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhere()",
                "startLine": 4,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testLastWithWhere()",
                "startLine": 4,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testNextWithWhere()",
                "startLine": 4,
                "lastLine": 10
            }
        ],
        "window": 5
    },
    {
        "content": "return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));} catch (Exception e) {throw SmallSQLException.createFromException(e);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getVersionColumns(java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSDatabaseMetaData/getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)",
                "startLine": 4,
                "lastLine": 8
            }
        ],
        "window": 5
    },
    {
        "content": "rs = pr.getGeneratedKeys();assertNotNull(\"RETURN_GENERATED_KEYS\", rs);assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));assertRowCount(1,rs);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 18,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 41,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 26,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 56,
                "lastLine": 60
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 16,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getInt()",
                "startLine": 16,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getLong()",
                "startLine": 16,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 16,
                "lastLine": 20
            }
        ],
        "window": 5
    },
    {
        "content": "buf.append(':');formatNumber( details.second, 2, buf);buf.append('.');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 236,
                "lastLine": 240
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 252,
                "lastLine": 256
            }
        ],
        "window": 5
    },
    {
        "content": "assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 45,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 47,
                "lastLine": 51
            }
        ],
        "window": 5
    },
    {
        "content": "con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");assertRowCount( 4, \"Select * from transactions\");con.rollback();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollback()",
                "startLine": 10,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 13,
                "lastLine": 19
            }
        ],
        "window": 5
    },
    {
        "content": "}else if(!expr.isNull()){switch(dataType){case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 115,
                "lastLine": 119
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 58,
                "lastLine": 62
            }
        ],
        "window": 5
    },
    {
        "content": "rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 38,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 36,
                "lastLine": 40
            }
        ],
        "window": 5
    },
    {
        "content": "}return node.addRoot(digit);}node = node.addNode(digit);if(node.isEmpty()){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)",
                "startLine": 11,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 14,
                "lastLine": 18
            }
        ],
        "window": 5
    },
    {
        "content": "cal.execute();}cal.close();checkValues( st, values, needTrim);st.execute(\"Delete From \"+ table);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/runTest()",
                "startLine": 171,
                "lastLine": 177
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/runTest()",
                "startLine": 120,
                "lastLine": 125
            }
        ],
        "window": 5
    },
    {
        "content": "return (obj == Boolean.TRUE) ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:case SQLTokenizer.BIGINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 5,
                "lastLine": 9
            }
        ],
        "window": 5
    },
    {
        "content": "return readLong();case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 21,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 21,
                "lastLine": 25
            }
        ],
        "window": 5
    },
    {
        "content": "assertEquals(0, rs.getRow());assertFalse(rs.isLast());assertFalse(rs.isFirst());assertTrue(rs.isBeforeFirst());assertFalse(rs.isAfterLast());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 47,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 61,
                "lastLine": 65
            }
        ],
        "window": 5
    },
    {
        "content": "assertEquals(0, rs.getRow());assertFalse(rs.isLast());assertFalse(rs.isFirst());assertFalse(rs.isBeforeFirst());assertTrue(rs.isAfterLast());",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 35,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet)",
                "startLine": 54,
                "lastLine": 58
            }
        ],
        "window": 5
    },
    {
        "content": "init = true;}catch(Throwable e){e.printStackTrace();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/init()",
                "startLine": 56,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/init()",
                "startLine": 26,
                "lastLine": 30
            }
        ],
        "window": 5
    },
    {
        "content": "String getString() throws Exception{Object obj = getObject();if(obj == null) return null;return obj.toString();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionFloor/getString()",
                "startLine": 0,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionAbs/getString()",
                "startLine": 0,
                "lastLine": 4
            }
        ],
        "window": 5
    },
    {
        "content": "con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");assertRowCount( 1, \"Select * from transactions\");con.setAutoCommit(false);con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 9,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 9,
                "lastLine": 14
            }
        ],
        "window": 5
    },
    {
        "content": "if(token2 != null && token2.value == SQLTokenizer.POINT){expr.setNameAfterTableAlias( nextIdentifier() );}else{previousToken();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)",
                "startLine": 111,
                "lastLine": 115
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)",
                "startLine": 18,
                "lastLine": 22
            }
        ],
        "window": 5
    },
    {
        "content": "assertRSMetaData( rs, colNames, colTypes);assertTrue( \"No row\", rs.next() );assertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") );assertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") );assertEquals( \"5\", rs.getObject(\"COLUMN_Def\") );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetColumn()",
                "startLine": 10,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDBMetaData/testGetColumn()",
                "startLine": 19,
                "lastLine": 23
            }
        ],
        "window": 5
    },
    {
        "content": "return expr.getInt();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getInt(int)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getInt(int)",
                "startLine": 4,
                "lastLine": 8
            }
        ],
        "window": 5
    },
    {
        "content": "fail(\"SQLException 'No current row' should be throw\");}catch(SQLException ex){assertSQLException(\"01000\", 0, ex);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhereAssert(java.sql.ResultSet)",
                "startLine": 8,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhereAssert(java.sql.ResultSet)",
                "startLine": 8,
                "lastLine": 12
            }
        ],
        "window": 5
    },
    {
        "content": "}}finally{dropTable(con, \"DuplicatedColumn\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnAlter()",
                "startLine": 10,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnInsert()",
                "startLine": 10,
                "lastLine": 14
            }
        ],
        "window": 5
    },
    {
        "content": "return null;}return node.addRoot();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)",
                "startLine": 25,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 28,
                "lastLine": 32
            }
        ],
        "window": 5
    },
    {
        "content": "return readNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 33,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 33,
                "lastLine": 37
            }
        ],
        "window": 5
    },
    {
        "content": "throw SmallSQLException.createFromException(e);}finally{if(con.getAutoCommit()) con.commit();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Command/execute(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 6,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/deleteRow(smallsql.database.SSConnection)",
                "startLine": 10,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/insertRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 36,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/updateRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 35,
                "lastLine": 39
            }
        ],
        "window": 5
    },
    {
        "content": "pr.execute();rs = pr.getGeneratedKeys();assertNotNull(\"RETURN_GENERATED_KEYS\", rs);assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());assertRowCount(1,rs);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 33,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 48,
                "lastLine": 52
            }
        ],
        "window": 5
    },
    {
        "content": "try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withRightWhere()",
                "startLine": 23,
                "lastLine": 27
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 27,
                "lastLine": 31
            }
        ],
        "window": 5
    },
    {
        "content": "assertTrue( rs.next() );oldValue = rs.getString(\"v\");assertNull(oldValue);assertTrue( rs.next() );oldValue = rs.getString(\"v\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 15,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 11,
                "lastLine": 16
            }
        ],
        "window": 5
    },
    {
        "content": "if(longValue < 0)return -1;if(longValue > 0)return 1;return 0;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSign/getInt()",
                "startLine": 12,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionSign/getInt()",
                "startLine": 19,
                "lastLine": 23
            }
        ],
        "window": 5
    },
    {
        "content": "if(shift != 0) offset += pointerSize;}shift -= 16;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/remove(long)",
                "startLine": 56,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/add(long)",
                "startLine": 48,
                "lastLine": 52
            }
        ],
        "window": 5
    },
    {
        "content": "DriverManager.println(e2.toString());}throw SmallSQLException.createFromException(e);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 35,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 23,
                "lastLine": 27
            }
        ],
        "window": 5
    },
    {
        "content": "st.close();}catch(Throwable e){e.printStackTrace();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/setUp()",
                "startLine": 16,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/setUp()",
                "startLine": 7,
                "lastLine": 11
            }
        ],
        "window": 5
    },
    {
        "content": "}finally{con.setTransactionIsolation(isolation);con.setAutoCommit(true);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_READ_COMMITTED()",
                "startLine": 16,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_REPEATABLE_READ()",
                "startLine": 16,
                "lastLine": 20
            }
        ],
        "window": 5
    },
    {
        "content": "int maxRows = Integer.parseInt(token.getName(sql));selCmd.setMaxRows(maxRows);}catch(NumberFormatException e){throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/singleSelect()",
                "startLine": 15,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/limit(smallsql.database.CommandSelect)",
                "startLine": 3,
                "lastLine": 7
            }
        ],
        "window": 5
    },
    {
        "content": "break;default:throw new Error(String.valueOf(expr.getDataType()));}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 71,
                "lastLine": 76
            },
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 64,
                "lastLine": 69
            }
        ],
        "window": 5
    },
    {
        "content": "fail(\"Exception should throw\");}catch(SQLException ex){assertSQLException(\"HY010\", 0, ex);}try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 19,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedStatement()",
                "startLine": 6,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 7,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 13,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedStatement()",
                "startLine": 12,
                "lastLine": 16
            }
        ],
        "window": 5
    },
    {
        "content": "fail(\"Exception should throw\");}catch(SQLException ex){assertSQLException(\"HY010\", 0, ex);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedPreparedStatement()",
                "startLine": 25,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testClosedStatement()",
                "startLine": 18,
                "lastLine": 22
            }
        ],
        "window": 5
    },
    {
        "content": "dropTable( AllTests.getConnection(), table );} catch (SQLException ex) {ex.printStackTrace();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable2/tearDown()",
                "startLine": 2,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/tearDown()",
                "startLine": 2,
                "lastLine": 6
            }
        ],
        "window": 5
    },
    {
        "content": "fail(\"SQLException 'ResultSet is forward only' should be throw\");}catch(SQLException e){assertSQLException(\"01000\", 0, e);}try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 12,
                "lastLine": 17
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 40,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 68,
                "lastLine": 73
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 54,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 26,
                "lastLine": 31
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 33,
                "lastLine": 38
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 19,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 61,
                "lastLine": 66
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testForwardOnly()",
                "startLine": 47,
                "lastLine": 52
            }
        ],
        "window": 5
    },
    {
        "content": "value.dataType  = dataType;value.small     = small;value.large     = large;return value;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/a(java.lang.String,java.lang.Object,java.lang.Object)",
                "startLine": 2,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/a(java.lang.String,java.lang.Object,java.lang.Object)",
                "startLine": 2,
                "lastLine": 6
            }
        ],
        "window": 5
    },
    {
        "content": "init();Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;int oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_functionAscDesc()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_function()",
                "startLine": 1,
                "lastLine": 5
            }
        ],
        "window": 5
    },
    {
        "content": "init();Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;Integer oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_desc()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 1,
                "lastLine": 5
            }
        ],
        "window": 5
    },
    {
        "content": "init();Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;String oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_nvarchar()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_Join()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_GroupBy()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_char()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 1,
                "lastLine": 5
            }
        ],
        "window": 5
    },
    {
        "content": "init();Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;Long oldValue;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_bigint()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_bigint_withDoublicateValues()",
                "startLine": 1,
                "lastLine": 5
            }
        ],
        "window": 5
    },
    {
        "content": "case AND:case NOT:case LIKE:case ISNULL:case ISNOTNULL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/isNull()",
                "startLine": 3,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDataType()",
                "startLine": 14,
                "lastLine": 18
            }
        ],
        "window": 5
    },
    {
        "content": "return expr.getLong();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getLong(int)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDouble(int)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getLong(int)",
                "startLine": 4,
                "lastLine": 8
            }
        ],
        "window": 5
    },
    {
        "content": "scroll, level));continue;}elsereturn getReturnValue(status.nodeValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 29,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 60,
                "lastLine": 64
            }
        ],
        "window": 5
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");assertFalse( \"To many rows\", rs.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/runTest()",
                "startLine": 1,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 1,
                "lastLine": 6
            }
        ],
        "window": 5
    },
    {
        "content": "}}tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 35,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 53,
                "lastLine": 57
            }
        ],
        "window": 5
    },
    {
        "content": "assertNotNull(\"RETURN_GENERATED_KEYS\", rs);assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));assertRowCount(1,rs);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 53,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 57,
                "lastLine": 61
            }
        ],
        "window": 5
    },
    {
        "content": "pr.setString(  2 , \"Test\" );pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );pr.setFloat (  4, (float)1234.56789 );pr.setFloat (  5 , (float)9876.54321 );pr.setBytes (  6, largeByteArray );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 12,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 16,
                "lastLine": 20
            }
        ],
        "window": 5
    },
    {
        "content": "assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"next\", rs.next() );assertTrue(\"isFirst\", rs.isFirst() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 11,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 13,
                "lastLine": 17
            }
        ],
        "window": 5
    },
    {
        "content": "break;default:throw new Error();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/CommandTable/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 48,
                "lastLine": 52
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSet/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 7,
                "lastLine": 11
            }
        ],
        "window": 5
    },
    {
        "content": "elsepage = (IndexNode)page.getValue();}throw new Error();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expressions,boolean,java.util.ArrayList)",
                "startLine": 20,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expression%5B%5D,boolean,java.util.ArrayList)",
                "startLine": 20,
                "lastLine": 24
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.DATE:return readDate();case SQLTokenizer.SMALLDATETIME:return readSmallDateTime();default:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 55,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 55,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 55,
                "lastLine": 59
            }
        ],
        "window": 5
    },
    {
        "content": "return DateTime.getTime( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTime(int)",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTime(int)",
                "startLine": 5,
                "lastLine": 9
            }
        ],
        "window": 5
    },
    {
        "content": "return expr.getFloat();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getFloat(int)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getFloat(int)",
                "startLine": 4,
                "lastLine": 8
            }
        ],
        "window": 5
    },
    {
        "content": "pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 30,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 22,
                "lastLine": 27
            }
        ],
        "window": 5
    },
    {
        "content": "oldValue = (Integer)rs.getObject(\"i\");count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 19,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 19,
                "lastLine": 23
            }
        ],
        "window": 5
    },
    {
        "content": "st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");for(int i = 0; i < 200; i++){Thread thread = new Thread(new Runnable(){public void run(){try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 13,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 13,
                "lastLine": 20
            }
        ],
        "window": 5
    },
    {
        "content": "buf.append('.');formatNumber( details.month+1, 2, buf);buf.append('.');formatNumber( details.day, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 38,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 45,
                "lastLine": 49
            }
        ],
        "window": 5
    },
    {
        "content": "String newValue = rs.getString(\"v\");assertTrue( oldValue.compareTo( newValue ) < 0 );oldValue = newValue;count++;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 18,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 24,
                "lastLine": 28
            }
        ],
        "window": 5
    },
    {
        "content": "puffer[ offset++ ] = (byte)(value >> 24);puffer[ offset++ ] = (byte)(value >> 16);puffer[ offset++ ] = (byte)(value >> 8);puffer[ offset++ ] = (byte)(value);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MemoryStream/writeInt(int)",
                "startLine": 2,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/MemoryStream/writeLong(long)",
                "startLine": 6,
                "lastLine": 10
            }
        ],
        "window": 5
    },
    {
        "content": "break;case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.DATE:case SQLTokenizer.TIME:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 147,
                "lastLine": 151
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 90,
                "lastLine": 94
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/initValue(smallsql.database.Expression)",
                "startLine": 30,
                "lastLine": 34
            }
        ],
        "window": 5
    },
    {
        "content": "public void setUp(){tearDown();try{Connection con = AllTests.getConnection();Statement st = con.createStatement();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/setUp()",
                "startLine": 0,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 0,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/setUp()",
                "startLine": 0,
                "lastLine": 4
            }
        ],
        "window": 5
    },
    {
        "content": "keys.add(valueExpress.getObject());break;}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/CommandInsert/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 54,
                "lastLine": 58
            },
            {
                "locFile": "java+method:///smallsql/database/CommandInsert/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 44,
                "lastLine": 48
            }
        ],
        "window": 5
    },
    {
        "content": "TableView tab = getTableView( con, tableName);if(!(tab instanceof Table)) continue;IndexDescriptions indexes = ((Table)tab).indexes;for(int i=0; i<indexes.size(); i++){IndexDescription index = indexes.get(i);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)",
                "startLine": 6,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 5,
                "lastLine": 9
            }
        ],
        "window": 5
    },
    {
        "content": "assertTrue( rs.next() );oldValue = rs.getString(\"v\");int count = 1;while(rs.next()){String newValue = rs.getString(\"v\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 13,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 13,
                "lastLine": 18
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return readBoolean() ? 1 : 0;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 8,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 8,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 8,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 8,
                "lastLine": 12
            }
        ],
        "window": 5
    },
    {
        "content": "assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );pr.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 86,
                "lastLine": 90
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 65,
                "lastLine": 69
            }
        ],
        "window": 5
    },
    {
        "content": "return obj.toBigDecimal(scale);}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int,int)",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int,int)",
                "startLine": 5,
                "lastLine": 9
            }
        ],
        "window": 5
    },
    {
        "content": "con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");ResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery(\"Select * from transactions Where 1=0\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 2,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 10,
                "lastLine": 16
            }
        ],
        "window": 5
    },
    {
        "content": "for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 11,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 11,
                "lastLine": 15
            }
        ],
        "window": 5
    },
    {
        "content": "Connection con = AllTests.getConnection();try{Statement st = con.createStatement();st.execute(\"Create Table DuplicatedColumn(col INT)\");try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnInsert()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnAlter()",
                "startLine": 1,
                "lastLine": 5
            }
        ],
        "window": 5
    },
    {
        "content": "st.execute(\"drop table \" + table);st.close();}catch(Throwable e){}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/tearDown()",
                "startLine": 4,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/tearDown()",
                "startLine": 4,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/tearDown()",
                "startLine": 4,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/tearDown()",
                "startLine": 4,
                "lastLine": 9
            }
        ],
        "window": 5
    },
    {
        "content": "formatNumber( details.day, 2, buf);buf.append('/');formatNumber( details.month+1, 2, buf);buf.append('/');formatNumber( details.year % 100, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 51,
                "lastLine": 55
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 274,
                "lastLine": 278
            }
        ],
        "window": 5
    },
    {
        "content": "return expr.getBoolean();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBoolean(int)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBoolean(int)",
                "startLine": 4,
                "lastLine": 8
            }
        ],
        "window": 5
    },
    {
        "content": "rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 17,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 18,
                "lastLine": 22
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.BOOLEAN:case SQLTokenizer.TINYINT:offset++;break;case SQLTokenizer.SMALLINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 18,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 8,
                "lastLine": 12
            }
        ],
        "window": 5
    },
    {
        "content": "if(!next()){return false;}}}else{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SortedResult/absolute(int)",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/relative(int)",
                "startLine": 4,
                "lastLine": 8
            }
        ],
        "window": 5
    },
    {
        "content": "default:throw new Error();}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionDefList(smallsql.database.Command,smallsql.database.Expressions,smallsql.database.Strings)",
                "startLine": 21,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionParenthesisList(smallsql.database.Command)",
                "startLine": 25,
                "lastLine": 29
            }
        ],
        "window": 5
    },
    {
        "content": "value = str;break;case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:MutableNumeric newValue = expr.getNumeric();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 137,
                "lastLine": 141
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 80,
                "lastLine": 84
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.LONGVARCHAR:return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 42,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 43,
                "lastLine": 47
            }
        ],
        "window": 5
    },
    {
        "content": "public void init(){if(init) return;try{Connection con = AllTests.getConnection();dropTable( con, table1 );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestGroupBy/init()",
                "startLine": 0,
                "lastLine": 4
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/init()",
                "startLine": 0,
                "lastLine": 4
            }
        ],
        "window": 5
    },
    {
        "content": "}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 20,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 20,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_desc()",
                "startLine": 20,
                "lastLine": 24
            }
        ],
        "window": 5
    },
    {
        "content": "switch(token.value){case SQLTokenizer.PARENTHESIS_R:return cmdCreate;case SQLTokenizer.COMMA:continue nextCol;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createTable()",
                "startLine": 51,
                "lastLine": 55
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/createTable()",
                "startLine": 39,
                "lastLine": 43
            }
        ],
        "window": 5
    },
    {
        "content": "pr.setString(  15 , \"text NULL\" );pr.setByte  (  16, (byte)28 );pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 29,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 25,
                "lastLine": 29
            }
        ],
        "window": 5
    },
    {
        "content": "num.setScale(scale);}elseif(num.scale > scale){setScale(num.scale);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/sub(smallsql.database.MutableNumeric)",
                "startLine": 6,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/add(smallsql.database.MutableNumeric)",
                "startLine": 6,
                "lastLine": 10
            }
        ],
        "window": 5
    },
    {
        "content": "}finally {conn.close();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testLocalizedErrors()",
                "startLine": 29,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testSyntaxErrors()",
                "startLine": 34,
                "lastLine": 38
            }
        ],
        "window": 5
    },
    {
        "content": "this.offset = valueOffset;if(readBoolean()) return null;switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 5,
                "lastLine": 9
            }
        ],
        "window": 5
    },
    {
        "content": "init();Connection con = AllTests.getConnection();Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);ResultSet rs;int count;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 1,
                "lastLine": 5
            }
        ],
        "window": 5
    },
    {
        "content": "}Object[][] result = new Object[rows.size()][];rows.toArray(result);return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 29,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)",
                "startLine": 30,
                "lastLine": 34
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getReferenceKeys(smallsql.database.SSConnection,java.lang.String,java.lang.String)",
                "startLine": 36,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 24,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getColumns(smallsql.database.SSConnection,java.lang.String,java.lang.String)",
                "startLine": 34,
                "lastLine": 38
            }
        ],
        "window": 5
    },
    {
        "content": "}else{value *= factor;}return value;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 19,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 19,
                "lastLine": 23
            }
        ],
        "window": 5
    },
    {
        "content": "try{con.setAutoCommit(false);con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 2,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 8,
                "lastLine": 13
            }
        ],
        "window": 5
    },
    {
        "content": "case GRE_EQU:   return comp >= 0;case LESSER:    return comp <  0;case LES_EQU:   return comp <= 0;case UNEQUALS:  return comp != 0;case BETWEEN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 131,
                "lastLine": 135
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 178,
                "lastLine": 182
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 156,
                "lastLine": 160
            }
        ],
        "window": 5
    },
    {
        "content": "return -1;}}IndexNode node = status.nodes[idx];nodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 45,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 74,
                "lastLine": 78
            }
        ],
        "window": 5
    },
    {
        "content": "while(shift>=0){int octet = (int)(value >> shift) & 0xFFFF;while(true){int nextEntry = getUnsignedShort();if(nextEntry == octet){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/remove(long)",
                "startLine": 16,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/add(long)",
                "startLine": 24,
                "lastLine": 28
            }
        ],
        "window": 5
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();int isolation = con.getTransactionIsolation();con.setAutoCommit(false);try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_REPEATABLE_READ()",
                "startLine": 1,
                "lastLine": 5
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/testAddWithTableLock_READ_COMMITTED()",
                "startLine": 1,
                "lastLine": 5
            }
        ],
        "window": 5
    },
    {
        "content": "buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 220,
                "lastLine": 224
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 125,
                "lastLine": 129
            }
        ],
        "window": 5
    },
    {
        "content": "assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");assertRowCount( 1, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollback()",
                "startLine": 5,
                "lastLine": 11
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 5,
                "lastLine": 11
            }
        ],
        "window": 5
    },
    {
        "content": "oldValue = newValue;count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 20,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_function()",
                "startLine": 19,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/test_bigint_withDoublicateValues()",
                "startLine": 20,
                "lastLine": 24
            }
        ],
        "window": 5
    },
    {
        "content": "buf.append(' ');buf.append( SHORT_MONTHS[ details.month ]);buf.append(' ');formatNumber( details.year, 4, buf);buf.append(' ');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 188,
                "lastLine": 192
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 259,
                "lastLine": 263
            }
        ],
        "window": 5
    },
    {
        "content": "rs = st.getGeneratedKeys();assertNotNull(\"RETURN_GENERATED_KEYS\", rs);assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));assertRowCount(1,rs);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 39,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 26,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeys()",
                "startLine": 52,
                "lastLine": 56
            }
        ],
        "window": 5
    },
    {
        "content": "try {recreateTestTab(stat);stat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");fail();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testLocalizedErrors()",
                "startLine": 5,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testBogusLocale()",
                "startLine": 11,
                "lastLine": 16
            }
        ],
        "window": 5
    },
    {
        "content": "rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 24,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 24,
                "lastLine": 28
            }
        ],
        "window": 5
    },
    {
        "content": "int k=tmp.length-1;for(; k>= 0; k--) if(tmp[k] != 0) break;k++;byte[] tmp2 = new byte[k];System.arraycopy( tmp, 0, tmp2, 0, k);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertEqualsObject(java.lang.String,java.lang.Object,java.lang.Object,boolean)",
                "startLine": 6,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/assertEqualsObject(java.lang.String,java.lang.Object,java.lang.Object,boolean)",
                "startLine": 19,
                "lastLine": 23
            }
        ],
        "window": 5
    },
    {
        "content": "return obj;}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBytes(int)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getString(int)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getObject(int)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBytes(int)",
                "startLine": 4,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getObject(int)",
                "startLine": 4,
                "lastLine": 8
            }
        ],
        "window": 5
    },
    {
        "content": "if(!result){switch(type){case Join.LEFT_JOIN:case Join.FULL_JOIN:isOuterValid = false;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 16,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 53,
                "lastLine": 57
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 28,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 28,
                "lastLine": 32
            }
        ],
        "window": 5
    },
    {
        "content": "System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );return buffer;}return bytes;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionConvert/getObject()",
                "startLine": 41,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionConvert/getObject()",
                "startLine": 30,
                "lastLine": 35
            }
        ],
        "window": 5
    },
    {
        "content": "batches.clear();if(failed != null)throw failed;return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/executeBatch()",
                "startLine": 21,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SSStatement/executeBatch()",
                "startLine": 17,
                "lastLine": 21
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.BIT:return (obj.equals(Boolean.TRUE)) ? 1 : 0;case SQLTokenizer.INT:case SQLTokenizer.BIGINT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)",
                "startLine": 3,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)",
                "startLine": 3,
                "lastLine": 7
            }
        ],
        "window": 5
    },
    {
        "content": "try{value = Integer.parseInt(token.getName(sql) );}catch(Exception e){throw createSyntaxError(token, MISSING_NUMBERVALUE );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/datatype(boolean)",
                "startLine": 91,
                "lastLine": 95
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/datatype(boolean)",
                "startLine": 101,
                "lastLine": 105
            }
        ],
        "window": 5
    },
    {
        "content": "assertRowCount( 0, \"Select * from transactions\");con1.setAutoCommit(false);con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");assertTrue( rs2.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadCommited()",
                "startLine": 6,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadUncommited()",
                "startLine": 6,
                "lastLine": 12
            }
        ],
        "window": 5
    },
    {
        "content": "assertTrue( \"To few rows\", rs.next() );assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);assertTrue( \"To few rows\", rs.next() );assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);assertFalse( \"To many rows\", rs.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 9,
                "lastLine": 13
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 16,
                "lastLine": 20
            }
        ],
        "window": 5
    },
    {
        "content": "ByteBuffer buffer = ByteBuffer.allocate(8);raFile.read(buffer);buffer.position(0);int magic   = buffer.getInt();int version = buffer.getInt();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 11,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 6,
                "lastLine": 10
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:return new DateTime( getLong(), dataType );case SQLTokenizer.UNIQUEIDENTIFIER:return getBytes();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 46,
                "lastLine": 50
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 38,
                "lastLine": 42
            }
        ],
        "window": 5
    },
    {
        "content": "return obj.toBigDecimal();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int)",
                "startLine": 5,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int)",
                "startLine": 5,
                "lastLine": 9
            }
        ],
        "window": 5
    },
    {
        "content": "case SQLTokenizer.UNIQUEIDENTIFIER:return Utils.bytes2unique( page, this.offset);default: throw new Error();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 60,
                "lastLine": 64
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 59,
                "lastLine": 63
            }
        ],
        "window": 5
    },
    {
        "content": "break;case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.LONGNVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 45,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 39,
                "lastLine": 43
            }
        ],
        "window": 5
    },
    {
        "content": "assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 22,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 22,
                "lastLine": 28
            }
        ],
        "window": 6
    },
    {
        "content": "}}Object[][] result = new Object[rows.size()][];rows.toArray(result);return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 28,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)",
                "startLine": 29,
                "lastLine": 34
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getReferenceKeys(smallsql.database.SSConnection,java.lang.String,java.lang.String)",
                "startLine": 35,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 23,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getColumns(smallsql.database.SSConnection,java.lang.String,java.lang.String)",
                "startLine": 33,
                "lastLine": 38
            }
        ],
        "window": 6
    },
    {
        "content": "case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:return new DateTime( getLong(), dataType );case SQLTokenizer.UNIQUEIDENTIFIER:return getBytes();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 45,
                "lastLine": 50
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 37,
                "lastLine": 42
            }
        ],
        "window": 6
    },
    {
        "content": "result = right.first();if(!result){switch(type){case Join.LEFT_JOIN:case Join.FULL_JOIN:isOuterValid = false;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 15,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 52,
                "lastLine": 57
            }
        ],
        "window": 6
    },
    {
        "content": "}finally{dropTable(con1, \"transactions\");con1.setAutoCommit(true);con2.close();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadUncommited()",
                "startLine": 14,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadCommited()",
                "startLine": 14,
                "lastLine": 19
            }
        ],
        "window": 6
    },
    {
        "content": "switch(dataType){case SQLTokenizer.BIT:return (obj.equals(Boolean.TRUE)) ? 1 : 0;case SQLTokenizer.INT:case SQLTokenizer.BIGINT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)",
                "startLine": 2,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)",
                "startLine": 2,
                "lastLine": 7
            }
        ],
        "window": 6
    },
    {
        "content": "System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 40,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 52,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_Scroll_getXXX(java.sql.Connection)",
                "startLine": 38,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 27,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 44,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 25,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteAll(java.sql.Connection)",
                "startLine": 16,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection)",
                "startLine": 23,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 46,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 31,
                "lastLine": 36
            }
        ],
        "window": 6
    },
    {
        "content": "switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return readBoolean() ? 1 : 0;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 7,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 7,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 7,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 7,
                "lastLine": 12
            }
        ],
        "window": 6
    },
    {
        "content": "case OR:case AND:case NOT:case LIKE:case ISNULL:case ISNOTNULL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/isNull()",
                "startLine": 2,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDataType()",
                "startLine": 13,
                "lastLine": 18
            }
        ],
        "window": 6
    },
    {
        "content": "try {dropTable( AllTests.getConnection(), table );} catch (SQLException ex) {ex.printStackTrace();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable2/tearDown()",
                "startLine": 1,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/tearDown()",
                "startLine": 1,
                "lastLine": 6
            }
        ],
        "window": 6
    },
    {
        "content": "case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 31,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 47,
                "lastLine": 52
            }
        ],
        "window": 6
    },
    {
        "content": "createTestDataWithClassicInsert( con );rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 16,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 17,
                "lastLine": 22
            }
        ],
        "window": 6
    },
    {
        "content": "buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 141,
                "lastLine": 146
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 267,
                "lastLine": 272
            }
        ],
        "window": 6
    },
    {
        "content": "wasNull = expr.isNull();return expr.getLong();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getLong(int)",
                "startLine": 3,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDouble(int)",
                "startLine": 3,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getLong(int)",
                "startLine": 3,
                "lastLine": 8
            }
        ],
        "window": 6
    },
    {
        "content": "formatNumber( details.day, 2, buf);buf.append(' ');buf.append( SHORT_MONTHS[ details.month ]);buf.append(' ');formatNumber( details.year, 4, buf);buf.append(' ');",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 187,
                "lastLine": 192
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 258,
                "lastLine": 263
            }
        ],
        "window": 6
    },
    {
        "content": "assertEquals(\"qwert2\", rs.getString(\"v\"));assertFalse( rs.next() );}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 24,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 23,
                "lastLine": 29
            }
        ],
        "window": 6
    },
    {
        "content": "con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con1.setAutoCommit(false);con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");assertTrue( rs2.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadCommited()",
                "startLine": 5,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testReadUncommited()",
                "startLine": 5,
                "lastLine": 12
            }
        ],
        "window": 6
    },
    {
        "content": "oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 19,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 19,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_desc()",
                "startLine": 19,
                "lastLine": 24
            }
        ],
        "window": 6
    },
    {
        "content": "for(int i=0; i<rowCount; i++){fos.write(bytes);}fos.close();java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");long time = -System.currentTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 11,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 11,
                "lastLine": 16
            }
        ],
        "window": 6
    },
    {
        "content": "public void runTest() throws Exception{Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");assertFalse( \"To many rows\", rs.next() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/runTest()",
                "startLine": 0,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 0,
                "lastLine": 6
            }
        ],
        "window": 6
    },
    {
        "content": "rs.insertRow();}time += System.currentTimeMillis();rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();int count = rs.getInt(1);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 14,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertRows(java.sql.Connection)",
                "startLine": 32,
                "lastLine": 37
            }
        ],
        "window": 6
    },
    {
        "content": "pr.setString(  14, \"sysname (30) NULL\" );pr.setString(  15 , \"text NULL\" );pr.setByte  (  16, (byte)28 );pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 28,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 24,
                "lastLine": 29
            }
        ],
        "window": 6
    },
    {
        "content": "case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 15,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getInt()",
                "startLine": 15,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getLong()",
                "startLine": 15,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 15,
                "lastLine": 20
            }
        ],
        "window": 6
    },
    {
        "content": "continue;default:throw new Error();}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionDefList(smallsql.database.Command,smallsql.database.Expressions,smallsql.database.Strings)",
                "startLine": 20,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionParenthesisList(smallsql.database.Command)",
                "startLine": 24,
                "lastLine": 29
            }
        ],
        "window": 6
    },
    {
        "content": "initValue( expr );}else if(!expr.isNull()){switch(dataType){case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 114,
                "lastLine": 119
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 57,
                "lastLine": 62
            }
        ],
        "window": 6
    },
    {
        "content": "break;case SQLTokenizer.VARBINARY:case SQLTokenizer.BINARY:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.UNIQUEIDENTIFIER:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 49,
                "lastLine": 54
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 56,
                "lastLine": 61
            }
        ],
        "window": 6
    },
    {
        "content": "con.rollback(savepoint);throw SmallSQLException.createFromException(e);}finally{if(con.getAutoCommit()) con.commit();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Command/execute(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 5,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/deleteRow(smallsql.database.SSConnection)",
                "startLine": 9,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/insertRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 35,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/updateRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 34,
                "lastLine": 39
            }
        ],
        "window": 6
    },
    {
        "content": "rs.getString(\"v\");fail(\"SQLException 'No current row' should be throw\");}catch(SQLException ex){assertSQLException(\"01000\", 0, ex);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhereAssert(java.sql.ResultSet)",
                "startLine": 7,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhereAssert(java.sql.ResultSet)",
                "startLine": 7,
                "lastLine": 12
            }
        ],
        "window": 6
    },
    {
        "content": "return null;}return node.addRoot(digit);}node = node.addNode(digit);if(node.isEmpty()){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)",
                "startLine": 10,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 13,
                "lastLine": 18
            }
        ],
        "window": 6
    },
    {
        "content": "try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 23,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 20,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 27,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollback()",
                "startLine": 20,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertAndUpdate()",
                "startLine": 38,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCreateTable()",
                "startLine": 26,
                "lastLine": 31
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 23,
                "lastLine": 28
            }
        ],
        "window": 6
    },
    {
        "content": "case SQLTokenizer.DECIMAL:return readNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 32,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 32,
                "lastLine": 37
            }
        ],
        "window": 6
    },
    {
        "content": "}return;}prev = lock;lock = lock.nextLock;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 55,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 28,
                "lastLine": 33
            }
        ],
        "window": 6
    },
    {
        "content": "return page.getValue();elsepage = (IndexNode)page.getValue();}throw new Error();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expressions,boolean,java.util.ArrayList)",
                "startLine": 19,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expression%5B%5D,boolean,java.util.ArrayList)",
                "startLine": 19,
                "lastLine": 24
            }
        ],
        "window": 6
    },
    {
        "content": "try{int maxRows = Integer.parseInt(token.getName(sql));selCmd.setMaxRows(maxRows);}catch(NumberFormatException e){throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/singleSelect()",
                "startLine": 14,
                "lastLine": 19
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/limit(smallsql.database.CommandSelect)",
                "startLine": 2,
                "lastLine": 7
            }
        ],
        "window": 6
    },
    {
        "content": "pr.setBytes (  1, byteArray );pr.setString(  2 , \"Test\" );pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );pr.setFloat (  4, (float)1234.56789 );pr.setFloat (  5 , (float)9876.54321 );pr.setBytes (  6, largeByteArray );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 11,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 15,
                "lastLine": 20
            }
        ],
        "window": 6
    },
    {
        "content": "if(wasNull) return null;return obj.toBigDecimal();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int)",
                "startLine": 4,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int)",
                "startLine": 4,
                "lastLine": 9
            }
        ],
        "window": 6
    },
    {
        "content": "buf.append(' ');formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 218,
                "lastLine": 223
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 279,
                "lastLine": 284
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 232,
                "lastLine": 237
            }
        ],
        "window": 6
    },
    {
        "content": "Connection con = AllTests.getConnection();try{con.setAutoCommit(false);con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 1,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 7,
                "lastLine": 13
            }
        ],
        "window": 6
    },
    {
        "content": "for(int i=0; i<bytes.length; i++){buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );buf.append( digits[ (bytes[i]     ) & 0x0F ] );}return buf.toString();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/bytes2hex(byte%5B%5D)",
                "startLine": 2,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/Utils/bytes2hex(byte%5B%5D)",
                "startLine": 2,
                "lastLine": 7
            }
        ],
        "window": 6
    },
    {
        "content": "wasNull = obj == null;return obj;}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBytes(int)",
                "startLine": 3,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getString(int)",
                "startLine": 3,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getObject(int)",
                "startLine": 3,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBytes(int)",
                "startLine": 3,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getObject(int)",
                "startLine": 3,
                "lastLine": 8
            }
        ],
        "window": 6
    },
    {
        "content": "byte[] buffer = new byte[length];System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );return buffer;}return bytes;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionConvert/getObject()",
                "startLine": 40,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionConvert/getObject()",
                "startLine": 29,
                "lastLine": 35
            }
        ],
        "window": 6
    },
    {
        "content": "assertNull(oldValue);assertTrue( rs.next() );oldValue = rs.getString(\"v\");int count = 1;while(rs.next()){String newValue = rs.getString(\"v\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 12,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 12,
                "lastLine": 18
            }
        ],
        "window": 6
    },
    {
        "content": "if(lock.con != con) return null;}}tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 34,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 52,
                "lastLine": 57
            }
        ],
        "window": 6
    },
    {
        "content": "case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:case SQLTokenizer.TINYINT:offset++;break;case SQLTokenizer.SMALLINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 17,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 7,
                "lastLine": 12
            }
        ],
        "window": 6
    },
    {
        "content": "}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withRightWhere()",
                "startLine": 22,
                "lastLine": 27
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 26,
                "lastLine": 31
            }
        ],
        "window": 6
    },
    {
        "content": "raFile = Utils.openRaFile( file, database.isReadOnly() );ByteBuffer buffer = ByteBuffer.allocate(8);raFile.read(buffer);buffer.position(0);int magic   = buffer.getInt();int version = buffer.getInt();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 10,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 5,
                "lastLine": 10
            }
        ],
        "window": 6
    },
    {
        "content": "if(num.scale < scale){num.setScale(scale);}elseif(num.scale > scale){setScale(num.scale);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/sub(smallsql.database.MutableNumeric)",
                "startLine": 5,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/MutableNumeric/add(smallsql.database.MutableNumeric)",
                "startLine": 5,
                "lastLine": 10
            }
        ],
        "window": 6
    },
    {
        "content": "(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),scroll, level));continue;}elsereturn getReturnValue(status.nodeValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 28,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 59,
                "lastLine": 64
            }
        ],
        "window": 6
    },
    {
        "content": "keyColumnNames.add(column.getName());keys.add(valueExpress.getObject());break;}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/CommandInsert/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 53,
                "lastLine": 58
            },
            {
                "locFile": "java+method:///smallsql/database/CommandInsert/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 43,
                "lastLine": 48
            }
        ],
        "window": 6
    },
    {
        "content": "assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );pr.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 85,
                "lastLine": 90
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 64,
                "lastLine": 69
            }
        ],
        "window": 6
    },
    {
        "content": "}listEnum.offsetStack[listEnum.stack] = offset+pointerSize;offset = getPointer();shift -= 16;listEnum.stack++;listEnum.resultStack[listEnum.stack] = result;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 25,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 19,
                "lastLine": 24
            }
        ],
        "window": 6
    },
    {
        "content": "con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");assertRowCount( 0, \"Select * from Scrollable\");con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");assertRowCount( 1, \"Select * from Scrollable\");assertRowCount( 0, \"Select * from Scrollable Where 1=0\");Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhere()",
                "startLine": 3,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhere()",
                "startLine": 3,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testLastWithWhere()",
                "startLine": 3,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testNextWithWhere()",
                "startLine": 3,
                "lastLine": 10
            }
        ],
        "window": 6
    },
    {
        "content": "if(wasNull) return null;return DateTime.getTime( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTime(int)",
                "startLine": 4,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTime(int)",
                "startLine": 4,
                "lastLine": 9
            }
        ],
        "window": 6
    },
    {
        "content": "return false;}}}return true;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SortedResult/relative(int)",
                "startLine": 11,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/absolute(int)",
                "startLine": 13,
                "lastLine": 18
            }
        ],
        "window": 6
    },
    {
        "content": "value /= factor;}else{value *= factor;}return value;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 18,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 18,
                "lastLine": 23
            }
        ],
        "window": 6
    },
    {
        "content": "assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 36,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 34,
                "lastLine": 40
            }
        ],
        "window": 6
    },
    {
        "content": "formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 205,
                "lastLine": 210
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 282,
                "lastLine": 287
            }
        ],
        "window": 6
    },
    {
        "content": "formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append('.');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 235,
                "lastLine": 240
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 251,
                "lastLine": 256
            }
        ],
        "window": 6
    },
    {
        "content": "case SQLTokenizer.BIGINT:return readLong();case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 20,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 20,
                "lastLine": 25
            }
        ],
        "window": 6
    },
    {
        "content": "wasNull = expr.isNull();return expr.getBoolean();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBoolean(int)",
                "startLine": 3,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBoolean(int)",
                "startLine": 3,
                "lastLine": 8
            }
        ],
        "window": 6
    },
    {
        "content": "while(rs.next()){String newValue = rs.getString(\"v\");assertTrue( oldValue.compareTo( newValue ) < 0 );oldValue = newValue;count++;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 17,
                "lastLine": 22
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testUnion()",
                "startLine": 23,
                "lastLine": 28
            }
        ],
        "window": 6
    },
    {
        "content": "Statement st = con.createStatement();st.execute(\"drop table \" + table);st.close();}catch(Throwable e){}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/tearDown()",
                "startLine": 3,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/tearDown()",
                "startLine": 3,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/tearDown()",
                "startLine": 3,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/tearDown()",
                "startLine": 3,
                "lastLine": 9
            }
        ],
        "window": 6
    },
    {
        "content": "if(wasNull) return null;return obj.toBigDecimal(scale);}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int,int)",
                "startLine": 4,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int,int)",
                "startLine": 4,
                "lastLine": 9
            }
        ],
        "window": 6
    },
    {
        "content": "if(wasNull) return null;return DateTime.getTimestamp( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTimestamp(int)",
                "startLine": 4,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTimestamp(int)",
                "startLine": 4,
                "lastLine": 9
            }
        ],
        "window": 6
    },
    {
        "content": "final byte[] getBytes() throws Exception{if(isNull()) return null;byte[] bytes = param1.getBytes();int length = param2.getInt();if(bytes.length <= length) return bytes;byte[] b = new byte[length];",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionLeft/getBytes()",
                "startLine": 0,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRight/getBytes()",
                "startLine": 0,
                "lastLine": 6
            }
        ],
        "window": 6
    },
    {
        "content": "if(wasNull) return null;return DateTime.getDate( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDate(int)",
                "startLine": 4,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDate(int)",
                "startLine": 4,
                "lastLine": 9
            }
        ],
        "window": 6
    },
    {
        "content": "TestValue value = new TestValue();value.dataType  = dataType;value.small     = small;value.large     = large;return value;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/a(java.lang.String,java.lang.Object,java.lang.Object)",
                "startLine": 1,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/a(java.lang.String,java.lang.Object,java.lang.Object)",
                "startLine": 1,
                "lastLine": 6
            }
        ],
        "window": 6
    },
    {
        "content": "assertSQLException(\"01000\", 0, e);}}finally{dropTable(con, \"DuplicatedColumn\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnAlter()",
                "startLine": 9,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnInsert()",
                "startLine": 9,
                "lastLine": 14
            }
        ],
        "window": 6
    },
    {
        "content": "}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 43,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 45,
                "lastLine": 51
            }
        ],
        "window": 6
    },
    {
        "content": "wasNull = expr.isNull();return expr.getInt();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getInt(int)",
                "startLine": 3,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getInt(int)",
                "startLine": 3,
                "lastLine": 8
            }
        ],
        "window": 6
    },
    {
        "content": "wasNull = expr.isNull();return expr.getFloat();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getFloat(int)",
                "startLine": 3,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getFloat(int)",
                "startLine": 3,
                "lastLine": 8
            }
        ],
        "window": 6
    },
    {
        "content": "case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 27,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 27,
                "lastLine": 32
            }
        ],
        "window": 6
    },
    {
        "content": "case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 32,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 38,
                "lastLine": 43
            }
        ],
        "window": 6
    },
    {
        "content": "assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");assertRowCount( 1, \"Select * from transactions\");con.setAutoCommit(false);con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 7,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 7,
                "lastLine": 14
            }
        ],
        "window": 6
    },
    {
        "content": "oldValue = newValue;count++;}rs.close();assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_char()",
                "startLine": 20,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 20,
                "lastLine": 25
            }
        ],
        "window": 6
    },
    {
        "content": "case SQLTokenizer.BOOLEAN:return (obj == Boolean.TRUE) ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:case SQLTokenizer.BIGINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 4,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 4,
                "lastLine": 9
            }
        ],
        "window": 6
    },
    {
        "content": "}}finally {conn.close();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testLocalizedErrors()",
                "startLine": 28,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/TestLanguage/testSyntaxErrors()",
                "startLine": 33,
                "lastLine": 38
            }
        ],
        "window": 6
    },
    {
        "content": "formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 219,
                "lastLine": 224
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 124,
                "lastLine": 129
            }
        ],
        "window": 6
    },
    {
        "content": "case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 41,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 42,
                "lastLine": 47
            }
        ],
        "window": 6
    },
    {
        "content": "firstNode = false;if(shift != 0) offset += pointerSize;}shift -= 16;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/remove(long)",
                "startLine": 55,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/add(long)",
                "startLine": 47,
                "lastLine": 52
            }
        ],
        "window": 6
    },
    {
        "content": "case GREATER:   return comp >  0;case GRE_EQU:   return comp >= 0;case LESSER:    return comp <  0;case LES_EQU:   return comp <= 0;case UNEQUALS:  return comp != 0;case BETWEEN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 130,
                "lastLine": 135
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 177,
                "lastLine": 182
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 155,
                "lastLine": 160
            }
        ],
        "window": 6
    },
    {
        "content": "String tableName = tables.get(t);TableView tab = getTableView( con, tableName);if(!(tab instanceof Table)) continue;IndexDescriptions indexes = ((Table)tab).indexes;for(int i=0; i<indexes.size(); i++){IndexDescription index = indexes.get(i);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 4,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)",
                "startLine": 5,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 4,
                "lastLine": 9
            }
        ],
        "window": 6
    },
    {
        "content": "pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 29,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 21,
                "lastLine": 27
            }
        ],
        "window": 6
    },
    {
        "content": "}batches.clear();if(failed != null)throw failed;return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/executeBatch()",
                "startLine": 20,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SSStatement/executeBatch()",
                "startLine": 16,
                "lastLine": 21
            }
        ],
        "window": 6
    },
    {
        "content": "st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");for(int i = 0; i < 200; i++){Thread thread = new Thread(new Runnable(){public void run(){try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 12,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 12,
                "lastLine": 20
            }
        ],
        "window": 6
    },
    {
        "content": "}catch(Exception e2){DriverManager.println(e2.toString());}throw SmallSQLException.createFromException(e);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 34,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 22,
                "lastLine": 27
            }
        ],
        "window": 6
    },
    {
        "content": "return readTime();case SQLTokenizer.DATE:return readDate();case SQLTokenizer.SMALLDATETIME:return readSmallDateTime();default:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 54,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 54,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 54,
                "lastLine": 59
            }
        ],
        "window": 6
    },
    {
        "content": "assertEquals(1,pr.executeUpdate());rs = pr.getGeneratedKeys();assertNotNull(\"RETURN_GENERATED_KEYS\", rs);assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));assertRowCount(1,rs);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 40,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 25,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/TestStatement/testGeneratedKeysWithPrepare()",
                "startLine": 55,
                "lastLine": 60
            }
        ],
        "window": 6
    },
    {
        "content": "assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );oldValue = (Integer)rs.getObject(\"i\");count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 18,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 18,
                "lastLine": 23
            }
        ],
        "window": 6
    },
    {
        "content": "}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 10,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 10,
                "lastLine": 15
            }
        ],
        "window": 6
    },
    {
        "content": "rs.beforeFirst();assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"next\", rs.next() );assertTrue(\"isFirst\", rs.isFirst() );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 10,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 12,
                "lastLine": 17
            }
        ],
        "window": 6
    },
    {
        "content": "prev.nextLock = lock.nextLock;}return;}prev = lock;lock = lock.nextLock;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 54,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 27,
                "lastLine": 33
            }
        ],
        "window": 7
    },
    {
        "content": "}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 39,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 51,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_Scroll_getXXX(java.sql.Connection)",
                "startLine": 37,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 26,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 43,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 24,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteAll(java.sql.Connection)",
                "startLine": 15,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection)",
                "startLine": 22,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 45,
                "lastLine": 51
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 30,
                "lastLine": 36
            }
        ],
        "window": 7
    },
    {
        "content": "byte bytes[] = new byte[1024];for(int i=0; i<rowCount; i++){fos.write(bytes);}fos.close();java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");long time = -System.currentTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 10,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 10,
                "lastLine": 16
            }
        ],
        "window": 7
    },
    {
        "content": "raFile.close();}catch(Exception e2){DriverManager.println(e2.toString());}throw SmallSQLException.createFromException(e);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 33,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 21,
                "lastLine": 27
            }
        ],
        "window": 7
    },
    {
        "content": "}}}Object[][] result = new Object[rows.size()][];rows.toArray(result);return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 27,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)",
                "startLine": 28,
                "lastLine": 34
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getReferenceKeys(smallsql.database.SSConnection,java.lang.String,java.lang.String)",
                "startLine": 34,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 22,
                "lastLine": 28
            }
        ],
        "window": 7
    },
    {
        "content": "throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 42,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 44,
                "lastLine": 51
            }
        ],
        "window": 7
    },
    {
        "content": "case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 30,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 46,
                "lastLine": 52
            }
        ],
        "window": 7
    },
    {
        "content": "assertFalse( rs.next() );}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withRightWhere()",
                "startLine": 21,
                "lastLine": 27
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 24,
                "lastLine": 31
            }
        ],
        "window": 7
    },
    {
        "content": "try{con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");assertRowCount( 0, \"Select * from Scrollable\");con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");assertRowCount( 1, \"Select * from Scrollable\");assertRowCount( 0, \"Select * from Scrollable Where 1=0\");Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhere()",
                "startLine": 2,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhere()",
                "startLine": 2,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testLastWithWhere()",
                "startLine": 2,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testNextWithWhere()",
                "startLine": 2,
                "lastLine": 10
            }
        ],
        "window": 7
    },
    {
        "content": "for(int t=0; t<tables.size(); t++){String tableName = tables.get(t);TableView tab = getTableView( con, tableName);if(!(tab instanceof Table)) continue;IndexDescriptions indexes = ((Table)tab).indexes;for(int i=0; i<indexes.size(); i++){IndexDescription index = indexes.get(i);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 3,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)",
                "startLine": 4,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 3,
                "lastLine": 9
            }
        ],
        "window": 7
    },
    {
        "content": "case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 40,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 41,
                "lastLine": 47
            }
        ],
        "window": 7
    },
    {
        "content": "wasNull = expr.isNull();if(wasNull) return null;return DateTime.getTimestamp( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTimestamp(int)",
                "startLine": 3,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTimestamp(int)",
                "startLine": 3,
                "lastLine": 9
            }
        ],
        "window": 7
    },
    {
        "content": "oldValue = rs.getString(\"v\");assertNull(oldValue);assertTrue( rs.next() );oldValue = rs.getString(\"v\");int count = 1;while(rs.next()){String newValue = rs.getString(\"v\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 11,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 11,
                "lastLine": 18
            }
        ],
        "window": 7
    },
    {
        "content": "case SQLTokenizer.BIGINT:case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 31,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 37,
                "lastLine": 43
            }
        ],
        "window": 7
    },
    {
        "content": "if(i + 1 == count)return page.getValue();elsepage = (IndexNode)page.getValue();}throw new Error();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expressions,boolean,java.util.ArrayList)",
                "startLine": 18,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expression%5B%5D,boolean,java.util.ArrayList)",
                "startLine": 18,
                "lastLine": 24
            }
        ],
        "window": 7
    },
    {
        "content": "}catch(SQLException e){assertSQLException(\"01000\", 0, e);}}finally{dropTable(con, \"DuplicatedColumn\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnAlter()",
                "startLine": 8,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnInsert()",
                "startLine": 8,
                "lastLine": 14
            }
        ],
        "window": 7
    },
    {
        "content": "}catch(Throwable e){con.rollback(savepoint);throw SmallSQLException.createFromException(e);}finally{if(con.getAutoCommit()) con.commit();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Command/execute(smallsql.database.SSConnection,smallsql.database.SSStatement)",
                "startLine": 4,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/deleteRow(smallsql.database.SSConnection)",
                "startLine": 8,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/insertRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 34,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/CommandSelect/updateRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)",
                "startLine": 33,
                "lastLine": 39
            }
        ],
        "window": 7
    },
    {
        "content": "while(rs.next()){assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );oldValue = (Integer)rs.getObject(\"i\");count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 17,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 17,
                "lastLine": 23
            }
        ],
        "window": 7
    },
    {
        "content": "formatNumber( details.day, 2, buf);buf.append(' ');formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 217,
                "lastLine": 223
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 231,
                "lastLine": 237
            }
        ],
        "window": 7
    },
    {
        "content": "wasNull = obj == null;if(wasNull) return null;return obj.toBigDecimal();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int)",
                "startLine": 3,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int)",
                "startLine": 3,
                "lastLine": 9
            }
        ],
        "window": 7
    },
    {
        "content": "pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 27,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 19,
                "lastLine": 27
            }
        ],
        "window": 7
    },
    {
        "content": "pr.setFloat (  13, (float)34.56 );pr.setString(  14, \"sysname (30) NULL\" );pr.setString(  15 , \"text NULL\" );pr.setByte  (  16, (byte)28 );pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 27,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 23,
                "lastLine": 29
            }
        ],
        "window": 7
    },
    {
        "content": "wasNull = expr.isNull();if(wasNull) return null;return DateTime.getDate( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDate(int)",
                "startLine": 3,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getDate(int)",
                "startLine": 3,
                "lastLine": 9
            }
        ],
        "window": 7
    },
    {
        "content": "formatNumber( details.day, 2, buf);buf.append(' ');formatNumber( details.year, 4, buf);buf.append(' ');formatHour12( details.hour, buf );buf.append(':');formatNumber( details.minute, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 134,
                "lastLine": 140
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 13,
                "lastLine": 19
            }
        ],
        "window": 7
    },
    {
        "content": "case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return (obj == Boolean.TRUE) ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:case SQLTokenizer.BIGINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 3,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 3,
                "lastLine": 9
            }
        ],
        "window": 7
    },
    {
        "content": "value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 9,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 9,
                "lastLine": 15
            }
        ],
        "window": 7
    },
    {
        "content": "wasNull = obj == null;if(wasNull) return null;return obj.toBigDecimal(scale);}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getBigDecimal(int,int)",
                "startLine": 3,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int,int)",
                "startLine": 3,
                "lastLine": 9
            }
        ],
        "window": 7
    },
    {
        "content": "StringBuffer buf = new StringBuffer(bytes.length << 1);for(int i=0; i<bytes.length; i++){buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );buf.append( digits[ (bytes[i]     ) & 0x0F ] );}return buf.toString();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BasicTestCase/bytes2hex(byte%5B%5D)",
                "startLine": 1,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/Utils/bytes2hex(byte%5B%5D)",
                "startLine": 1,
                "lastLine": 7
            }
        ],
        "window": 7
    },
    {
        "content": "return result;}listEnum.offsetStack[listEnum.stack] = offset+pointerSize;offset = getPointer();shift -= 16;listEnum.stack++;listEnum.resultStack[listEnum.stack] = result;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 24,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 18,
                "lastLine": 24
            }
        ],
        "window": 7
    },
    {
        "content": "}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 22,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 19,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 26,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollback()",
                "startLine": 19,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertAndUpdate()",
                "startLine": 37,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 22,
                "lastLine": 28
            }
        ],
        "window": 7
    },
    {
        "content": "node.addNode( digit, rowOffset );return null;}return node.addRoot(digit);}node = node.addNode(digit);if(node.isEmpty()){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)",
                "startLine": 9,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)",
                "startLine": 12,
                "lastLine": 18
            }
        ],
        "window": 7
    },
    {
        "content": "assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 35,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 33,
                "lastLine": 40
            }
        ],
        "window": 7
    },
    {
        "content": "if(obj == null) return 0;switch(dataType){case SQLTokenizer.BIT:return (obj.equals(Boolean.TRUE)) ? 1 : 0;case SQLTokenizer.INT:case SQLTokenizer.BIGINT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)",
                "startLine": 1,
                "lastLine": 7
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)",
                "startLine": 1,
                "lastLine": 7
            }
        ],
        "window": 7
    },
    {
        "content": "return readInt();case SQLTokenizer.BIGINT:return readLong();case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 19,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 19,
                "lastLine": 25
            }
        ],
        "window": 7
    },
    {
        "content": "while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 21,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 21,
                "lastLine": 28
            }
        ],
        "window": 7
    },
    {
        "content": "try{rs.getString(\"v\");fail(\"SQLException 'No current row' should be throw\");}catch(SQLException ex){assertSQLException(\"01000\", 0, ex);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhereAssert(java.sql.ResultSet)",
                "startLine": 6,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhereAssert(java.sql.ResultSet)",
                "startLine": 6,
                "lastLine": 12
            }
        ],
        "window": 7
    },
    {
        "content": "}firstNode = false;if(shift != 0) offset += pointerSize;}shift -= 16;}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/remove(long)",
                "startLine": 54,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/add(long)",
                "startLine": 46,
                "lastLine": 52
            }
        ],
        "window": 7
    },
    {
        "content": "assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );pr.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 84,
                "lastLine": 90
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 63,
                "lastLine": 69
            }
        ],
        "window": 7
    },
    {
        "content": "con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");assertRowCount( 1, \"Select * from transactions\");con.setAutoCommit(false);con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 6,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 6,
                "lastLine": 14
            }
        ],
        "window": 7
    },
    {
        "content": "formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 140,
                "lastLine": 146
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 266,
                "lastLine": 272
            }
        ],
        "window": 7
    },
    {
        "content": "public void tearDown(){try {dropTable( AllTests.getConnection(), table );} catch (SQLException ex) {ex.printStackTrace();}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable2/tearDown()",
                "startLine": 0,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestAlterTable/tearDown()",
                "startLine": 0,
                "lastLine": 6
            }
        ],
        "window": 7
    },
    {
        "content": "return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 14,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 14,
                "lastLine": 20
            }
        ],
        "window": 7
    },
    {
        "content": "private static TestValue a(String dataType, Object small, Object large){TestValue value = new TestValue();value.dataType  = dataType;value.small     = small;value.large     = large;return value;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/a(java.lang.String,java.lang.Object,java.lang.Object)",
                "startLine": 0,
                "lastLine": 6
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/a(java.lang.String,java.lang.Object,java.lang.Object)",
                "startLine": 0,
                "lastLine": 6
            }
        ],
        "window": 7
    },
    {
        "content": "assertTrue( rs.next() );assertEquals(\"qwert2\", rs.getString(\"v\"));assertFalse( rs.next() );}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 23,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 22,
                "lastLine": 29
            }
        ],
        "window": 7
    },
    {
        "content": "return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 26,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 26,
                "lastLine": 32
            }
        ],
        "window": 7
    },
    {
        "content": "if (count == 0){createTestDataWithClassicInsert( con );rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 15,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 16,
                "lastLine": 22
            }
        ],
        "window": 7
    },
    {
        "content": "if(result){result = right.first();if(!result){switch(type){case Join.LEFT_JOIN:case Join.FULL_JOIN:isOuterValid = false;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 14,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 51,
                "lastLine": 57
            }
        ],
        "window": 7
    },
    {
        "content": "}}batches.clear();if(failed != null)throw failed;return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/executeBatch()",
                "startLine": 19,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SSStatement/executeBatch()",
                "startLine": 15,
                "lastLine": 21
            }
        ],
        "window": 7
    },
    {
        "content": "Connection con = AllTests.getConnection();Statement st = con.createStatement();st.execute(\"drop table \" + table);st.close();}catch(Throwable e){}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/tearDown()",
                "startLine": 2,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/tearDown()",
                "startLine": 2,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/tearDown()",
                "startLine": 2,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/tearDown()",
                "startLine": 2,
                "lastLine": 9
            }
        ],
        "window": 7
    },
    {
        "content": "TableStorePage lock = (TableStorePage)values.next();if(lock.con != con) return null;}}tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 33,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 51,
                "lastLine": 57
            }
        ],
        "window": 7
    },
    {
        "content": "wasNull = expr.isNull();if(wasNull) return null;return DateTime.getTime( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getTime(int)",
                "startLine": 3,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/SSResultSet/getTime(int)",
                "startLine": 3,
                "lastLine": 9
            }
        ],
        "window": 7
    },
    {
        "content": "case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:return new DateTime( getLong(), dataType );case SQLTokenizer.UNIQUEIDENTIFIER:return getBytes();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 44,
                "lastLine": 50
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 36,
                "lastLine": 42
            }
        ],
        "window": 7
    },
    {
        "content": "}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 18,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 18,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_desc()",
                "startLine": 18,
                "lastLine": 24
            }
        ],
        "window": 7
    },
    {
        "content": "buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 204,
                "lastLine": 210
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 281,
                "lastLine": 287
            }
        ],
        "window": 7
    },
    {
        "content": "buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append('.');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 234,
                "lastLine": 240
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 250,
                "lastLine": 256
            }
        ],
        "window": 7
    },
    {
        "content": "Expression expr = getValue(i);wasNull = expr.isNull();return expr.getLong();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDouble(int)",
                "startLine": 2,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getLong(int)",
                "startLine": 2,
                "lastLine": 8
            }
        ],
        "window": 7
    },
    {
        "content": "try{st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");for(int i = 0; i < 200; i++){Thread thread = new Thread(new Runnable(){public void run(){try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 11,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 11,
                "lastLine": 20
            }
        ],
        "window": 7
    },
    {
        "content": "if(readBoolean()) return 0;switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return readBoolean() ? 1 : 0;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 6,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 6,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 6,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 6,
                "lastLine": 12
            }
        ],
        "window": 7
    },
    {
        "content": "if(places > 0){value /= factor;}else{value *= factor;}return value;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 17,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 17,
                "lastLine": 23
            }
        ],
        "window": 7
    },
    {
        "content": "case SQLTokenizer.TIME:return readTime();case SQLTokenizer.DATE:return readDate();case SQLTokenizer.SMALLDATETIME:return readSmallDateTime();default:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 53,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 53,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 53,
                "lastLine": 59
            }
        ],
        "window": 7
    },
    {
        "content": "case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return readNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 31,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getNumeric(int,int)",
                "startLine": 31,
                "lastLine": 37
            }
        ],
        "window": 7
    },
    {
        "content": "new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),scroll, level));continue;}elsereturn getReturnValue(status.nodeValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 27,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 58,
                "lastLine": 64
            }
        ],
        "window": 7
    },
    {
        "content": "if(!previous()){return false;}}}return true;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SortedResult/relative(int)",
                "startLine": 10,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/database/SortedResult/absolute(int)",
                "startLine": 12,
                "lastLine": 18
            }
        ],
        "window": 7
    },
    {
        "content": "case EQUALS:    return comp == 0;case GREATER:   return comp >  0;case GRE_EQU:   return comp >= 0;case LESSER:    return comp <  0;case LES_EQU:   return comp <= 0;case UNEQUALS:  return comp != 0;case BETWEEN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 129,
                "lastLine": 135
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 176,
                "lastLine": 182
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 154,
                "lastLine": 160
            }
        ],
        "window": 7
    },
    {
        "content": "elseinitValue( expr );}else if(!expr.isNull()){switch(dataType){case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 113,
                "lastLine": 119
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 56,
                "lastLine": 62
            }
        ],
        "window": 7
    },
    {
        "content": "case SQLTokenizer.COMMA:continue;default:throw new Error();}}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionDefList(smallsql.database.Command,smallsql.database.Expressions,smallsql.database.Strings)",
                "startLine": 19,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SQLParser/expressionParenthesisList(smallsql.database.Command)",
                "startLine": 23,
                "lastLine": 29
            }
        ],
        "window": 7
    },
    {
        "content": "}}}}Object[][] result = new Object[rows.size()][];rows.toArray(result);return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 26,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getReferenceKeys(smallsql.database.SSConnection,java.lang.String,java.lang.String)",
                "startLine": 33,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 21,
                "lastLine": 28
            }
        ],
        "window": 8
    },
    {
        "content": "pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 26,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 18,
                "lastLine": 27
            }
        ],
        "window": 8
    },
    {
        "content": "Statement st = con.createStatement();try{st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");for(int i = 0; i < 200; i++){Thread thread = new Thread(new Runnable(){public void run(){try{",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 10,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 10,
                "lastLine": 20
            }
        ],
        "window": 8
    },
    {
        "content": "case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 39,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 40,
                "lastLine": 47
            }
        ],
        "window": 8
    },
    {
        "content": "Strings tables = getTables(table);for(int t=0; t<tables.size(); t++){String tableName = tables.get(t);TableView tab = getTableView( con, tableName);if(!(tab instanceof Table)) continue;IndexDescriptions indexes = ((Table)tab).indexes;for(int i=0; i<indexes.size(); i++){IndexDescription index = indexes.get(i);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 2,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 2,
                "lastLine": 9
            }
        ],
        "window": 8
    },
    {
        "content": "if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 41,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 43,
                "lastLine": 51
            }
        ],
        "window": 8
    },
    {
        "content": "nodeStack.push(new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),scroll, level));continue;}elsereturn getReturnValue(status.nodeValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 26,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 57,
                "lastLine": 64
            }
        ],
        "window": 8
    },
    {
        "content": "case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 29,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 45,
                "lastLine": 52
            }
        ],
        "window": 8
    },
    {
        "content": "switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return (obj == Boolean.TRUE) ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:case SQLTokenizer.BIGINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 2,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 2,
                "lastLine": 9
            }
        ],
        "window": 8
    },
    {
        "content": "rs.beforeFirst();assertTrue( rs.next() );assertEquals(\"qwert2\", rs.getString(\"v\"));assertFalse( rs.next() );}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_withWrongWhere()",
                "startLine": 22,
                "lastLine": 29
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)",
                "startLine": 21,
                "lastLine": 29
            }
        ],
        "window": 8
    },
    {
        "content": "case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 25,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 25,
                "lastLine": 32
            }
        ],
        "window": 8
    },
    {
        "content": "pr.setShort (  12, (short)23456 );pr.setFloat (  13, (float)34.56 );pr.setString(  14, \"sysname (30) NULL\" );pr.setString(  15 , \"text NULL\" );pr.setByte  (  16, (byte)28 );pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 26,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 22,
                "lastLine": 29
            }
        ],
        "window": 8
    },
    {
        "content": "failed.setNextException(ex);}}batches.clear();if(failed != null)throw failed;return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/executeBatch()",
                "startLine": 18,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SSStatement/executeBatch()",
                "startLine": 14,
                "lastLine": 21
            }
        ],
        "window": 8
    },
    {
        "content": "count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 17,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 17,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_desc()",
                "startLine": 17,
                "lastLine": 24
            }
        ],
        "window": 8
    },
    {
        "content": "}else{prev.nextLock = lock.nextLock;}return;}prev = lock;lock = lock.nextLock;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 52,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 25,
                "lastLine": 33
            }
        ],
        "window": 8
    },
    {
        "content": "int count = 1;while(rs.next()){assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );oldValue = (Integer)rs.getObject(\"i\");count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 16,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 16,
                "lastLine": 23
            }
        ],
        "window": 8
    },
    {
        "content": "st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 50,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_Scroll_getXXX(java.sql.Connection)",
                "startLine": 36,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 42,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 23,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteAll(java.sql.Connection)",
                "startLine": 14,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection)",
                "startLine": 21,
                "lastLine": 28
            }
        ],
        "window": 8
    },
    {
        "content": "case SQLTokenizer.INT:return readInt();case SQLTokenizer.BIGINT:return readLong();case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 18,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 18,
                "lastLine": 25
            }
        ],
        "window": 8
    },
    {
        "content": "try{Connection con = AllTests.getConnection();Statement st = con.createStatement();st.execute(\"drop table \" + table);st.close();}catch(Throwable e){}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/tearDown()",
                "startLine": 1,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/tearDown()",
                "startLine": 1,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/tearDown()",
                "startLine": 1,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/tearDown()",
                "startLine": 1,
                "lastLine": 9
            }
        ],
        "window": 8
    },
    {
        "content": "this.offset = valueOffset;if(readBoolean()) return 0;switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return readBoolean() ? 1 : 0;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getInt(int,int)",
                "startLine": 5,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 5,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 5,
                "lastLine": 12
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 5,
                "lastLine": 12
            }
        ],
        "window": 8
    },
    {
        "content": "assertTrue( rs.next() );oldValue = rs.getString(\"v\");assertNull(oldValue);assertTrue( rs.next() );oldValue = rs.getString(\"v\");int count = 1;while(rs.next()){String newValue = rs.getString(\"v\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar()",
                "startLine": 9,
                "lastLine": 18
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_asc()",
                "startLine": 9,
                "lastLine": 18
            }
        ],
        "window": 8
    },
    {
        "content": "return null;if(i + 1 == count)return page.getValue();elsepage = (IndexNode)page.getValue();}throw new Error();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expressions,boolean,java.util.ArrayList)",
                "startLine": 17,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expression%5B%5D,boolean,java.util.ArrayList)",
                "startLine": 17,
                "lastLine": 24
            }
        ],
        "window": 8
    },
    {
        "content": "rs = pr.executeQuery();assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );pr.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 83,
                "lastLine": 90
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 62,
                "lastLine": 69
            }
        ],
        "window": 8
    },
    {
        "content": "try{raFile.close();}catch(Exception e2){DriverManager.println(e2.toString());}throw SmallSQLException.createFromException(e);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 32,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 20,
                "lastLine": 27
            }
        ],
        "window": 8
    },
    {
        "content": "dataType = expr.getDataType();elseinitValue( expr );}else if(!expr.isNull()){switch(dataType){case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 112,
                "lastLine": 119
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 55,
                "lastLine": 62
            }
        ],
        "window": 8
    },
    {
        "content": "pr.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 38,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 44,
                "lastLine": 51
            }
        ],
        "window": 8
    },
    {
        "content": "listEnum.offsetStack[listEnum.stack] = offset;return result;}listEnum.offsetStack[listEnum.stack] = offset+pointerSize;offset = getPointer();shift -= 16;listEnum.stack++;listEnum.resultStack[listEnum.stack] = result;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 23,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 17,
                "lastLine": 24
            }
        ],
        "window": 8
    },
    {
        "content": "count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 20,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 20,
                "lastLine": 28
            }
        ],
        "window": 8
    },
    {
        "content": "case EQUALS_NULL:case EQUALS:    return comp == 0;case GREATER:   return comp >  0;case GRE_EQU:   return comp >= 0;case LESSER:    return comp <  0;case LES_EQU:   return comp <= 0;case UNEQUALS:  return comp != 0;case BETWEEN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 128,
                "lastLine": 135
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 175,
                "lastLine": 182
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 153,
                "lastLine": 160
            }
        ],
        "window": 8
    },
    {
        "content": "if (count != rowCount){if (count == 0){createTestDataWithClassicInsert( con );rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 13,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 14,
                "lastLine": 22
            }
        ],
        "window": 8
    },
    {
        "content": "buf.append('-');formatNumber( details.day, 2, buf);buf.append(' ');formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 216,
                "lastLine": 223
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 230,
                "lastLine": 237
            }
        ],
        "window": 8
    },
    {
        "content": "buf.append(' ');formatNumber( details.day, 2, buf);buf.append(' ');formatNumber( details.year, 4, buf);buf.append(' ');formatHour12( details.hour, buf );buf.append(':');formatNumber( details.minute, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 133,
                "lastLine": 140
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 12,
                "lastLine": 19
            }
        ],
        "window": 8
    },
    {
        "content": "Connection con = AllTests.getConnection();try{con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");assertRowCount( 0, \"Select * from Scrollable\");con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");assertRowCount( 1, \"Select * from Scrollable\");assertRowCount( 0, \"Select * from Scrollable Where 1=0\");Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testFirstWithWhere()",
                "startLine": 1,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testPreviousWithWhere()",
                "startLine": 1,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testLastWithWhere()",
                "startLine": 1,
                "lastLine": 10
            },
            {
                "locFile": "java+method:///smallsql/junit/TestScrollable/testNextWithWhere()",
                "startLine": 1,
                "lastLine": 10
            }
        ],
        "window": 8
    },
    {
        "content": "return readTimestamp();case SQLTokenizer.TIME:return readTime();case SQLTokenizer.DATE:return readDate();case SQLTokenizer.SMALLDATETIME:return readSmallDateTime();default:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 52,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 52,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 52,
                "lastLine": 59
            }
        ],
        "window": 8
    },
    {
        "content": "java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");byte bytes[] = new byte[1024];for(int i=0; i<rowCount; i++){fos.write(bytes);}fos.close();java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");long time = -System.currentTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 9,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 9,
                "lastLine": 16
            }
        ],
        "window": 8
    },
    {
        "content": "assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 34,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 32,
                "lastLine": 40
            }
        ],
        "window": 8
    },
    {
        "content": "return getBytes();case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:return new DateTime( getLong(), dataType );case SQLTokenizer.UNIQUEIDENTIFIER:return getBytes();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 43,
                "lastLine": 50
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 35,
                "lastLine": 42
            }
        ],
        "window": 8
    },
    {
        "content": "result = left.next();if(result){result = right.first();if(!result){switch(type){case Join.LEFT_JOIN:case Join.FULL_JOIN:isOuterValid = false;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 13,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/JoinScroll/next()",
                "startLine": 50,
                "lastLine": 57
            }
        ],
        "window": 8
    },
    {
        "content": "fail(\"SQLException 'Duplicated Column' should be throw\");}catch(SQLException e){assertSQLException(\"01000\", 0, e);}}finally{dropTable(con, \"DuplicatedColumn\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnAlter()",
                "startLine": 7,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestExceptionMethods/testDuplicatedColumnInsert()",
                "startLine": 7,
                "lastLine": 14
            }
        ],
        "window": 8
    },
    {
        "content": "try{con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");assertRowCount( 1, \"Select * from transactions\");con.setAutoCommit(false);con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 5,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 5,
                "lastLine": 14
            }
        ],
        "window": 8
    },
    {
        "content": "file.delete();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 25,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 29,
                "lastLine": 36
            }
        ],
        "window": 8
    },
    {
        "content": "try{Expression expr = getValue(i);wasNull = expr.isNull();return expr.getLong();}catch(Exception e){throw SmallSQLException.createFromException( e );}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getDouble(int)",
                "startLine": 1,
                "lastLine": 8
            },
            {
                "locFile": "java+method:///smallsql/database/SSCallableStatement/getLong(int)",
                "startLine": 1,
                "lastLine": 8
            }
        ],
        "window": 8
    },
    {
        "content": "buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 139,
                "lastLine": 146
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 265,
                "lastLine": 272
            }
        ],
        "window": 8
    },
    {
        "content": "break;case SQLTokenizer.BIGINT:case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)",
                "startLine": 30,
                "lastLine": 37
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)",
                "startLine": 36,
                "lastLine": 43
            }
        ],
        "window": 8
    },
    {
        "content": "formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 203,
                "lastLine": 210
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 280,
                "lastLine": 287
            }
        ],
        "window": 8
    },
    {
        "content": "formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append('.');formatMillis( details.millis, buf );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 233,
                "lastLine": 240
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 249,
                "lastLine": 256
            }
        ],
        "window": 8
    },
    {
        "content": "assertRowCount( 4, \"Select * from transactions\");}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 20,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 17,
                "lastLine": 25
            }
        ],
        "window": 8
    },
    {
        "content": "}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 8,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 8,
                "lastLine": 15
            }
        ],
        "window": 8
    },
    {
        "content": "case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 13,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 13,
                "lastLine": 20
            }
        ],
        "window": 8
    },
    {
        "content": "while(values.hasNext()){TableStorePage lock = (TableStorePage)values.next();if(lock.con != con) return null;}}tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 32,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 50,
                "lastLine": 57
            }
        ],
        "window": 8
    },
    {
        "content": "System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 49,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_Scroll_getXXX(java.sql.Connection)",
                "startLine": 35,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteAll(java.sql.Connection)",
                "startLine": 13,
                "lastLine": 21
            }
        ],
        "window": 9
    },
    {
        "content": "return readString();case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 38,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 39,
                "lastLine": 47
            }
        ],
        "window": 9
    },
    {
        "content": "pr.setObject( 2, testValue.large);rs = pr.executeQuery();assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );pr.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 82,
                "lastLine": 90
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 61,
                "lastLine": 69
            }
        ],
        "window": 9
    },
    {
        "content": "Iterator values = locks.values().iterator();while(values.hasNext()){TableStorePage lock = (TableStorePage)values.next();if(lock.con != con) return null;}}tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 31,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 49,
                "lastLine": 57
            }
        ],
        "window": 9
    },
    {
        "content": "pr.setTime  (  11, new Time( System.currentTimeMillis() ) );pr.setShort (  12, (short)23456 );pr.setFloat (  13, (float)34.56 );pr.setString(  14, \"sysname (30) NULL\" );pr.setString(  15 , \"text NULL\" );pr.setByte  (  16, (byte)28 );pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 25,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 21,
                "lastLine": 29
            }
        ],
        "window": 9
    },
    {
        "content": "else System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 41,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 22,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection)",
                "startLine": 20,
                "lastLine": 28
            }
        ],
        "window": 9
    },
    {
        "content": "return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 12,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 12,
                "lastLine": 20
            }
        ],
        "window": 9
    },
    {
        "content": "formatNumber( details.month+1, 2, buf);buf.append('-');formatNumber( details.day, 2, buf);buf.append(' ');formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 215,
                "lastLine": 223
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 229,
                "lastLine": 237
            }
        ],
        "window": 9
    },
    {
        "content": "if(expr.isNull())dataType = expr.getDataType();elseinitValue( expr );}else if(!expr.isNull()){switch(dataType){case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 111,
                "lastLine": 119
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 54,
                "lastLine": 62
            }
        ],
        "window": 9
    },
    {
        "content": "rows.add(row);}}}}Object[][] result = new Object[rows.size()][];rows.toArray(result);return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 25,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getReferenceKeys(smallsql.database.SSConnection,java.lang.String,java.lang.String)",
                "startLine": 32,
                "lastLine": 40
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 20,
                "lastLine": 28
            }
        ],
        "window": 9
    },
    {
        "content": "assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 32,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 30,
                "lastLine": 40
            }
        ],
        "window": 9
    },
    {
        "content": "}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 38,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 40,
                "lastLine": 51
            }
        ],
        "window": 9
    },
    {
        "content": "buf.append( SHORT_MONTHS[ details.month ]);buf.append(' ');formatNumber( details.day, 2, buf);buf.append(' ');formatNumber( details.year, 4, buf);buf.append(' ');formatHour12( details.hour, buf );buf.append(':');formatNumber( details.minute, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 132,
                "lastLine": 140
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 11,
                "lastLine": 19
            }
        ],
        "window": 9
    },
    {
        "content": "pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 25,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 17,
                "lastLine": 27
            }
        ],
        "window": 9
    },
    {
        "content": "List rows = new ArrayList();Strings tables = getTables(table);for(int t=0; t<tables.size(); t++){String tableName = tables.get(t);TableView tab = getTableView( con, tableName);if(!(tab instanceof Table)) continue;IndexDescriptions indexes = ((Table)tab).indexes;for(int i=0; i<indexes.size(); i++){IndexDescription index = indexes.get(i);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 1,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)",
                "startLine": 1,
                "lastLine": 9
            }
        ],
        "window": 9
    },
    {
        "content": "assertTrue( oldValue.compareTo( newValue ) > 0 );count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 16,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 16,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_desc()",
                "startLine": 16,
                "lastLine": 24
            }
        ],
        "window": 9
    },
    {
        "content": "System.out.println( \"  Test time: \" + time + \" ms\");pr.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 37,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 43,
                "lastLine": 51
            }
        ],
        "window": 9
    },
    {
        "content": "if(page == null)return null;if(i + 1 == count)return page.getValue();elsepage = (IndexNode)page.getValue();}throw new Error();}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expressions,boolean,java.util.ArrayList)",
                "startLine": 16,
                "lastLine": 24
            },
            {
                "locFile": "java+method:///smallsql/database/Index/findRows(smallsql.database.Expression%5B%5D,boolean,java.util.ArrayList)",
                "startLine": 16,
                "lastLine": 24
            }
        ],
        "window": 9
    },
    {
        "content": "con.commit();assertRowCount( 4, \"Select * from transactions\");}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 19,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 16,
                "lastLine": 25
            }
        ],
        "window": 9
    },
    {
        "content": "}failed.setNextException(ex);}}batches.clear();if(failed != null)throw failed;return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/executeBatch()",
                "startLine": 17,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SSStatement/executeBatch()",
                "startLine": 13,
                "lastLine": 21
            }
        ],
        "window": 9
    },
    {
        "content": "java.io.File file = new java.io.File(tableName+\".bin\");file.delete();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 24,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 28,
                "lastLine": 36
            }
        ],
        "window": 9
    },
    {
        "content": "if(raFile != null)try{raFile.close();}catch(Exception e2){DriverManager.println(e2.toString());}throw SmallSQLException.createFromException(e);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 31,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 19,
                "lastLine": 27
            }
        ],
        "window": 9
    },
    {
        "content": "if(listEnum.stack>=3){listEnum.offsetStack[listEnum.stack] = offset;return result;}listEnum.offsetStack[listEnum.stack] = offset+pointerSize;offset = getPointer();shift -= 16;listEnum.stack++;listEnum.resultStack[listEnum.stack] = result;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 22,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 16,
                "lastLine": 24
            }
        ],
        "window": 9
    },
    {
        "content": "if(obj == null) return 0;switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return (obj == Boolean.TRUE) ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:case SQLTokenizer.BIGINT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)",
                "startLine": 1,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)",
                "startLine": 1,
                "lastLine": 9
            }
        ],
        "window": 9
    },
    {
        "content": "oldValue = (Integer)rs.getObject(\"i\");int count = 1;while(rs.next()){assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );oldValue = (Integer)rs.getObject(\"i\");count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 14,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 14,
                "lastLine": 23
            }
        ],
        "window": 9
    },
    {
        "content": "try{java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");byte bytes[] = new byte[1024];for(int i=0; i<rowCount; i++){fos.write(bytes);}fos.close();java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");long time = -System.currentTimeMillis();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 8,
                "lastLine": 16
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 8,
                "lastLine": 16
            }
        ],
        "window": 9
    },
    {
        "content": "level++;nodeStack.push(new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),scroll, level));continue;}elsereturn getReturnValue(status.nodeValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 25,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 56,
                "lastLine": 64
            }
        ],
        "window": 9
    },
    {
        "content": "}}else{prev.nextLock = lock.nextLock;}return;}prev = lock;lock = lock.nextLock;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 51,
                "lastLine": 60
            },
            {
                "locFile": "java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)",
                "startLine": 24,
                "lastLine": 33
            }
        ],
        "window": 9
    },
    {
        "content": "formatHour12( details.hour, buf );buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 138,
                "lastLine": 146
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 264,
                "lastLine": 272
            }
        ],
        "window": 9
    },
    {
        "content": "case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 28,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 44,
                "lastLine": 52
            }
        ],
        "window": 9
    },
    {
        "content": "int count = rs.getInt(1);if (count != rowCount){if (count == 0){createTestDataWithClassicInsert( con );rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 12,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 13,
                "lastLine": 22
            }
        ],
        "window": 9
    },
    {
        "content": "case SQLTokenizer.LONGVARBINARY:return getBytes();case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:return new DateTime( getLong(), dataType );case SQLTokenizer.UNIQUEIDENTIFIER:return getBytes();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 42,
                "lastLine": 50
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 34,
                "lastLine": 42
            }
        ],
        "window": 9
    },
    {
        "content": "Connection con = AllTests.getConnection();try{con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");assertRowCount( 1, \"Select * from transactions\");con.setAutoCommit(false);con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testRollbackWithOneCommitRow()",
                "startLine": 4,
                "lastLine": 14
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 4,
                "lastLine": 14
            }
        ],
        "window": 9
    },
    {
        "content": "case SQLTokenizer.TIMESTAMP:return readTimestamp();case SQLTokenizer.TIME:return readTime();case SQLTokenizer.DATE:return readDate();case SQLTokenizer.SMALLDATETIME:return readSmallDateTime();default:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getLong(int,int)",
                "startLine": 51,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 51,
                "lastLine": 59
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 51,
                "lastLine": 59
            }
        ],
        "window": 9
    },
    {
        "content": "rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 19,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 19,
                "lastLine": 28
            }
        ],
        "window": 9
    },
    {
        "content": "case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 24,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 24,
                "lastLine": 32
            }
        ],
        "window": 9
    },
    {
        "content": "case IN:case EQUALS_NULL:case EQUALS:    return comp == 0;case GREATER:   return comp >  0;case GRE_EQU:   return comp >= 0;case LESSER:    return comp <  0;case LES_EQU:   return comp <= 0;case UNEQUALS:  return comp != 0;case BETWEEN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 127,
                "lastLine": 135
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 174,
                "lastLine": 182
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 152,
                "lastLine": 160
            }
        ],
        "window": 9
    },
    {
        "content": "factor *= 10;}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 7,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 7,
                "lastLine": 15
            }
        ],
        "window": 9
    },
    {
        "content": "public void tearDown(){try{Connection con = AllTests.getConnection();Statement st = con.createStatement();st.execute(\"drop table \" + table);st.close();}catch(Throwable e){}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/tearDown()",
                "startLine": 0,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestDataTypes/tearDown()",
                "startLine": 0,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestFunctions/tearDown()",
                "startLine": 0,
                "lastLine": 9
            },
            {
                "locFile": "java+method:///smallsql/junit/TestMoneyRounding/tearDown()",
                "startLine": 0,
                "lastLine": 9
            }
        ],
        "window": 9
    },
    {
        "content": "return readShort();case SQLTokenizer.INT:return readInt();case SQLTokenizer.BIGINT:return readLong();case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 17,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 17,
                "lastLine": 25
            }
        ],
        "window": 9
    },
    {
        "content": "assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 17,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 17,
                "lastLine": 28
            }
        ],
        "window": 10
    },
    {
        "content": "assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 31,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 29,
                "lastLine": 40
            }
        ],
        "window": 10
    },
    {
        "content": "case SQLTokenizer.SMALLINT:return readShort();case SQLTokenizer.INT:return readInt();case SQLTokenizer.BIGINT:return readLong();case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 16,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 16,
                "lastLine": 25
            }
        ],
        "window": 10
    },
    {
        "content": "return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 23,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 23,
                "lastLine": 32
            }
        ],
        "window": 10
    },
    {
        "content": "case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 11,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 11,
                "lastLine": 20
            }
        ],
        "window": 10
    },
    {
        "content": "if(status.nodeValue instanceof IndexNode){level++;nodeStack.push(new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),scroll, level));continue;}elsereturn getReturnValue(status.nodeValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 24,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 55,
                "lastLine": 64
            }
        ],
        "window": 10
    },
    {
        "content": "case SQLTokenizer.NVARCHAR:return readString();case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 37,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 38,
                "lastLine": 47
            }
        ],
        "window": 10
    },
    {
        "content": "thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 37,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 39,
                "lastLine": 51
            }
        ],
        "window": 10
    },
    {
        "content": "assertTrue( rs.next() );oldValue = (Integer)rs.getObject(\"i\");int count = 1;while(rs.next()){assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );oldValue = (Integer)rs.getObject(\"i\");count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 13,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 13,
                "lastLine": 23
            }
        ],
        "window": 10
    },
    {
        "content": "assertRowCount( 4, \"Select * from transactions\");con.commit();assertRowCount( 4, \"Select * from transactions\");}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommitWithOneCommitRow()",
                "startLine": 17,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestTransactions/testCommit()",
                "startLine": 14,
                "lastLine": 25
            }
        ],
        "window": 10
    },
    {
        "content": "if(serializeConnections.size() > 0){Iterator values = locks.values().iterator();while(values.hasNext()){TableStorePage lock = (TableStorePage)values.next();if(lock.con != con) return null;}}tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 30,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 48,
                "lastLine": 57
            }
        ],
        "window": 10
    },
    {
        "content": "pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.large);rs = pr.executeQuery();assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );pr.close();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 81,
                "lastLine": 90
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/runTest()",
                "startLine": 60,
                "lastLine": 69
            }
        ],
        "window": 10
    },
    {
        "content": "for(int i=0; i<places; i++){factor *= 10;}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 6,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 6,
                "lastLine": 15
            }
        ],
        "window": 10
    },
    {
        "content": "}catch(Throwable e){if(raFile != null)try{raFile.close();}catch(Exception e2){DriverManager.println(e2.toString());}throw SmallSQLException.createFromException(e);}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)",
                "startLine": 30,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)",
                "startLine": 18,
                "lastLine": 27
            }
        ],
        "window": 10
    },
    {
        "content": "if(newValue != null){assertTrue( oldValue.compareTo( newValue ) > 0 );count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 15,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 15,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_desc()",
                "startLine": 15,
                "lastLine": 24
            }
        ],
        "window": 10
    },
    {
        "content": "System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");else System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 21,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection)",
                "startLine": 19,
                "lastLine": 28
            }
        ],
        "window": 10
    },
    {
        "content": "buf.append('-');formatNumber( details.month+1, 2, buf);buf.append('-');formatNumber( details.day, 2, buf);buf.append(' ');formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 214,
                "lastLine": 223
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 228,
                "lastLine": 237
            }
        ],
        "window": 10
    },
    {
        "content": "if(value == null){if(expr.isNull())dataType = expr.getDataType();elseinitValue( expr );}else if(!expr.isNull()){switch(dataType){case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 110,
                "lastLine": 119
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)",
                "startLine": 53,
                "lastLine": 62
            }
        ],
        "window": 10
    },
    {
        "content": "time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");pr.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 36,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 42,
                "lastLine": 51
            }
        ],
        "window": 10
    },
    {
        "content": "time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 48,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_Scroll_getXXX(java.sql.Connection)",
                "startLine": 34,
                "lastLine": 43
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteAll(java.sql.Connection)",
                "startLine": 12,
                "lastLine": 21
            }
        ],
        "window": 10
    },
    {
        "content": "pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 23,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 15,
                "lastLine": 27
            }
        ],
        "window": 10
    },
    {
        "content": "switch(operation){case IN:case EQUALS_NULL:case EQUALS:    return comp == 0;case GREATER:   return comp >  0;case GRE_EQU:   return comp >= 0;case LESSER:    return comp <  0;case LES_EQU:   return comp <= 0;case UNEQUALS:  return comp != 0;case BETWEEN:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 126,
                "lastLine": 135
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 173,
                "lastLine": 182
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getBoolean()",
                "startLine": 151,
                "lastLine": 160
            }
        ],
        "window": 10
    },
    {
        "content": "fis.close();java.io.File file = new java.io.File(tableName+\".bin\");file.delete();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 23,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 27,
                "lastLine": 36
            }
        ],
        "window": 10
    },
    {
        "content": "case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 27,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 43,
                "lastLine": 52
            }
        ],
        "window": 10
    },
    {
        "content": "failed.initCause(ex);}failed.setNextException(ex);}}batches.clear();if(failed != null)throw failed;return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/executeBatch()",
                "startLine": 16,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SSStatement/executeBatch()",
                "startLine": 12,
                "lastLine": 21
            }
        ],
        "window": 10
    },
    {
        "content": "pr.setFloat (  10 , (float)78.89 );pr.setTime  (  11, new Time( System.currentTimeMillis() ) );pr.setShort (  12, (short)23456 );pr.setFloat (  13, (float)34.56 );pr.setString(  14, \"sysname (30) NULL\" );pr.setString(  15 , \"text NULL\" );pr.setByte  (  16, (byte)28 );pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 24,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 20,
                "lastLine": 29
            }
        ],
        "window": 10
    },
    {
        "content": "buf.append(' ');formatHour12( details.hour, buf );buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 137,
                "lastLine": 146
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 263,
                "lastLine": 272
            }
        ],
        "window": 10
    },
    {
        "content": "result |= (((long)nextEntry) << shift);if(listEnum.stack>=3){listEnum.offsetStack[listEnum.stack] = offset;return result;}listEnum.offsetStack[listEnum.stack] = offset+pointerSize;offset = getPointer();shift -= 16;listEnum.stack++;listEnum.resultStack[listEnum.stack] = result;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)",
                "startLine": 21,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)",
                "startLine": 15,
                "lastLine": 24
            }
        ],
        "window": 10
    },
    {
        "content": "rs.next();int count = rs.getInt(1);if (count != rowCount){if (count == 0){createTestDataWithClassicInsert( con );rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 11,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 12,
                "lastLine": 22
            }
        ],
        "window": 10
    },
    {
        "content": "case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:return readString();case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 36,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 37,
                "lastLine": 47
            }
        ],
        "window": 11
    },
    {
        "content": "}if(serializeConnections.size() > 0){Iterator values = locks.values().iterator();while(values.hasNext()){TableStorePage lock = (TableStorePage)values.next();if(lock.con != con) return null;}}tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 29,
                "lastLine": 39
            },
            {
                "locFile": "java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)",
                "startLine": 47,
                "lastLine": 57
            }
        ],
        "window": 11
    },
    {
        "content": "formatNumber( details.year, 4, buf);buf.append(' ');formatHour12( details.hour, buf );buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 136,
                "lastLine": 146
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 262,
                "lastLine": 272
            }
        ],
        "window": 11
    },
    {
        "content": "Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 36,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 38,
                "lastLine": 51
            }
        ],
        "window": 11
    },
    {
        "content": "if(places > 0){for(int i=0; i<places; i++){factor *= 10;}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 5,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 5,
                "lastLine": 15
            }
        ],
        "window": 11
    },
    {
        "content": "return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 10,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 10,
                "lastLine": 20
            }
        ],
        "window": 11
    },
    {
        "content": "return readUnsignedByte();case SQLTokenizer.SMALLINT:return readShort();case SQLTokenizer.INT:return readInt();case SQLTokenizer.BIGINT:return readLong();case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 15,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 15,
                "lastLine": 25
            }
        ],
        "window": 11
    },
    {
        "content": "case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 26,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 42,
                "lastLine": 52
            }
        ],
        "window": 11
    },
    {
        "content": "if (count != rowCount)System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");else System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 20,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection)",
                "startLine": 18,
                "lastLine": 28
            }
        ],
        "window": 11
    },
    {
        "content": "case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 22,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 22,
                "lastLine": 32
            }
        ],
        "window": 11
    },
    {
        "content": "pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 22,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 14,
                "lastLine": 27
            }
        ],
        "window": 11
    },
    {
        "content": "formatNumber( details.year, 4, buf);buf.append('-');formatNumber( details.month+1, 2, buf);buf.append('-');formatNumber( details.day, 2, buf);buf.append(' ');formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 213,
                "lastLine": 223
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 227,
                "lastLine": 237
            }
        ],
        "window": 11
    },
    {
        "content": "assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 30,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 28,
                "lastLine": 40
            }
        ],
        "window": 11
    },
    {
        "content": "while(rs.previous()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 16,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 16,
                "lastLine": 28
            }
        ],
        "window": 11
    },
    {
        "content": "if(status.nodeValue != null){if(status.nodeValue instanceof IndexNode){level++;nodeStack.push(new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),scroll, level));continue;}elsereturn getReturnValue(status.nodeValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 23,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 54,
                "lastLine": 64
            }
        ],
        "window": 11
    },
    {
        "content": "failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);failed.initCause(ex);}failed.setNextException(ex);}}batches.clear();if(failed != null)throw failed;return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/executeBatch()",
                "startLine": 15,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SSStatement/executeBatch()",
                "startLine": 11,
                "lastLine": 21
            }
        ],
        "window": 11
    },
    {
        "content": "}time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");pr.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 35,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 41,
                "lastLine": 51
            }
        ],
        "window": 11
    },
    {
        "content": "}time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 47,
                "lastLine": 57
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_Scroll_getXXX(java.sql.Connection)",
                "startLine": 33,
                "lastLine": 43
            }
        ],
        "window": 11
    },
    {
        "content": "ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();int count = rs.getInt(1);if (count != rowCount){if (count == 0){createTestDataWithClassicInsert( con );rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 10,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 11,
                "lastLine": 22
            }
        ],
        "window": 11
    },
    {
        "content": "pr.setDouble(  9 , 567.45 );pr.setFloat (  10 , (float)78.89 );pr.setTime  (  11, new Time( System.currentTimeMillis() ) );pr.setShort (  12, (short)23456 );pr.setFloat (  13, (float)34.56 );pr.setString(  14, \"sysname (30) NULL\" );pr.setString(  15 , \"text NULL\" );pr.setByte  (  16, (byte)28 );pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 23,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 19,
                "lastLine": 29
            }
        ],
        "window": 11
    },
    {
        "content": "System.out.println( \"  Test time: \" + time + \" ms\");fis.close();java.io.File file = new java.io.File(tableName+\".bin\");file.delete();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 22,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 26,
                "lastLine": 36
            }
        ],
        "window": 11
    },
    {
        "content": "assertNull(oldValue);assertTrue( rs.next() );oldValue = (Integer)rs.getObject(\"i\");int count = 1;while(rs.next()){assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );oldValue = (Integer)rs.getObject(\"i\");count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 12,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 12,
                "lastLine": 23
            }
        ],
        "window": 11
    },
    {
        "content": "String newValue = rs.getString(\"v\");if(newValue != null){assertTrue( oldValue.compareTo( newValue ) > 0 );count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 14,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 14,
                "lastLine": 25
            }
        ],
        "window": 11
    },
    {
        "content": "buf.append(' ');formatNumber( details.year, 4, buf);buf.append(' ');formatHour12( details.hour, buf );buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 135,
                "lastLine": 146
            },
            {
                "locFile": "java+method:///smallsql/database/DateTime/toString(int)",
                "startLine": 261,
                "lastLine": 272
            }
        ],
        "window": 12
    },
    {
        "content": "long factor = 1;if(places > 0){for(int i=0; i<places; i++){factor *= 10;}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 4,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 4,
                "lastLine": 15
            }
        ],
        "window": 12
    },
    {
        "content": "if(failed == null){failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);failed.initCause(ex);}failed.setNextException(ex);}}batches.clear();if(failed != null)throw failed;return result;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/SSPreparedStatement/executeBatch()",
                "startLine": 14,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/SSStatement/executeBatch()",
                "startLine": 10,
                "lastLine": 21
            }
        ],
        "window": 12
    },
    {
        "content": "assertFalse(\"previous\", rs.previous() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 29,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 27,
                "lastLine": 40
            }
        ],
        "window": 12
    },
    {
        "content": "case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 21,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 21,
                "lastLine": 32
            }
        ],
        "window": 12
    },
    {
        "content": "oldValue = (Integer)rs.getObject(\"i\");assertNull(oldValue);assertTrue( rs.next() );oldValue = (Integer)rs.getObject(\"i\");int count = 1;while(rs.next()){assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );oldValue = (Integer)rs.getObject(\"i\");count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 11,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 11,
                "lastLine": 23
            }
        ],
        "window": 12
    },
    {
        "content": "time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");fis.close();java.io.File file = new java.io.File(tableName+\".bin\");file.delete();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 21,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 25,
                "lastLine": 36
            }
        ],
        "window": 12
    },
    {
        "content": "case SQLTokenizer.TINYINT:return readUnsignedByte();case SQLTokenizer.SMALLINT:return readShort();case SQLTokenizer.INT:return readInt();case SQLTokenizer.BIGINT:return readLong();case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getDouble(int,int)",
                "startLine": 14,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getFloat(int,int)",
                "startLine": 14,
                "lastLine": 25
            }
        ],
        "window": 12
    },
    {
        "content": "pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 21,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 13,
                "lastLine": 27
            }
        ],
        "window": 12
    },
    {
        "content": "Statement st1 = con.createStatement();ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();int count = rs.getInt(1);if (count != rowCount){if (count == 0){createTestDataWithClassicInsert( con );rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 9,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 10,
                "lastLine": 22
            }
        ],
        "window": 12
    },
    {
        "content": "case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 9,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 9,
                "lastLine": 20
            }
        ],
        "window": 12
    },
    {
        "content": "for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 35,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 37,
                "lastLine": 51
            }
        ],
        "window": 12
    },
    {
        "content": "}}time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");pr.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 34,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 40,
                "lastLine": 51
            }
        ],
        "window": 12
    },
    {
        "content": "count = 0;while(rs.previous()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 15,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 15,
                "lastLine": 28
            }
        ],
        "window": 12
    },
    {
        "content": "case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 25,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 41,
                "lastLine": 52
            }
        ],
        "window": 12
    },
    {
        "content": "while(oldValue != null && rs.next()){String newValue = rs.getString(\"v\");if(newValue != null){assertTrue( oldValue.compareTo( newValue ) > 0 );count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 13,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 13,
                "lastLine": 25
            }
        ],
        "window": 12
    },
    {
        "content": "case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:return readString();case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 35,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 36,
                "lastLine": 47
            }
        ],
        "window": 12
    },
    {
        "content": "if(idx == -1){if(status.nodeValue != null){if(status.nodeValue instanceof IndexNode){level++;nodeStack.push(new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),scroll, level));continue;}elsereturn getReturnValue(status.nodeValue);}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 22,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)",
                "startLine": 53,
                "lastLine": 64
            }
        ],
        "window": 12
    },
    {
        "content": "pr.setDouble(  8 , 23.45 );pr.setDouble(  9 , 567.45 );pr.setFloat (  10 , (float)78.89 );pr.setTime  (  11, new Time( System.currentTimeMillis() ) );pr.setShort (  12, (short)23456 );pr.setFloat (  13, (float)34.56 );pr.setString(  14, \"sysname (30) NULL\" );pr.setString(  15 , \"text NULL\" );pr.setByte  (  16, (byte)28 );pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 22,
                "lastLine": 33
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 18,
                "lastLine": 29
            }
        ],
        "window": 12
    },
    {
        "content": "int count = rs.getInt(1);if (count != rowCount)System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");else System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 19,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection)",
                "startLine": 17,
                "lastLine": 28
            }
        ],
        "window": 12
    },
    {
        "content": "return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 20,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 20,
                "lastLine": 32
            }
        ],
        "window": 13
    },
    {
        "content": "assertEquals(\"getRow\", 1, rs.getRow() );assertFalse(\"previous\", rs.previous() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 27,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 25,
                "lastLine": 40
            }
        ],
        "window": 13
    },
    {
        "content": "assertTrue( rs.next() );oldValue = (Integer)rs.getObject(\"i\");assertNull(oldValue);assertTrue( rs.next() );oldValue = (Integer)rs.getObject(\"i\");int count = 1;while(rs.next()){assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );oldValue = (Integer)rs.getObject(\"i\");count++;}assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int_asc()",
                "startLine": 9,
                "lastLine": 23
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_int()",
                "startLine": 9,
                "lastLine": 23
            }
        ],
        "window": 13
    },
    {
        "content": "case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 24,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 40,
                "lastLine": 52
            }
        ],
        "window": 13
    },
    {
        "content": "int count = 1;while(oldValue != null && rs.next()){String newValue = rs.getString(\"v\");if(newValue != null){assertTrue( oldValue.compareTo( newValue ) > 0 );count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 12,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 12,
                "lastLine": 25
            }
        ],
        "window": 13
    },
    {
        "content": "pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 19,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 11,
                "lastLine": 27
            }
        ],
        "window": 13
    },
    {
        "content": "try{Statement st1 = con.createStatement();ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();int count = rs.getInt(1);if (count != rowCount){if (count == 0){createTestDataWithClassicInsert( con );rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection)",
                "startLine": 8,
                "lastLine": 21
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection)",
                "startLine": 9,
                "lastLine": 22
            }
        ],
        "window": 13
    },
    {
        "content": "rs.last();count = 0;while(rs.previous()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 14,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 14,
                "lastLine": 28
            }
        ],
        "window": 13
    },
    {
        "content": "case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 8,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 8,
                "lastLine": 20
            }
        ],
        "window": 13
    },
    {
        "content": "return;}}time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");pr.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection)",
                "startLine": 33,
                "lastLine": 45
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection)",
                "startLine": 39,
                "lastLine": 51
            }
        ],
        "window": 13
    },
    {
        "content": "pr.close();time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");fis.close();java.io.File file = new java.io.File(tableName+\".bin\");file.delete();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection)",
                "startLine": 20,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection)",
                "startLine": 24,
                "lastLine": 36
            }
        ],
        "window": 13
    },
    {
        "content": "rs.next();int count = rs.getInt(1);if (count != rowCount)System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");else System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection)",
                "startLine": 18,
                "lastLine": 30
            },
            {
                "locFile": "java+method:///smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection)",
                "startLine": 16,
                "lastLine": 28
            }
        ],
        "window": 13
    },
    {
        "content": "double value = param1.getDouble();long factor = 1;if(places > 0){for(int i=0; i<places; i++){factor *= 10;}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 3,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 3,
                "lastLine": 15
            }
        ],
        "window": 13
    },
    {
        "content": "case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:return readString();case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getObject(int,int)",
                "startLine": 34,
                "lastLine": 46
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/getString(int,int)",
                "startLine": 35,
                "lastLine": 47
            }
        ],
        "window": 13
    },
    {
        "content": "}for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 32,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 34,
                "lastLine": 51
            }
        ],
        "window": 13
    },
    {
        "content": "rs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehenrs.last();count = 0;while(rs.previous()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 12,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 12,
                "lastLine": 28
            }
        ],
        "window": 14
    },
    {
        "content": "case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 7,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 7,
                "lastLine": 20
            }
        ],
        "window": 14
    },
    {
        "content": "pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 18,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 10,
                "lastLine": 27
            }
        ],
        "window": 14
    },
    {
        "content": "case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 19,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 19,
                "lastLine": 32
            }
        ],
        "window": 14
    },
    {
        "content": "oldValue = rs.getString(\"v\");int count = 1;while(oldValue != null && rs.next()){String newValue = rs.getString(\"v\");if(newValue != null){assertTrue( oldValue.compareTo( newValue ) > 0 );count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 10,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 10,
                "lastLine": 25
            }
        ],
        "window": 14
    },
    {
        "content": "assertTrue(\"first\", rs.first() );assertEquals(\"getRow\", 1, rs.getRow() );assertFalse(\"previous\", rs.previous() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 26,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 24,
                "lastLine": 40
            }
        ],
        "window": 14
    },
    {
        "content": "final int places = param2.getInt();double value = param1.getDouble();long factor = 1;if(places > 0){for(int i=0; i<places; i++){factor *= 10;}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 2,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 2,
                "lastLine": 15
            }
        ],
        "window": 14
    },
    {
        "content": "thread.start();}for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 31,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 33,
                "lastLine": 51
            }
        ],
        "window": 14
    },
    {
        "content": "case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 23,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 39,
                "lastLine": 52
            }
        ],
        "window": 14
    },
    {
        "content": "rs.next();rs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehenrs.last();count = 0;while(rs.previous()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 11,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 11,
                "lastLine": 28
            }
        ],
        "window": 15
    },
    {
        "content": "break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 22,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 38,
                "lastLine": 52
            }
        ],
        "window": 15
    },
    {
        "content": "pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 17,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 9,
                "lastLine": 27
            }
        ],
        "window": 15
    },
    {
        "content": "if(isNull()) return 0;final int places = param2.getInt();double value = param1.getDouble();long factor = 1;if(places > 0){for(int i=0; i<places; i++){factor *= 10;}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 1,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 1,
                "lastLine": 15
            }
        ],
        "window": 15
    },
    {
        "content": "assertTrue( rs.next() );oldValue = rs.getString(\"v\");int count = 1;while(oldValue != null && rs.next()){String newValue = rs.getString(\"v\");if(newValue != null){assertTrue( oldValue.compareTo( newValue ) > 0 );count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_desc()",
                "startLine": 9,
                "lastLine": 25
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc()",
                "startLine": 9,
                "lastLine": 25
            }
        ],
        "window": 15
    },
    {
        "content": "threadList.add(thread);thread.start();}for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 30,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 32,
                "lastLine": 51
            }
        ],
        "window": 15
    },
    {
        "content": "case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 18,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 18,
                "lastLine": 32
            }
        ],
        "window": 15
    },
    {
        "content": "assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"first\", rs.first() );assertEquals(\"getRow\", 1, rs.getRow() );assertFalse(\"previous\", rs.previous() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 24,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 22,
                "lastLine": 40
            }
        ],
        "window": 15
    },
    {
        "content": "return getBoolean() ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 6,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 6,
                "lastLine": 20
            }
        ],
        "window": 15
    },
    {
        "content": "offset += 4;break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 21,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 37,
                "lastLine": 52
            }
        ],
        "window": 16
    },
    {
        "content": "assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"first\", rs.first() );assertEquals(\"getRow\", 1, rs.getRow() );assertFalse(\"previous\", rs.previous() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 23,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 21,
                "lastLine": 40
            }
        ],
        "window": 16
    },
    {
        "content": "final double getDouble() throws Exception{if(isNull()) return 0;final int places = param2.getInt();double value = param1.getDouble();long factor = 1;if(places > 0){for(int i=0; i<places; i++){factor *= 10;}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionRound/getDouble()",
                "startLine": 0,
                "lastLine": 15
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()",
                "startLine": 0,
                "lastLine": 15
            }
        ],
        "window": 16
    },
    {
        "content": "return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 17,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 17,
                "lastLine": 32
            }
        ],
        "window": 16
    },
    {
        "content": "pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 15,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 7,
                "lastLine": 27
            }
        ],
        "window": 16
    },
    {
        "content": "case SQLTokenizer.BOOLEAN:return getBoolean() ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 5,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 5,
                "lastLine": 20
            }
        ],
        "window": 16
    },
    {
        "content": "rs.next();rs.next();rs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehenrs.last();count = 0;while(rs.previous()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc()",
                "startLine": 10,
                "lastLine": 28
            },
            {
                "locFile": "java+method:///smallsql/junit/TestOrderBy/testOrderBy_Scollable()",
                "startLine": 10,
                "lastLine": 28
            }
        ],
        "window": 16
    },
    {
        "content": "});threadList.add(thread);thread.start();}for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 29,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 31,
                "lastLine": 51
            }
        ],
        "window": 16
    },
    {
        "content": "case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 4,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 4,
                "lastLine": 20
            }
        ],
        "window": 17
    },
    {
        "content": "case SQLTokenizer.SMALLDATETIME:offset += 4;break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 20,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 36,
                "lastLine": 52
            }
        ],
        "window": 17
    },
    {
        "content": "assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"first\", rs.first() );assertEquals(\"getRow\", 1, rs.getRow() );assertFalse(\"previous\", rs.previous() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 22,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 20,
                "lastLine": 40
            }
        ],
        "window": 17
    },
    {
        "content": "pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 14,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 6,
                "lastLine": 27
            }
        ],
        "window": 17
    },
    {
        "content": "}});threadList.add(thread);thread.start();}for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 27,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 29,
                "lastLine": 51
            }
        ],
        "window": 17
    },
    {
        "content": "case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 16,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 16,
                "lastLine": 32
            }
        ],
        "window": 17
    },
    {
        "content": "return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 15,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 15,
                "lastLine": 32
            }
        ],
        "window": 18
    },
    {
        "content": "switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 3,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 3,
                "lastLine": 20
            }
        ],
        "window": 18
    },
    {
        "content": "case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:offset += 4;break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 19,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 35,
                "lastLine": 52
            }
        ],
        "window": 18
    },
    {
        "content": "assertFalse(\"next\", rs.next() );assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"first\", rs.first() );assertEquals(\"getRow\", 1, rs.getRow() );assertFalse(\"previous\", rs.previous() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 21,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 19,
                "lastLine": 40
            }
        ],
        "window": 18
    },
    {
        "content": "}}});threadList.add(thread);thread.start();}for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 26,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 28,
                "lastLine": 51
            }
        ],
        "window": 18
    },
    {
        "content": "pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 13,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 5,
                "lastLine": 27
            }
        ],
        "window": 18
    },
    {
        "content": "throwable = ex;}}});threadList.add(thread);thread.start();}for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 25,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 27,
                "lastLine": 51
            }
        ],
        "window": 19
    },
    {
        "content": "assertTrue(\"isLast\", rs.isLast() );assertFalse(\"next\", rs.next() );assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"first\", rs.first() );assertEquals(\"getRow\", 1, rs.getRow() );assertFalse(\"previous\", rs.previous() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 20,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 18,
                "lastLine": 40
            }
        ],
        "window": 19
    },
    {
        "content": "case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 14,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 14,
                "lastLine": 32
            }
        ],
        "window": 19
    },
    {
        "content": "int dataType = getDataType();switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 2,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 2,
                "lastLine": 20
            }
        ],
        "window": 19
    },
    {
        "content": "case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:offset += 4;break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 18,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 34,
                "lastLine": 52
            }
        ],
        "window": 19
    },
    {
        "content": "pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 11,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 3,
                "lastLine": 27
            }
        ],
        "window": 19
    },
    {
        "content": "case SQLTokenizer.SMALLMONEY:case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:offset += 4;break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 17,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 33,
                "lastLine": 52
            }
        ],
        "window": 20
    },
    {
        "content": "if(isNull()) return 0;int dataType = getDataType();switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getDouble()",
                "startLine": 1,
                "lastLine": 20
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getFloat()",
                "startLine": 1,
                "lastLine": 20
            }
        ],
        "window": 20
    },
    {
        "content": "}catch(Throwable ex){throwable = ex;}}});threadList.add(thread);thread.start();}for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentThreadWrite()",
                "startLine": 24,
                "lastLine": 49
            },
            {
                "locFile": "java+method:///smallsql/junit/TestThreads/testConcurrentConnectionWrite()",
                "startLine": 26,
                "lastLine": 51
            }
        ],
        "window": 20
    },
    {
        "content": "assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );assertFalse(\"next\", rs.next() );assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"first\", rs.first() );assertEquals(\"getRow\", 1, rs.getRow() );assertFalse(\"previous\", rs.previous() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStates()",
                "startLine": 19,
                "lastLine": 42
            },
            {
                "locFile": "java+method:///smallsql/junit/TestResultSet/testScrollStatesGroupBy()",
                "startLine": 17,
                "lastLine": 40
            }
        ],
        "window": 20
    },
    {
        "content": "pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 10,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 2,
                "lastLine": 27
            }
        ],
        "window": 20
    },
    {
        "content": "return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 13,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 13,
                "lastLine": 32
            }
        ],
        "window": 20
    },
    {
        "content": "case SQLTokenizer.REAL:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:offset += 4;break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 16,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 32,
                "lastLine": 52
            }
        ],
        "window": 21
    },
    {
        "content": "pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/junit/TestOperatoren/setUp()",
                "startLine": 9,
                "lastLine": 35
            },
            {
                "locFile": "java+method:///smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement)",
                "startLine": 1,
                "lastLine": 27
            }
        ],
        "window": 21
    },
    {
        "content": "case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 12,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 12,
                "lastLine": 32
            }
        ],
        "window": 21
    },
    {
        "content": "case SQLTokenizer.INT:case SQLTokenizer.REAL:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:offset += 4;break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 15,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 31,
                "lastLine": 52
            }
        ],
        "window": 22
    },
    {
        "content": "case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 11,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 11,
                "lastLine": 32
            }
        ],
        "window": 22
    },
    {
        "content": "case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 10,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 10,
                "lastLine": 32
            }
        ],
        "window": 23
    },
    {
        "content": "break;case SQLTokenizer.INT:case SQLTokenizer.REAL:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:offset += 4;break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 14,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 30,
                "lastLine": 52
            }
        ],
        "window": 23
    },
    {
        "content": "offset += 2;break;case SQLTokenizer.INT:case SQLTokenizer.REAL:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:offset += 4;break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)",
                "startLine": 13,
                "lastLine": 36
            },
            {
                "locFile": "java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)",
                "startLine": 29,
                "lastLine": 52
            }
        ],
        "window": 24
    },
    {
        "content": "return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 9,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 9,
                "lastLine": 32
            }
        ],
        "window": 24
    },
    {
        "content": "case SQLTokenizer.VARBINARY:return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 8,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 8,
                "lastLine": 32
            }
        ],
        "window": 25
    },
    {
        "content": "case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 7,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 7,
                "lastLine": 32
            }
        ],
        "window": 26
    },
    {
        "content": "return getBoolean() ? Boolean.TRUE : Boolean.FALSE;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 6,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 6,
                "lastLine": 32
            }
        ],
        "window": 27
    },
    {
        "content": "case SQLTokenizer.BOOLEAN:return getBoolean() ? Boolean.TRUE : Boolean.FALSE;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 5,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 5,
                "lastLine": 32
            }
        ],
        "window": 28
    },
    {
        "content": "case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? Boolean.TRUE : Boolean.FALSE;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 4,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 4,
                "lastLine": 32
            }
        ],
        "window": 29
    },
    {
        "content": "switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? Boolean.TRUE : Boolean.FALSE;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 3,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 3,
                "lastLine": 32
            }
        ],
        "window": 30
    },
    {
        "content": "int dataType = getDataType();switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? Boolean.TRUE : Boolean.FALSE;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 2,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 2,
                "lastLine": 32
            }
        ],
        "window": 31
    },
    {
        "content": "if(isNull()) return null;int dataType = getDataType();switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? Boolean.TRUE : Boolean.FALSE;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:",
        "cloneLocs": [
            {
                "locFile": "java+method:///smallsql/database/ExpressionArithmetic/getObject()",
                "startLine": 1,
                "lastLine": 32
            },
            {
                "locFile": "java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()",
                "startLine": 1,
                "lastLine": 32
            }
        ],
        "window": 32
    }
]
