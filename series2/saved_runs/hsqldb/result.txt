Percent Duplicated Lines: 14.89597064%
numberOfCloneClasses: 1052
Total Number Of Clones: 2393

Biggest Clon In Lines:
Content:
double  value    = 0;boolean wasEqual = false;String  message  = "DB operation completed";String ddl1 ="DROP TABLE t1 IF EXISTS;"+ "CREATE TABLE t1 ( d DECIMAL, f DOUBLE, l BIGINT, i INTEGER, s SMALLINT, t TINYINT, "+ "dt DATE DEFAULT CURRENT_DATE, ti TIME DEFAULT CURRENT_TIME, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP );";try {stmnt.execute(ddl1);PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)");ps.setString(1, "0.2");ps.setDouble(2, 0.2);ps.setLong(3, java.lang.Long.MAX_VALUE);ps.setInt(4, Integer.MAX_VALUE);ps.setInt(5, Short.MAX_VALUE);ps.setInt(6, 0);ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));ps.setTimestamp(9, new java.sql.Timestamp(System.currentTimeMillis()));ps.execute();ps.setInt(1, 0);ps.setDouble(2, java.lang.Double.NaN);ps.setLong(3, java.lang.Long.MIN_VALUE);ps.setInt(4, Integer.MIN_VALUE);ps.setInt(5, Short.MIN_VALUE);ps.setInt(6, 0);ps.setTimestamp(7, new java.sql.Timestamp(System.currentTimeMillis() + 1));ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));ps.execute();ps.setInt(1, 0);ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);ps.setInt(4, Integer.MIN_VALUE);ps.setObject(5, new Short((short) 2), Types.SMALLINT);ps.setObject(6, new Integer(2), Types.TINYINT);ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()+ 2));ps.execute();ps.setObject(1, new Float(0), Types.INTEGER);ps.setObject(4, new Float(1), Types.INTEGER);ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);ps.execute();ResultSet rs =stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");boolean result = rs.next();value = rs.getDouble(2);int integerValue = rs.getInt(4);if (rs.next()) {value        = rs.getDouble(2);wasEqual     = Double.isNaN(value);integerValue = rs.getInt(4);integerValue = rs.getInt(1);}if (rs.next()) {value    = rs.getDouble(2);wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;}if (rs.next()) {value    = rs.getDouble(2);wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;}rs = stmnt.executeQuery("SELECT MAX(i) FROM t1");if (rs.next()) {int max = rs.getInt(1);System.out.println("Max value for i: " + max);}try {ps.setString(5, "three");fail("update did not fail");} catch (SQLException e) {}{stmnt.execute("drop table CDTYPE if exists");stmnt.execute("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))");rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType");if (rs.next()) {int max = rs.getInt(1);System.out.println("Max value for ID: " + max);} else {System.out.println("Max value for ID not returned");}stmnt.executeUpdate("INSERT INTO cdType VALUES (10,'Test String');");stmnt.execute("CALL IDENTITY();");try {stmnt.executeUpdate("INSERT INTO cdType VALUES (10,'Test String');");} catch (SQLException e1) {
Number of lines: 93
Number of members: 2
Locations with clones:
0:
   |java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(13836,5628,<350,4>,<503,5>)
   Location line: 11 to 140
1:
   |java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(15275,5275,<434,4>,<577,5>)
   Location line: 2 to 131

Biggest Clon In Members:
Content:
= new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;} finally {try {if (rs != null) {
Number of lines: 6
Number of members: 36

A few examples:
Content:
double  value    = 0;boolean wasEqual = false;String  message  = "DB operation completed";String ddl1 ="DROP TABLE t1 IF EXISTS;"+ "CREATE TABLE t1 ( d DECIMAL, f DOUBLE, l BIGINT, i INTEGER, s SMALLINT, t TINYINT, "+ "dt DATE DEFAULT CURRENT_DATE, ti TIME DEFAULT CURRENT_TIME, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP );";try {stmnt.execute(ddl1);PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)");ps.setString(1, "0.2");ps.setDouble(2, 0.2);ps.setLong(3, java.lang.Long.MAX_VALUE);ps.setInt(4, Integer.MAX_VALUE);ps.setInt(5, Short.MAX_VALUE);ps.setInt(6, 0);ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));ps.setTimestamp(9, new java.sql.Timestamp(System.currentTimeMillis()));ps.execute();ps.setInt(1, 0);ps.setDouble(2, java.lang.Double.NaN);ps.setLong(3, java.lang.Long.MIN_VALUE);ps.setInt(4, Integer.MIN_VALUE);ps.setInt(5, Short.MIN_VALUE);ps.setInt(6, 0);ps.setTimestamp(7, new java.sql.Timestamp(System.currentTimeMillis() + 1));ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));ps.execute();ps.setInt(1, 0);ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);ps.setInt(4, Integer.MIN_VALUE);ps.setObject(5, new Short((short) 2), Types.SMALLINT);ps.setObject(6, new Integer(2), Types.TINYINT);ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()+ 2));ps.execute();ps.setObject(1, new Float(0), Types.INTEGER);ps.setObject(4, new Float(1), Types.INTEGER);ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);ps.execute();ResultSet rs =stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");boolean result = rs.next();value = rs.getDouble(2);int integerValue = rs.getInt(4);if (rs.next()) {value        = rs.getDouble(2);wasEqual     = Double.isNaN(value);integerValue = rs.getInt(4);integerValue = rs.getInt(1);}if (rs.next()) {value    = rs.getDouble(2);wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;}if (rs.next()) {value    = rs.getDouble(2);wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;}rs = stmnt.executeQuery("SELECT MAX(i) FROM t1");if (rs.next()) {int max = rs.getInt(1);System.out.println("Max value for i: " + max);}try {ps.setString(5, "three");fail("update did not fail");} catch (SQLException e) {}{stmnt.execute("drop table CDTYPE if exists");stmnt.execute("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))");rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType");if (rs.next()) {int max = rs.getInt(1);System.out.println("Max value for ID: " + max);} else {System.out.println("Max value for ID not returned");}stmnt.executeUpdate("INSERT INTO cdType VALUES (10,'Test String');");stmnt.execute("CALL IDENTITY();");try {stmnt.executeUpdate("INSERT INTO cdType VALUES (10,'Test String');");} catch (SQLException e1) {
Number of lines: 93
Number of members: 2

Content:
t.createPrimaryKeyConstraint(name, new int[] {0, 1, 2}, false);return t;}final int sequence_catalog           = 0;final int sequence_schema            = 1;final int sequence_name              = 2;final int data_type                  = 3;final int numeric_precision          = 4;final int numeric_precision_radix    = 5;final int numeric_scale              = 6;final int maximum_value              = 7;final int minimum_value              = 8;final int increment                  = 9;final int cycle_option               = 10;final int declared_data_type         = 11;final int declared_numeric_precision = 12;final int declared_numeric_scale     = 13;final int start_with                 = 14;final int next_value                 = 15;Iterator       it;Object[]       row;NumberSequence sequence;it = database.schemaManager.databaseObjectIterator(SchemaObject.SEQUENCE);while (it.hasNext()) {sequence = (NumberSequence) it.next();if (!session.getGrantee().isAccessible(sequence)) {continue;}row = t.getEmptyRowData();NumberType type = (NumberType) sequence.getDataType();int radix =(type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types.SQL_DECIMAL) ? 10: 2;row[sequence_catalog] = database.getCatalogName().name;row[sequence_schema]  = sequence.getSchemaName().name;row[sequence_name]    = sequence.getName().name;row[data_type]        = sequence.getDataType().getFullNameString();row[numeric_precision] =ValuePool.getInt((int) type.getPrecision());row[numeric_precision_radix]    = ValuePool.getInt(radix);row[numeric_scale]              = ValuePool.INTEGER_0;row[maximum_value] = String.valueOf(sequence.getMaxValue());row[minimum_value] = String.valueOf(sequence.getMinValue());row[increment] = String.valueOf(sequence.getIncrement());row[cycle_option]               = sequence.isCycle() ? "YES": "NO";row[declared_data_type]         = row[data_type];row[declared_numeric_precision] = row[numeric_precision];row[declared_numeric_scale]     = row[declared_numeric_scale];row[start_with] = String.valueOf(sequence.getStartValue());row[next_value]                 = String.valueOf(sequence.peek());t.insertSys(session, store, row);}return t;}
Number of lines: 59
Number of members: 2

Content:
if (type.isCharacterType()) {row[character_maximum_length] =ValuePool.getLong(type.precision);row[character_octet_length] =ValuePool.getLong(type.precision * 2);row[character_set_catalog] =database.getCatalogName().name;row[character_set_schema] =((CharacterType) type).getCharacterSet().getSchemaName().name;row[character_set_name] =((CharacterType) type).getCharacterSet().getName().name;row[collation_catalog] = database.getCatalogName().name;row[collation_schema] =((CharacterType) type).getCollation().getSchemaName().name;row[collation_name] =((CharacterType) type).getCollation().getName().name;} else if (type.isNumberType()) {row[numeric_precision] = ValuePool.getLong(((NumberType) type).getNumericPrecisionInRadix());row[declared_numeric_precision] = ValuePool.getLong(((NumberType) type).getNumericPrecisionInRadix());if (type.isExactNumberType()) {row[numeric_scale] = row[declared_numeric_scale] =ValuePool.getLong(type.scale);}row[numeric_precision_radix] =ValuePool.getLong(type.getPrecisionRadix());} else if (type.isBooleanType()) {} else if (type.isDateTimeType()) {row[datetime_precision] = ValuePool.getLong(type.scale);} else if (type.isIntervalType()) {row[data_type] = "INTERVAL";row[interval_type] =((IntervalType) type).getQualifier(type.typeCode);row[interval_precision] =ValuePool.getLong(type.precision);row[datetime_precision] = ValuePool.getLong(type.scale);} else if (type.isBinaryType()) {row[character_maximum_length] =ValuePool.getLong(type.precision);row[character_octet_length] =ValuePool.getLong(type.precision);} else if (type.isBitType()) {row[character_maximum_length] =ValuePool.getLong(type.precision);row[character_octet_length] =ValuePool.getLong(type.precision);} else if (type.isArrayType()) {row[maximum_cardinality] =ValuePool.getLong(type.arrayLimitCardinality());row[data_type] = "ARRAY";}
Number of lines: 55
Number of members: 2

