[{"content":"if(isNull()) return null;int dataType = getDataType();switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? Boolean.TRUE : Boolean.FALSE;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:return getBytes();case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return new Integer( getInt() );case SQLTokenizer.BIGINT:return new Long( getLong() );case SQLTokenizer.REAL:return new Float( getFloat() );case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:return new Double( getDouble() );case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:return Money.createFromUnscaledValue( getMoney() );case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return getNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(16193,2433,<474,4>,<527,5>)","rawLines":"Object getObject() throws java.lang.Exception {\r\n        if(isNull()) return null;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return getBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return getBytes();\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n                    return new Integer( getInt() );\r\n            case SQLTokenizer.BIGINT:\r\n                    return new Long( getLong() );\r\n            case SQLTokenizer.REAL:\r\n                    return new Float( getFloat() );\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return new Double( getDouble() );\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return Money.createFromUnscaledValue( getMoney() );\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return getNumeric();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n            \t\treturn getString( left.getString(), right.getString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    Object lObj = left.getObject();\r\n                    //FIXME NullPointerException bei NEGATIVE\r\n                    Object rObj = right.getObject();\r\n                    if(lObj instanceof Number && rObj instanceof Number)\r\n                        return new Double( getDoubleImpl( ((Number)lObj).doubleValue(), ((Number)rObj).doubleValue() ) );\r\n                    else\r\n                        return getString( lObj.toString(), rObj.toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n                    return getBytes();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn new DateTime( getLong(), dataType );\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    return getBytes();\r\n            default: throw createUnspportedDataType();\r\n        }\r\n    }","startLine":1,"lastLine":32},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionFunctionReturnP1.java|(1651,1775,<48,4>,<93,5>)","rawLines":"Object getObject() throws Exception{\r\n\t\tif(isNull()) return null;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n\t        case SQLTokenizer.BIT:\r\n\t        case SQLTokenizer.BOOLEAN:\r\n\t                return getBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n\t        case SQLTokenizer.BINARY:\r\n\t        case SQLTokenizer.VARBINARY:\r\n\t                return getBytes();\r\n\t        case SQLTokenizer.TINYINT:\r\n\t        case SQLTokenizer.SMALLINT:\r\n\t        case SQLTokenizer.INT:\r\n\t                return new Integer( getInt() );\r\n\t        case SQLTokenizer.BIGINT:\r\n\t                return new Long( getLong() );\r\n\t        case SQLTokenizer.REAL:\r\n\t                return new Float( getFloat() );\r\n\t        case SQLTokenizer.FLOAT:\r\n\t        case SQLTokenizer.DOUBLE:\r\n\t                return new Double( getDouble() );\r\n\t        case SQLTokenizer.MONEY:\r\n\t        case SQLTokenizer.SMALLMONEY:\r\n\t                return Money.createFromUnscaledValue( getMoney() );\r\n\t        case SQLTokenizer.NUMERIC:\r\n\t        case SQLTokenizer.DECIMAL:\r\n\t                return getNumeric();\r\n\t        case SQLTokenizer.CHAR:\r\n\t        case SQLTokenizer.NCHAR:\r\n\t        case SQLTokenizer.VARCHAR:\r\n\t        case SQLTokenizer.NVARCHAR:\r\n\t        case SQLTokenizer.LONGNVARCHAR:\r\n\t        case SQLTokenizer.LONGVARCHAR:\r\n\t        \t\treturn getString();\r\n\t        case SQLTokenizer.LONGVARBINARY:\r\n\t                return getBytes();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn new DateTime( getLong(), dataType );\r\n\t        case SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t                return getBytes();\r\n\t        default: throw createUnspportedDataType(param1.getDataType());\r\n\t    }\r\n    }","startLine":1,"lastLine":32}],"size":32},{"content":"offset += 2;break;case SQLTokenizer.INT:case SQLTokenizer.REAL:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:offset += 4;break;case SQLTokenizer.BIGINT:case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.JAVA_OBJECT:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:case SQLTokenizer.TIMESTAMP:offset += 8;break;","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(57166,2557,<1466,4>,<1527,5>)","rawLines":"@Override\r\n    void scanObjectOffsets( int[] offsets, int dataTypes[] ){\r\n        offset = PAGE_CONTROL_SIZE;\r\n        for(int i=0; i<offsets.length; i++){\r\n            offsets[i] = offset;\r\n            boolean isNull = readBoolean(); // for isNull\r\n            switch(dataTypes[i]){\r\n                case SQLTokenizer.BIT:\r\n                case SQLTokenizer.BOOLEAN:\r\n                case SQLTokenizer.TINYINT:\r\n                    offset++;\r\n                    break;\r\n                case SQLTokenizer.SMALLINT:\r\n                    offset += 2;\r\n                    break;\r\n                case SQLTokenizer.INT:\r\n                case SQLTokenizer.REAL:\r\n                case SQLTokenizer.SMALLMONEY:\r\n                case SQLTokenizer.TIME:\r\n                case SQLTokenizer.DATE:\r\n                case SQLTokenizer.SMALLDATETIME:\r\n                    offset += 4;\r\n                    break;\r\n                case SQLTokenizer.BIGINT:\r\n                case SQLTokenizer.FLOAT:\r\n                case SQLTokenizer.DOUBLE:\r\n                case SQLTokenizer.MONEY:\r\n                case SQLTokenizer.JAVA_OBJECT:\r\n                case SQLTokenizer.LONGVARBINARY:\r\n                case SQLTokenizer.BLOB:\r\n\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\tcase SQLTokenizer.NCLOB:\r\n                case SQLTokenizer.LONGNVARCHAR:\r\n                case SQLTokenizer.LONGVARCHAR:\r\n                case SQLTokenizer.TIMESTAMP:\r\n                    offset += 8;\r\n                    break;\r\n                case SQLTokenizer.BINARY:\r\n                case SQLTokenizer.VARBINARY:\r\n                    int count = readShort() & 0xFFFF;\r\n                    if(!isNull) offset += count;  // not use += directly because readShort change the offset\r\n                    break;\r\n                case SQLTokenizer.NUMERIC:\r\n                case SQLTokenizer.DECIMAL:\r\n                    count = readByte();\r\n\t\t\t\t\toffset += 2;\r\n\t\t\t\t\tif(!isNull) offset += count*4;\r\n                    break;\r\n                case SQLTokenizer.CHAR:\r\n                case SQLTokenizer.NCHAR:\r\n                case SQLTokenizer.VARCHAR:\r\n                case SQLTokenizer.NVARCHAR:\r\n                    count = readShort() & 0xFFFF;\r\n                    if(!isNull) offset += count << 1; // not use += directly because readShort change the offset\r\n                    break;\r\n                case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    offset += 16;\r\n                    break;\r\n                default: throw new Error(String.valueOf( dataTypes[i] ) );\r\n            }\r\n        }\r\n    }","startLine":13,"lastLine":36},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(22627,6766,<655,4>,<814,5>)","rawLines":"/**\r\n     * Here are pass only Expression instead of Objects to optimize \r\n     * it for native data (no object).\r\n     * The value of offset must be correctly. \r\n     * @param expr the value that should be written\r\n     * @param column a description of the target column\r\n     * @throws Exception if any error occur like conversions or io exceptions\r\n     */\r\n    void writeExpression( Expression expr, Column column) throws Exception{\r\n        boolean isNull = expr.isNull();\r\n        if(isNull && !column.isNullable()){\r\n            throw SmallSQLException.create(Language.VALUE_NULL_INVALID, column.getName());\r\n        }\r\n        int dataType = column.getDataType();\r\n        if(isNull){\r\n            writeBoolean(true); //true - is null\r\n            switch(dataType){\r\n                case SQLTokenizer.BIT:\r\n                case SQLTokenizer.BOOLEAN:\r\n                case SQLTokenizer.TINYINT:\r\n                    offset++;\r\n                    break;\r\n                case SQLTokenizer.SMALLINT:\r\n                case SQLTokenizer.BINARY:\r\n                case SQLTokenizer.VARBINARY:\r\n                case SQLTokenizer.CHAR:\r\n                case SQLTokenizer.NCHAR:\r\n                case SQLTokenizer.VARCHAR:\r\n                case SQLTokenizer.NVARCHAR:\r\n                    offset += 2;\r\n                    break;\r\n                case SQLTokenizer.INT:\r\n                case SQLTokenizer.REAL:\r\n                case SQLTokenizer.SMALLMONEY:\r\n                case SQLTokenizer.TIME:\r\n                case SQLTokenizer.DATE:\r\n                case SQLTokenizer.SMALLDATETIME:\r\n                    offset += 4;\r\n                    break;\r\n                case SQLTokenizer.BIGINT:\r\n                case SQLTokenizer.FLOAT:\r\n                case SQLTokenizer.DOUBLE:\r\n                case SQLTokenizer.MONEY:\r\n                case SQLTokenizer.JAVA_OBJECT:\r\n                case SQLTokenizer.LONGVARBINARY:\r\n                case SQLTokenizer.BLOB:\r\n\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\tcase SQLTokenizer.NCLOB:\r\n                case SQLTokenizer.LONGNVARCHAR:\r\n                case SQLTokenizer.LONGVARCHAR:\r\n                case SQLTokenizer.TIMESTAMP:\r\n                    offset += 8;\r\n                    break;\r\n                case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    offset += 16;\r\n                    break;\r\n                case SQLTokenizer.NUMERIC:\r\n                case SQLTokenizer.DECIMAL:\r\n                    offset += 3;\r\n                    break;\r\n                default: throw new Error();\r\n            }\r\n            return;\r\n        }\r\n        writeBoolean(false); // false - is not null\r\n       \tcolumn.setNewAutoIncrementValue(expr);\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    writeBoolean( expr.getBoolean() );\r\n                    break;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    writeBinary( expr.getBytes(), column.getPrecision(), dataType != SQLTokenizer.BINARY );\r\n                    break;\r\n            case SQLTokenizer.TINYINT:\r\n                    writeByte( expr.getInt() );\r\n                    break;\r\n            case SQLTokenizer.SMALLINT:\r\n                    writeShort( expr.getInt() );\r\n                    break;\r\n            case SQLTokenizer.INT:\r\n                    writeInt( expr.getInt() );\r\n                    break;\r\n            case SQLTokenizer.BIGINT:\r\n                    writeLong( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.REAL:\r\n                    writeFloat( expr.getFloat() );\r\n                    break;\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    writeDouble( expr.getDouble() );\r\n                    break;\r\n            case SQLTokenizer.MONEY:\r\n                    writeLong( expr.getMoney() );\r\n                    break;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    writeInt( (int)expr.getMoney() );\r\n                    break;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n            \t\tMutableNumeric numeric = expr.getNumeric();\r\n            \t\tnumeric.setScale( column.getScale() );\r\n                    writeNumeric( numeric );\r\n                    break;\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n                    writeString( expr.getString(), column.getDisplaySize(), false );\r\n                    break;\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    writeString( expr.getString(), column.getDisplaySize(), true );\r\n                    break;\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    writeLongString( expr.getString() );\r\n                    break;\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    // FIXME a MemoryStream can be faster because there are no additional array copy\r\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n                    ObjectOutputStream oos = new ObjectOutputStream(baos);\r\n                    oos.writeObject( expr.getObject() );\r\n                    writeLongBinary( baos.toByteArray() );\r\n                    break;\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    writeLongBinary( expr.getBytes() );\r\n                    break;\r\n            case SQLTokenizer.TIMESTAMP:\r\n                    writeTimestamp( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.TIME:\r\n                    writeTime( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.DATE:\r\n                    writeDate( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    writeSmallDateTime( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\tswitch(expr.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BLOB:\r\n\t\t\t\t\t\tbyte[] bytes = expr.getBytes();\r\n                        if(bytes.length != 16) throw SmallSQLException.create(Language.BYTEARR_INVALID_SIZE, String.valueOf(bytes.length));\r\n                        writeBytes( bytes );\r\n\t\t\t\t\tdefault:\r\n                        writeBytes( Utils.unique2bytes(expr.getString()) );\r\n\t\t\t\t\t}\r\n                    break;\r\n            default: throw new Error(String.valueOf(column.getDataType()));\r\n        }\r\n    }","startLine":29,"lastLine":52}],"size":24},{"content":"pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.large);pr.execute();pr.setObject( 1, testValue.large);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, null);pr.setObject( 2, testValue.small);pr.execute();pr.setObject( 1, testValue.small);pr.setObject( 2, null);pr.execute();pr.setObject( 1, null);pr.setObject( 2, null);pr.execute();","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(5458,1343,<106,4>,<146,5>)","rawLines":"public void setUp(){\r\n        tearDown();\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"create table \" + table + \"(a \" + testValue.dataType +\", b \" + testValue.dataType + \")\");\r\n            st.close();\r\n            PreparedStatement pr = con.prepareStatement(\"INSERT into \" + table + \"(a,b) Values(?,?)\");\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, null);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, null);\r\n            pr.execute();\r\n            pr.close();\r\n        }catch(Throwable e){\r\n            e.printStackTrace();\r\n        }\r\n    }","startLine":9,"lastLine":35},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestJoins.java|(6219,902,<128,4>,<156,5>)","rawLines":"private void insertValues(PreparedStatement pr ) throws Exception{\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, null);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, null);\r\n            pr.execute();\r\n    }","startLine":1,"lastLine":27}],"size":21},{"content":"}catch(Throwable ex){throwable = ex;}}});threadList.add(thread);thread.start();}for(int i = 0; i < threadList.size(); i++){Thread thread = (Thread)threadList.get(i);thread.join(5000);}if(throwable != null){throw throwable;}assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");}finally{dropTable(con, \"ConcurrentWrite\");}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestThreads.java|(3734,1973,<124,4>,<175,5>)","rawLines":"/**\r\n     * Create a table with a single row. In different connections a int value will be increment.\r\n     * \r\n     * @throws Throwable\r\n     *             if an thread problem occur\r\n     */\r\n    public void testConcurrentConnectionWrite() throws Throwable{\r\n        ArrayList threadList = new ArrayList();\r\n        throwable = null;\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        try{\r\n            st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");\r\n            st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");\r\n\r\n            // start threads that check the row count\r\n            for(int i = 0; i < 200; i++){\r\n                Thread thread = new Thread(new Runnable(){\r\n\r\n                    public void run(){\r\n                        try{\r\n                            Connection con2 = AllTests.createConnection();\r\n                            Statement st2 = con2.createStatement();\r\n                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");\r\n                            assertEquals(\"Update Count\", 1, count);\r\n                            con2.close();\r\n                        }catch(Throwable ex){\r\n                            throwable = ex;\r\n                        }\r\n                    }\r\n\r\n                });\r\n                threadList.add(thread);\r\n                thread.start();\r\n            }\r\n\r\n            // wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }\r\n\r\n            // throw the exception if one occur\r\n            if(throwable != null){\r\n                throw throwable;\r\n            }\r\n\r\n            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");\r\n        }finally{\r\n            dropTable(con, \"ConcurrentWrite\");\r\n        }\r\n    }","startLine":26,"lastLine":51},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestThreads.java|(1850,1874,<72,4>,<121,5>)","rawLines":"/**\r\n     * Create a table with a single row. In different threads on the same connection a int value will be increment.\r\n     * \r\n     * @throws Throwable\r\n     *             if an thread problem occur\r\n     */\r\n    public void testConcurrentThreadWrite() throws Throwable{\r\n        ArrayList threadList = new ArrayList();\r\n        throwable = null;\r\n        final Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        try{\r\n            st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");\r\n            st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");\r\n\r\n            // start threads that check the row count\r\n            for(int i = 0; i < 200; i++){\r\n                Thread thread = new Thread(new Runnable(){\r\n\r\n                    public void run(){\r\n                        try{\r\n                            Statement st2 = con.createStatement();\r\n                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");\r\n                            assertEquals(\"Update Count\", 1, count);\r\n                        }catch(Throwable ex){\r\n                            throwable = ex;\r\n                        }\r\n                    }\r\n\r\n                });\r\n                threadList.add(thread);\r\n                thread.start();\r\n            }\r\n\r\n            // wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }\r\n\r\n            // throw the exception if one occur\r\n            if(throwable != null){\r\n                throw throwable;\r\n            }\r\n\r\n            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");\r\n        }finally{\r\n            dropTable(con, \"ConcurrentWrite\");\r\n        }\r\n    }","startLine":24,"lastLine":49}],"size":20},{"content":"if(isNull()) return 0;int dataType = getDataType();switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:return getIntImpl();case SQLTokenizer.BIGINT:return getLongImpl();case SQLTokenizer.REAL:return getFloatImpl();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(8661,882,<261,4>,<285,5>)","rawLines":"double getDouble() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl();\r\n            case SQLTokenizer.BIGINT:\r\n                return getLongImpl();\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return getFloatImpl();\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                return getDoubleImpl();\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);\r\n    }","startLine":1,"lastLine":20},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(10231,887,<308,4>,<332,5>)","rawLines":"float getFloat() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl();\r\n            case SQLTokenizer.BIGINT:\r\n                return getLongImpl();\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return getFloatImpl();\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                return (float)getDoubleImpl();\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);\r\n    }","startLine":1,"lastLine":20}],"size":20},{"content":"assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );assertFalse(\"next\", rs.next() );assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"first\", rs.first() );assertEquals(\"getRow\", 1, rs.getRow() );assertFalse(\"previous\", rs.previous() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertTrue(\"last\", rs.last() );assertEquals(\"getRow\", 1, rs.getRow() );assertTrue(\"isLast\", rs.isLast() );rs.afterLast();assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );assertTrue(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(2097,1852,<66,4>,<108,5>)","rawLines":"public void testScrollStates() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n        ResultSet rs = st.executeQuery(\"Select * From ResultSet Where 1=0\");\r\n        \r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        rs.moveToInsertRow();\r\n        rs.insertRow();\r\n        \r\n        rs.beforeFirst();\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"next\", rs.next() );\r\n        assertTrue(\"isFirst\", rs.isFirst() );\r\n        assertTrue(\"rowInserted\", rs.rowInserted() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        assertFalse(\"next\", rs.next() );\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        assertTrue(\"first\", rs.first() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        \r\n        assertFalse(\"previous\", rs.previous() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        \r\n        assertTrue(\"last\", rs.last() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        \r\n        rs.afterLast();\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n    }","startLine":19,"lastLine":42},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(3963,1903,<111,4>,<151,5>)","rawLines":"public void testScrollStatesGroupBy() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n        ResultSet rs = st.executeQuery(\"Select i,max(c) From ResultSet Group By i HAVING i=1\");\r\n        \r\n        assertEquals(\"getConcurrency\",ResultSet.CONCUR_READ_ONLY, rs.getConcurrency());\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        rs.beforeFirst();\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"next\", rs.next() );\r\n        assertTrue(\"isFirst\", rs.isFirst() );\r\n        assertFalse(\"rowInserted\", rs.rowInserted() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        assertFalse(\"next\", rs.next() );\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        assertTrue(\"first\", rs.first() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        \r\n        assertFalse(\"previous\", rs.previous() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        \r\n        assertTrue(\"last\", rs.last() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        \r\n        rs.afterLast();\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n    }","startLine":17,"lastLine":40}],"size":20},{"content":"rs.next();rs.next();rs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehenrs.last();count = 0;while(rs.previous()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );rs.beforeFirst();count = -1;while(rs.next()) count++;assertEquals( valueCount, count );}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(19244,808,<729,1>,<757,2>)","rawLines":"public void testOrderBy_ScollableDesc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs;\r\n\t\tint count;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");\r\n\t\t\r\n\t\t//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":10,"lastLine":28},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(18440,796,<698,1>,<726,2>)","rawLines":"public void testOrderBy_Scollable() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs;\r\n\t\tint count;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");\r\n\t\t\r\n\t\t//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":10,"lastLine":28}],"size":16},{"content":"final double getDouble() throws Exception{if(isNull()) return 0;final int places = param2.getInt();double value = param1.getDouble();long factor = 1;if(places > 0){for(int i=0; i<places; i++){factor *= 10;}value *= factor;}else{for(int i=0; i>places; i--){factor *= 10;}value /= factor;}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionFunctionRound.java|(1590,488,<45,4>,<68,5>)","rawLines":"final double getDouble() throws Exception{\r\n\t\tif(isNull()) return 0;\r\n\t\tfinal int places = param2.getInt();\r\n\t\tdouble value = param1.getDouble();\r\n\t\tlong factor = 1;\r\n\t\tif(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}\r\n\t\tvalue = Math.rint( value );\r\n\t\tif(places > 0){\r\n\t\t\tvalue /= factor;\r\n\t\t}else{\r\n\t\t\tvalue *= factor;\r\n\t\t}\r\n\t\treturn value;\r\n    }","startLine":0,"lastLine":15},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionFunctionTruncate.java|(1599,529,<45,4>,<68,5>)","rawLines":"final double getDouble() throws Exception{\r\n\t\tif(isNull()) return 0;\r\n\t\tfinal int places = param2.getInt();\r\n\t\tdouble value = param1.getDouble();\r\n\t\tlong factor = 1;\r\n\t\tif(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}\r\n        value -= value % 1; //modulo also work with values larger long\r\n\t\tif(places > 0){\r\n\t\t\tvalue /= factor;\r\n\t\t}else{\r\n\t\t\tvalue *= factor;\r\n\t\t}\r\n\t\treturn value;\r\n    }","startLine":0,"lastLine":15}],"size":16},{"content":"assertTrue( rs.next() );oldValue = rs.getString(\"v\");int count = 1;while(oldValue != null && rs.next()){String newValue = rs.getString(\"v\");if(newValue != null){assertTrue( oldValue.compareTo( newValue ) > 0 );count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(5916,667,<198,1>,<223,2>)","rawLines":"public void testOrderBy_varchar_desc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":9,"lastLine":25},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(6592,677,<226,1>,<251,2>)","rawLines":"public void testOrderBy_varchar_DescAsc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":9,"lastLine":25}],"size":15},{"content":"rs.next();int count = rs.getInt(1);if (count != rowCount)System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");else System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(6307,1369,<160,4>,<190,5>)","rawLines":"/**\r\n      *  3. Test\r\n      *  Insert only empty rows with the default values of the row with the method insertRow().\r\n      */  \r\n    static void test_InsertEmptyRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert empty rows with insertRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.moveToInsertRow();\r\n                rs.insertRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":18,"lastLine":30},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(4122,1320,<103,4>,<131,5>)","rawLines":"/**\r\n      *  1. Test\r\n      *  Insert rows with default values with a classic insert statement.\r\n      */  \r\n    static void test_InsertClassic(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert rows with default values with a classic insert statement: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                st.execute(\"INSERT INTO \" + tableName + \"(i) VALUES(\" + i +\")\");\r\n            }\r\n            time += System.currentTimeMillis();\r\n            ResultSet rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":16,"lastLine":28}],"size":13},{"content":"case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:return readString();case SQLTokenizer.CLOB:case SQLTokenizer.NCLOB:case SQLTokenizer.LONGNVARCHAR:case SQLTokenizer.LONGVARCHAR:return readLongString();case SQLTokenizer.JAVA_OBJECT:ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());ObjectInputStream ois = new ObjectInputStream(bais);","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(48523,2915,<1270,4>,<1333,5>)","rawLines":"/**\r\n     * It used for ResultSet.getObject()\r\n     */\r\n    @Override\r\n    Object getObject(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return null;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return readBinary();\r\n            case SQLTokenizer.TINYINT:\r\n                    return Utils.getInteger( readUnsignedByte() );\r\n            case SQLTokenizer.SMALLINT:\r\n                    return Utils.getInteger( readShort() );\r\n            case SQLTokenizer.INT:\r\n                    return Utils.getInteger(readInt());\r\n            case SQLTokenizer.BIGINT:\r\n                    return new Long(readLong());\r\n            case SQLTokenizer.REAL:\r\n                    return new Float( readFloat() );\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return new Double( readDouble() );\r\n            case SQLTokenizer.MONEY:\r\n                    return Money.createFromUnscaledValue(readLong());\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return Money.createFromUnscaledValue(readInt());\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return readString();\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return readLongString();\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return ois.readObject();\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return readLongBinary();\r\n            case SQLTokenizer.TIMESTAMP:\r\n                    return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP );\r\n            case SQLTokenizer.TIME:\r\n                    return new DateTime( readTime(), SQLTokenizer.TIME );\r\n            case SQLTokenizer.DATE:\r\n                    return new DateTime( readDate(), SQLTokenizer.DATE );\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP );\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    return Utils.bytes2unique( page, this.offset);\r\n            default: throw new Error();\r\n        }\r\n    }","startLine":34,"lastLine":46},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(51452,3101,<1336,4>,<1400,5>)","rawLines":"/**\r\n     * It used for ResultSet.getString()\r\n     */\r\n    @Override\r\n    String getString( int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return null;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n                    return readBoolean() ? \"1\" : \"0\";\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return String.valueOf( readBoolean() );\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2hex( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return String.valueOf( readUnsignedByte() );\r\n            case SQLTokenizer.SMALLINT:\r\n                    return String.valueOf( readShort() );\r\n            case SQLTokenizer.INT:\r\n                    return String.valueOf( readInt() );\r\n            case SQLTokenizer.BIGINT:\r\n                    return String.valueOf( readLong() );\r\n            case SQLTokenizer.REAL:\r\n                    return String.valueOf( readFloat() );\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return String.valueOf( readDouble() );\r\n            case SQLTokenizer.MONEY:\r\n                    return Money.createFromUnscaledValue( readLong() ).toString();\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return Money.createFromUnscaledValue( readInt() ).toString();\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().toString();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return readString();\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return readLongString();\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return ois.readObject().toString();\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2hex( readLongBinary() );\r\n            case SQLTokenizer.TIMESTAMP:\r\n                    return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP ).toString();\r\n            case SQLTokenizer.TIME:\r\n                    return new DateTime( readTime(), SQLTokenizer.TIME ).toString();\r\n            case SQLTokenizer.DATE:\r\n                    return new DateTime( readDate(), SQLTokenizer.DATE ).toString();\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP ).toString();\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    return Utils.bytes2unique( page, this.offset);\r\n            default: throw new Error();\r\n        }\r\n    }","startLine":35,"lastLine":47}],"size":13},{"content":"try{Statement st1 = con.createStatement();ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();int count = rs.getInt(1);if (count != rowCount){if (count == 0){createTestDataWithClassicInsert( con );rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();count = rs.getInt(1);}if (count != rowCount){","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(7700,2106,<194,4>,<243,5>)","rawLines":"/**\r\n      *  4. Test\r\n      *  Delete rows with the method deleteRow().\r\n      */  \r\n    static void test_DeleteRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test delete rows with deleteRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.next();\r\n                rs.deleteRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            count = rs.getInt(1);\r\n            if (count != 0)\r\n                 System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":8,"lastLine":21},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(12551,2566,<307,4>,<364,5>)","rawLines":"/**\r\n      *  6. Test\r\n      *  Request one page of rows from a large ResultSet.\r\n      */  \r\n    static void test_RowRequestPages(Connection con){\r\n        int pages = 100; \r\n        int rows  = rowCount / pages;\r\n        System.out.println();\r\n        System.out.println( \"Test request row pages : \" + pages + \" pages, \" +rows + \" rows per page\");\r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\r\n            st.setFetchSize( rows );\r\n            for (int i=0; i<pages; i++){\r\n                rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n                rs.absolute( i*rows+1 );\r\n                for (int r=1; r<rows; r++){\r\n                    // only (rows-1) rows because absolute has already the first row\r\n                    if (!rs.next()){\r\n                        System.out.println( \"  Failed: No rows were found at page \" + i + \" page and row \" + r);\r\n                        return;\r\n                    }\r\n                    int col_i = rs.getInt(\"i\");\r\n                    if (col_i != (i*rows+r)){\r\n                        System.out.println( \"  Failed: Wrong row \" + col_i + \", it should be row \" + (i*rows+r));\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":9,"lastLine":22}],"size":13},{"content":"pr.close();time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");fis.close();java.io.File file = new java.io.File(tableName+\".bin\");file.delete();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(25903,1379,<609,4>,<641,5>)","rawLines":"/**\r\n      *  12. Test\r\n      *  Update large binary data.\r\n      */  \r\n    static void test_UpdateLargeBinary(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update large binary data: \" + rowCount + \"KB bytes\");\r\n        \r\n        try{\r\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\r\n            byte bytes[] = new byte[1024];\r\n            for(int i=0; i<rowCount; i++){\r\n                fos.write(bytes);\r\n            }\r\n            fos.close();\r\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\r\n            long time = -System.currentTimeMillis();\r\n            PreparedStatement pr = con.prepareStatement(\"Update \" + tableName + \" set im=? WHERE pr=1\");\r\n            pr.setBinaryStream( 1, fis, rowCount*1024 );\r\n            pr.execute();\r\n            pr.close();\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            fis.close();\r\n            java.io.File file = new java.io.File(tableName+\".bin\");\r\n            file.delete();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":20,"lastLine":32},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(27309,1649,<646,4>,<682,5>)","rawLines":"/**\r\n      *  12. Test\r\n      *  Update large binary data with a SP.\r\n      */  \r\n    static void test_UpdateLargeBinaryWithSP(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update large binary data with a SP: \" + rowCount + \"KB bytes\");\r\n        \r\n        try{\r\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\r\n            byte bytes[] = new byte[1024];\r\n            for(int i=0; i<rowCount; i++){\r\n                fos.write(bytes);\r\n            }\r\n            fos.close();\r\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"CREATE PROCEDURE #UpdateLargeBinary(@im image) as Update \" + tableName + \" set im=@im WHERE pr=2\");\r\n            PreparedStatement pr = con.prepareStatement(\"exec #UpdateLargeBinary ?\");\r\n            pr.setBinaryStream( 1, fis, rowCount*1024 );\r\n            pr.execute();\r\n            st.execute(\"DROP PROCEDURE #UpdateLargeBinary\");\r\n            st.close();\r\n            pr.close();\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            fis.close();\r\n            java.io.File file = new java.io.File(tableName+\".bin\");\r\n            file.delete();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":24,"lastLine":36}],"size":13},{"content":"return;}}time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");pr.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(16533,2185,<404,4>,<449,5>)","rawLines":"/**\r\n      *  8. Test\r\n      *  Update rows with a PreparedStatement.\r\n      */  \r\n    static void test_UpdateRowsPrepare(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with a PreparedStatement: \" + rowCount + \" rows\");\r\n        try{\r\n            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n\t            pr.setBytes (  1, byteArray );\r\n\t            pr.setString(  2 , \"Test\" );\r\n\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t            pr.setFloat (  4, (float)1234.56789 );\r\n\t            pr.setFloat (  5 , (float)9876.54321 );\r\n\t            pr.setBytes (  6, largeByteArray );\r\n\t            pr.setInt   (  7 , i );\r\n\t            pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );\r\n\t            pr.setInt   (  19 , i );\r\n                int updateCount = pr.executeUpdate();\r\n                if (updateCount != 1){\r\n                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":33,"lastLine":45},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(21582,2559,<508,4>,<559,5>)","rawLines":"/**\r\n      *  10. Test\r\n      *  Update rows with a PreparedStatement and Batch.\r\n      */  \r\n    static void test_UpdateRowsPrepareBatch(Connection con){\r\n        int batchSize = 10;\r\n        int batches = rowCount / batchSize;\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with PreparedStatement and Batches: \" + batches + \" batches, \" + batchSize + \" batch size\");\r\n        \r\n        try{\r\n            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<batches; i++){\r\n                for (int r=0; r<batchSize; r++){\r\n\t                pr.setBytes (  1, byteArray );\r\n\t                pr.setString(  2 , \"Test\" );\r\n\t                pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t                pr.setFloat (  4, (float)1234.56789 );\r\n\t                pr.setFloat (  5 , (float)9876.54321 );\r\n\t                pr.setBytes (  6, largeByteArray );\r\n\t                pr.setInt   (  7 , i*batchSize + r );\r\n\t                pr.setDouble(  8 , 23.45 );\r\n\t                pr.setDouble(  9 , 567.45 );\r\n\t                pr.setFloat (  10 , (float)78.89 );\r\n\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t                pr.setShort (  12, (short)23456 );\r\n\t                pr.setFloat (  13, (float)34.56 );\r\n\t                pr.setString(  14, \"sysname (30) NULL\" );\r\n\t                pr.setString(  15 , \"text NULL\" );\r\n\t                pr.setByte  (  16, (byte)28 );\r\n\t                pr.setBytes (  17, byteArray );\r\n\t                pr.setString(  18, \"varchar (255) NULL\" );\r\n\t                pr.setInt   (  19 , i );\r\n\t                pr.addBatch();\r\n\t            }\r\n                int[] updateCount = pr.executeBatch();\r\n                if (updateCount.length != batchSize){\r\n                    System.out.println( \"  Failed: Update count size should be \" + batchSize + \" but it is \" + updateCount.length + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":39,"lastLine":51}],"size":13},{"content":"assertTrue( rs.next() );oldValue = (Integer)rs.getObject(\"i\");assertNull(oldValue);assertTrue( rs.next() );oldValue = (Integer)rs.getObject(\"i\");int count = 1;while(rs.next()){assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );oldValue = (Integer)rs.getObject(\"i\");count++;}assertEquals( valueCount, count );}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(9182,647,<329,1>,<352,2>)","rawLines":"public void testOrderBy_int() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":9,"lastLine":23},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(11277,655,<414,1>,<437,2>)","rawLines":"public void testOrderBy_int_asc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":9,"lastLine":23}],"size":13},{"content":"case SQLTokenizer.TINYINT:return readUnsignedByte();case SQLTokenizer.SMALLINT:return readShort();case SQLTokenizer.INT:return readInt();case SQLTokenizer.BIGINT:return readLong();case SQLTokenizer.REAL:return readFloat();case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(40303,2625,<1085,4>,<1147,5>)","rawLines":"/**\r\n     * It used for ResultSet.getDouble()\r\n     */\r\n    @Override\r\n    double getDouble(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2double( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / 10000.0;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / 10000.0;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().doubleValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Double.parseDouble( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Double.parseDouble( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return Double.parseDouble( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2double( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });\r\n        }\r\n    }","startLine":14,"lastLine":25},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(37658,2631,<1020,4>,<1082,5>)","rawLines":"/**\r\n     * It used for ResultSet.getFloat()\r\n     */\r\n    @Override\r\n    float getFloat(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2float( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return (float)readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / (float)10000.0;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / (float)10000.0;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().floatValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Float.parseFloat( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Float.parseFloat( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return Float.parseFloat( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2float( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"REAL\" });\r\n        }\r\n    }","startLine":14,"lastLine":25}],"size":12},{"content":"if(failed == null){failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);failed.initCause(ex);}failed.setNextException(ex);}}batches.clear();if(failed != null)throw failed;return result;}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSPreparedStatement.java|(7807,865,<235,4>,<260,2>)","rawLines":"public int[] executeBatch() throws BatchUpdateException {\r\n\t\tif(batches == null || batches.size() == 0) return new int[0];\r\n\t\tint[] result = new int[batches.size()];\r\n\t\tBatchUpdateException failed = null;\r\n\t\tfor(int b=0; b<batches.size(); b++){\r\n\t\t\ttry{\r\n                checkStatement();\r\n\t\t\t\tExpressionValue[] values = (ExpressionValue[])batches.get(b);\r\n\t\t\t\tfor(int i=0; i<values.length; i++){\r\n\t\t\t\t\t((ExpressionValue)cmd.params.get(i)).set( values[i] );\r\n\t\t\t\t}\r\n\t\t\t\tresult[b] = executeUpdate();\r\n\t\t\t} catch (SQLException ex) {\r\n\t\t\t\tresult[b] = EXECUTE_FAILED;\r\n\t\t\t\tif(failed == null){\r\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n\t\t\t\t\tfailed.initCause(ex);\r\n\t\t\t\t}\r\n\t\t\t\tfailed.setNextException(ex);\r\n\t\t\t}\r\n\t\t}\r\n    \tbatches.clear();\r\n    \tif(failed != null)\r\n    \t\tthrow failed;\r\n    \treturn result;\r\n\t}","startLine":14,"lastLine":25},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSStatement.java|(6599,836,<261,4>,<282,5>)","rawLines":"public int[] executeBatch() throws BatchUpdateException{\r\n        if(batches == null)\r\n            return new int[0];\r\n        final int[] result = new int[batches.size()];\r\n        BatchUpdateException failed = null;\r\n        for(int i = 0; i < result.length; i++){\r\n            try{\r\n                result[i] = executeUpdate((String)batches.get(i));\r\n            }catch(SQLException ex){\r\n                result[i] = EXECUTE_FAILED;\r\n                if(failed == null){\r\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n                    failed.initCause(ex);\r\n                }\r\n                failed.setNextException(ex);\r\n            }\r\n        }\r\n        batches.clear();\r\n        if(failed != null)\r\n            throw failed;\r\n        return result;\r\n    }","startLine":10,"lastLine":21}],"size":12},{"content":"pr.setDouble(  8 , 23.45 );pr.setDouble(  9 , 567.45 );pr.setFloat (  10 , (float)78.89 );pr.setTime  (  11, new Time( System.currentTimeMillis() ) );pr.setShort (  12, (short)23456 );pr.setFloat (  13, (float)34.56 );pr.setString(  14, \"sysname (30) NULL\" );pr.setString(  15 , \"text NULL\" );pr.setByte  (  16, (byte)28 );pr.setBytes (  17, byteArray );pr.setString(  18, \"varchar (255) NULL\" );pr.setInt   (  19 , i );","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(21582,2559,<508,4>,<559,5>)","rawLines":"/**\r\n      *  10. Test\r\n      *  Update rows with a PreparedStatement and Batch.\r\n      */  \r\n    static void test_UpdateRowsPrepareBatch(Connection con){\r\n        int batchSize = 10;\r\n        int batches = rowCount / batchSize;\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with PreparedStatement and Batches: \" + batches + \" batches, \" + batchSize + \" batch size\");\r\n        \r\n        try{\r\n            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<batches; i++){\r\n                for (int r=0; r<batchSize; r++){\r\n\t                pr.setBytes (  1, byteArray );\r\n\t                pr.setString(  2 , \"Test\" );\r\n\t                pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t                pr.setFloat (  4, (float)1234.56789 );\r\n\t                pr.setFloat (  5 , (float)9876.54321 );\r\n\t                pr.setBytes (  6, largeByteArray );\r\n\t                pr.setInt   (  7 , i*batchSize + r );\r\n\t                pr.setDouble(  8 , 23.45 );\r\n\t                pr.setDouble(  9 , 567.45 );\r\n\t                pr.setFloat (  10 , (float)78.89 );\r\n\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t                pr.setShort (  12, (short)23456 );\r\n\t                pr.setFloat (  13, (float)34.56 );\r\n\t                pr.setString(  14, \"sysname (30) NULL\" );\r\n\t                pr.setString(  15 , \"text NULL\" );\r\n\t                pr.setByte  (  16, (byte)28 );\r\n\t                pr.setBytes (  17, byteArray );\r\n\t                pr.setString(  18, \"varchar (255) NULL\" );\r\n\t                pr.setInt   (  19 , i );\r\n\t                pr.addBatch();\r\n\t            }\r\n                int[] updateCount = pr.executeBatch();\r\n                if (updateCount.length != batchSize){\r\n                    System.out.println( \"  Failed: Update count size should be \" + batchSize + \" but it is \" + updateCount.length + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":22,"lastLine":33},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(16533,2185,<404,4>,<449,5>)","rawLines":"/**\r\n      *  8. Test\r\n      *  Update rows with a PreparedStatement.\r\n      */  \r\n    static void test_UpdateRowsPrepare(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with a PreparedStatement: \" + rowCount + \" rows\");\r\n        try{\r\n            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n\t            pr.setBytes (  1, byteArray );\r\n\t            pr.setString(  2 , \"Test\" );\r\n\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t            pr.setFloat (  4, (float)1234.56789 );\r\n\t            pr.setFloat (  5 , (float)9876.54321 );\r\n\t            pr.setBytes (  6, largeByteArray );\r\n\t            pr.setInt   (  7 , i );\r\n\t            pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );\r\n\t            pr.setInt   (  19 , i );\r\n                int updateCount = pr.executeUpdate();\r\n                if (updateCount != 1){\r\n                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":18,"lastLine":29}],"size":12},{"content":"buf.append(' ');formatNumber( details.year, 4, buf);buf.append(' ');formatHour12( details.hour, buf );buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf);buf.append( details.hour < 12 ? \"AM\" : \"PM\" );return buf.toString();","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":135,"lastLine":146},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":261,"lastLine":272}],"size":12},{"content":"if(idx == -1){if(status.nodeValue != null){if(status.nodeValue instanceof IndexNode){level++;nodeStack.push(new IndexNodeScrollStatus( \t(IndexNode)status.nodeValue,(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),scroll, level));continue;}elsereturn getReturnValue(status.nodeValue);}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java|(2347,2542,<66,1>,<147,2>)","rawLines":"/**\r\n\t * Return the next rowOffset of this index. You need to call reset() before the first use. \r\n\t * @param next if true the next rowOffset else the previous rowOffset\r\n\t */\r\n\tfinal long getRowOffset( boolean scroll){\r\n\t\tif(longList != null){\r\n\t\t\tlong rowOffset = scroll ? \r\n\t\t\t\t\t\t\t\tlongList.getNext(longListEnum) : \r\n\t\t\t\t\t\t\t\tlongList.getPrevious(longListEnum);\r\n\t\t\tif(rowOffset < 0){\r\n\t\t\t\t// No more entries on this node\r\n\t\t\t\tlongList = null;\r\n\t\t\t}else{\r\n\t\t\t\treturn rowOffset;\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile(true){\r\n\t\t\tIndexNodeScrollStatus status = (IndexNodeScrollStatus)nodeStack.peek();\r\n\t\t\tint level = status.level;\r\n\t\t\tif(!status.asc ^ scroll){\r\n\t\t\t\t//ASC order\r\n\t\t\t\tint idx = ++status.idx;\r\n\t\t\t\tif(idx == -1){\r\n\t\t\t\t\tif(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node\r\n\t\t\t\t\tidx = ++status.idx;\r\n\t\t\t\t}\r\n\t\t\t\tif(idx >= status.nodes.length){\r\n\t\t\t\t\t//No more nodes in this level\r\n\t\t\t\t\tif(nodeStack.size() > 1){\r\n\t\t\t\t\t\tnodeStack.pop();\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t//No more RowOffsets in this Index\r\n                        status.idx = status.nodes.length; //to prevent problems with scroll back after multiple calls after the end.\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tIndexNode node = status.nodes[idx];\r\n\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );\r\n\t\t\t}else{\r\n\t\t\t\t//DESC order\r\n\t\t\t\tint idx = --status.idx;\r\n\t\t\t\tif(idx == -1){\r\n\t\t\t\t\tif(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node\r\n\t\t\t\t}\r\n\t\t\t\tif(idx < 0){\r\n\t\t\t\t\t//No more nodes in this level\r\n\t\t\t\t\tif(nodeStack.size() > 1){\r\n\t\t\t\t\t\tnodeStack.pop();\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t//No more RowOffsets in this Index\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tIndexNode node = status.nodes[idx];\r\n\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );\r\n\t\t\t}\r\n\t\t}\r\n\t}","startLine":22,"lastLine":33},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java|(2347,2542,<66,1>,<147,2>)","rawLines":"/**\r\n\t * Return the next rowOffset of this index. You need to call reset() before the first use. \r\n\t * @param next if true the next rowOffset else the previous rowOffset\r\n\t */\r\n\tfinal long getRowOffset( boolean scroll){\r\n\t\tif(longList != null){\r\n\t\t\tlong rowOffset = scroll ? \r\n\t\t\t\t\t\t\t\tlongList.getNext(longListEnum) : \r\n\t\t\t\t\t\t\t\tlongList.getPrevious(longListEnum);\r\n\t\t\tif(rowOffset < 0){\r\n\t\t\t\t// No more entries on this node\r\n\t\t\t\tlongList = null;\r\n\t\t\t}else{\r\n\t\t\t\treturn rowOffset;\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile(true){\r\n\t\t\tIndexNodeScrollStatus status = (IndexNodeScrollStatus)nodeStack.peek();\r\n\t\t\tint level = status.level;\r\n\t\t\tif(!status.asc ^ scroll){\r\n\t\t\t\t//ASC order\r\n\t\t\t\tint idx = ++status.idx;\r\n\t\t\t\tif(idx == -1){\r\n\t\t\t\t\tif(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node\r\n\t\t\t\t\tidx = ++status.idx;\r\n\t\t\t\t}\r\n\t\t\t\tif(idx >= status.nodes.length){\r\n\t\t\t\t\t//No more nodes in this level\r\n\t\t\t\t\tif(nodeStack.size() > 1){\r\n\t\t\t\t\t\tnodeStack.pop();\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t//No more RowOffsets in this Index\r\n                        status.idx = status.nodes.length; //to prevent problems with scroll back after multiple calls after the end.\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tIndexNode node = status.nodes[idx];\r\n\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );\r\n\t\t\t}else{\r\n\t\t\t\t//DESC order\r\n\t\t\t\tint idx = --status.idx;\r\n\t\t\t\tif(idx == -1){\r\n\t\t\t\t\tif(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node\r\n\t\t\t\t}\r\n\t\t\t\tif(idx < 0){\r\n\t\t\t\t\t//No more nodes in this level\r\n\t\t\t\t\tif(nodeStack.size() > 1){\r\n\t\t\t\t\t\tnodeStack.pop();\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t//No more RowOffsets in this Index\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tIndexNode node = status.nodes[idx];\r\n\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );\r\n\t\t\t}\r\n\t\t}\r\n\t}","startLine":53,"lastLine":64}],"size":12},{"content":"formatNumber( details.year, 4, buf);buf.append('-');formatNumber( details.month+1, 2, buf);buf.append('-');formatNumber( details.day, 2, buf);buf.append(' ');formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":213,"lastLine":223},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":227,"lastLine":237}],"size":11},{"content":"}if(serializeConnections.size() > 0){Iterator values = locks.values().iterator();while(values.hasNext()){TableStorePage lock = (TableStorePage)values.next();if(lock.con != con) return null;}}tabLockConnection = con;tabLockCount++;TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Table.java|(11663,4506,<340,4>,<451,2>)","rawLines":"/**\r\n     * Request a page lock. If the request is valid then it return the StorePage. \r\n     * In the other case it return null.\r\n     * @param page The fileOffset or -1 for a new page\r\n     * @throws SQLException \r\n     */\r\n\tfinal private TableStorePage requestLockImpl(SSConnection con, int pageOperation, long page) throws SQLException{\r\n\t\tsynchronized(locks){\r\n\t\t\tif(tabLockConnection != null && tabLockConnection != con) return null;\r\n\t\t\tswitch(con.isolationLevel){\r\n\t\t\t\tcase Connection.TRANSACTION_SERIALIZABLE:\r\n\t\t\t\t\tserializeConnections.put( con, con);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tswitch(pageOperation){\r\n\t\t\t\tcase SQLTokenizer.CREATE:{\r\n\t\t\t\t\t\t// first check if another connection has a lock before creating a table lock\r\n\t\t\t\t\t\tif(locks.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(int i=0; i<locksInsert.size(); i++){\r\n\t\t\t\t\t\t\t//the first StorePage in the linked list must be ever TableStorePageInsert\r\n\t\t\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);\r\n\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(serializeConnections.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttabLockConnection = con;\r\n\t\t\t\t\t\ttabLockCount++;\r\n\t\t\t\t\t\tTableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\r\n\t\t\t\t\t\tcon.add(lock);\r\n\t\t\t\t\t\treturn lock;\r\n\t\t\t\t\t}\r\n                case SQLTokenizer.ALTER:{\r\n                    // first check if there is any lock before creating a table lock\r\n                    if(locks.size() > 0 || locksInsert.size() > 0){\r\n                        return null;\r\n                    }\r\n                    if(serializeConnections.size() > 0){\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }\r\n                    tabLockConnection = con;\r\n                    tabLockCount++;\r\n                    TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\r\n                    lock.rollback();\r\n                    return lock;\r\n                }\r\n\t\t\t\tcase SQLTokenizer.INSERT:{\r\n\t\t\t\t\t\t// if there are more as one Connection with a serializable lock then an INSERT is not valid\r\n\t\t\t\t\t\tif(serializeConnections.size() > 1) return null;\r\n\t\t\t\t\t\tif(serializeConnections.size() == 1 && serializeConnections.get(con) == null) return null;\r\n\t\t\t\t\t\tTableStorePageInsert lock = new TableStorePageInsert(con, this, LOCK_INSERT);\r\n\t\t\t\t\t\tlocksInsert.add( lock );\r\n\t\t\t\t\t\tcon.add(lock);\r\n\t\t\t\t\t\treturn lock;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase SQLTokenizer.SELECT:\r\n\t\t\t\tcase SQLTokenizer.UPDATE:{\r\n\t\t\t\t\t\tLong pageKey = new Long(page); //TODO performance\r\n\t\t\t\t\t\tTableStorePage prevLock = null;\r\n\t\t\t\t\t\tTableStorePage lock = (TableStorePage)locks.get( pageKey );\r\n\t\t\t\t\t\tTableStorePage usableLock = null;\r\n\t\t\t\t\t\twhile(lock != null){\r\n\t\t\t\t\t\t\tif(lock.con == con || \r\n\t\t\t\t\t\t\t   con.isolationLevel <= Connection.TRANSACTION_READ_UNCOMMITTED){\r\n\t\t\t\t\t\t\t    usableLock = lock;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t    if(lock.lockType == LOCK_WRITE){\r\n\t\t\t\t\t\t\t        return null; // write lock of another Connection\r\n\t\t\t\t\t\t\t    }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tprevLock = lock;\r\n\t\t\t\t\t\t\tlock = lock.nextLock;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(usableLock != null){\r\n\t\t\t\t\t\t    return usableLock;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlock = new TableStorePage( con, this, LOCK_NONE, page);\r\n\t\t\t\t\t\tif(con.isolationLevel >= Connection.TRANSACTION_REPEATABLE_READ || pageOperation == SQLTokenizer.UPDATE){\r\n\t\t\t\t\t\t\tlock.lockType = pageOperation == SQLTokenizer.UPDATE ? LOCK_WRITE : LOCK_READ;\r\n\t\t\t\t\t\t\tif(prevLock != null){\r\n\t\t\t\t\t\t\t    prevLock.nextLock = lock.nextLock;\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t    locks.put( pageKey, lock );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcon.add(lock);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn lock;\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\t// is used for written BLOB and CLOB\r\n\t\t\t\t\t// the difference to INSERT is that page described the size of the byte buffer\r\n\t\t\t\t\treturn new TableStorePage( con, this, LOCK_INSERT, -1);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"pageOperation:\"+pageOperation);\r\n\t\t\t}\r\n\t\t}\r\n\t}","startLine":29,"lastLine":39},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Table.java|(11663,4506,<340,4>,<451,2>)","rawLines":"/**\r\n     * Request a page lock. If the request is valid then it return the StorePage. \r\n     * In the other case it return null.\r\n     * @param page The fileOffset or -1 for a new page\r\n     * @throws SQLException \r\n     */\r\n\tfinal private TableStorePage requestLockImpl(SSConnection con, int pageOperation, long page) throws SQLException{\r\n\t\tsynchronized(locks){\r\n\t\t\tif(tabLockConnection != null && tabLockConnection != con) return null;\r\n\t\t\tswitch(con.isolationLevel){\r\n\t\t\t\tcase Connection.TRANSACTION_SERIALIZABLE:\r\n\t\t\t\t\tserializeConnections.put( con, con);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tswitch(pageOperation){\r\n\t\t\t\tcase SQLTokenizer.CREATE:{\r\n\t\t\t\t\t\t// first check if another connection has a lock before creating a table lock\r\n\t\t\t\t\t\tif(locks.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(int i=0; i<locksInsert.size(); i++){\r\n\t\t\t\t\t\t\t//the first StorePage in the linked list must be ever TableStorePageInsert\r\n\t\t\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);\r\n\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(serializeConnections.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttabLockConnection = con;\r\n\t\t\t\t\t\ttabLockCount++;\r\n\t\t\t\t\t\tTableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\r\n\t\t\t\t\t\tcon.add(lock);\r\n\t\t\t\t\t\treturn lock;\r\n\t\t\t\t\t}\r\n                case SQLTokenizer.ALTER:{\r\n                    // first check if there is any lock before creating a table lock\r\n                    if(locks.size() > 0 || locksInsert.size() > 0){\r\n                        return null;\r\n                    }\r\n                    if(serializeConnections.size() > 0){\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }\r\n                    tabLockConnection = con;\r\n                    tabLockCount++;\r\n                    TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\r\n                    lock.rollback();\r\n                    return lock;\r\n                }\r\n\t\t\t\tcase SQLTokenizer.INSERT:{\r\n\t\t\t\t\t\t// if there are more as one Connection with a serializable lock then an INSERT is not valid\r\n\t\t\t\t\t\tif(serializeConnections.size() > 1) return null;\r\n\t\t\t\t\t\tif(serializeConnections.size() == 1 && serializeConnections.get(con) == null) return null;\r\n\t\t\t\t\t\tTableStorePageInsert lock = new TableStorePageInsert(con, this, LOCK_INSERT);\r\n\t\t\t\t\t\tlocksInsert.add( lock );\r\n\t\t\t\t\t\tcon.add(lock);\r\n\t\t\t\t\t\treturn lock;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase SQLTokenizer.SELECT:\r\n\t\t\t\tcase SQLTokenizer.UPDATE:{\r\n\t\t\t\t\t\tLong pageKey = new Long(page); //TODO performance\r\n\t\t\t\t\t\tTableStorePage prevLock = null;\r\n\t\t\t\t\t\tTableStorePage lock = (TableStorePage)locks.get( pageKey );\r\n\t\t\t\t\t\tTableStorePage usableLock = null;\r\n\t\t\t\t\t\twhile(lock != null){\r\n\t\t\t\t\t\t\tif(lock.con == con || \r\n\t\t\t\t\t\t\t   con.isolationLevel <= Connection.TRANSACTION_READ_UNCOMMITTED){\r\n\t\t\t\t\t\t\t    usableLock = lock;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t    if(lock.lockType == LOCK_WRITE){\r\n\t\t\t\t\t\t\t        return null; // write lock of another Connection\r\n\t\t\t\t\t\t\t    }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tprevLock = lock;\r\n\t\t\t\t\t\t\tlock = lock.nextLock;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(usableLock != null){\r\n\t\t\t\t\t\t    return usableLock;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlock = new TableStorePage( con, this, LOCK_NONE, page);\r\n\t\t\t\t\t\tif(con.isolationLevel >= Connection.TRANSACTION_REPEATABLE_READ || pageOperation == SQLTokenizer.UPDATE){\r\n\t\t\t\t\t\t\tlock.lockType = pageOperation == SQLTokenizer.UPDATE ? LOCK_WRITE : LOCK_READ;\r\n\t\t\t\t\t\t\tif(prevLock != null){\r\n\t\t\t\t\t\t\t    prevLock.nextLock = lock.nextLock;\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t    locks.put( pageKey, lock );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcon.add(lock);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn lock;\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\t// is used for written BLOB and CLOB\r\n\t\t\t\t\t// the difference to INSERT is that page described the size of the byte buffer\r\n\t\t\t\t\treturn new TableStorePage( con, this, LOCK_INSERT, -1);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"pageOperation:\"+pageOperation);\r\n\t\t\t}\r\n\t\t}\r\n\t}","startLine":47,"lastLine":57}],"size":11},{"content":"public void run(){try{Connection con2 = AllTests.createConnection();Statement st2 = con2.createStatement();int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");assertEquals(\"Update Count\", 1, count);con2.close();}catch(Throwable ex){throwable = ex;}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestThreads.java|(4508,555,<143,20>,<153,21>)","rawLines":"public void run(){\r\n                        try{\r\n                            Connection con2 = AllTests.createConnection();\r\n                            Statement st2 = con2.createStatement();\r\n                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");\r\n                            assertEquals(\"Update Count\", 1, count);\r\n                            con2.close();\r\n                        }catch(Throwable ex){\r\n                            throwable = ex;\r\n                        }\r\n                    }","startLine":0,"lastLine":10},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestThreads.java|(3734,1973,<124,4>,<175,5>)","rawLines":"/**\r\n     * Create a table with a single row. In different connections a int value will be increment.\r\n     * \r\n     * @throws Throwable\r\n     *             if an thread problem occur\r\n     */\r\n    public void testConcurrentConnectionWrite() throws Throwable{\r\n        ArrayList threadList = new ArrayList();\r\n        throwable = null;\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        try{\r\n            st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");\r\n            st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");\r\n\r\n            // start threads that check the row count\r\n            for(int i = 0; i < 200; i++){\r\n                Thread thread = new Thread(new Runnable(){\r\n\r\n                    public void run(){\r\n                        try{\r\n                            Connection con2 = AllTests.createConnection();\r\n                            Statement st2 = con2.createStatement();\r\n                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");\r\n                            assertEquals(\"Update Count\", 1, count);\r\n                            con2.close();\r\n                        }catch(Throwable ex){\r\n                            throwable = ex;\r\n                        }\r\n                    }\r\n\r\n                });\r\n                threadList.add(thread);\r\n                thread.start();\r\n            }\r\n\r\n            // wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }\r\n\r\n            // throw the exception if one occur\r\n            if(throwable != null){\r\n                throw throwable;\r\n            }\r\n\r\n            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");\r\n        }finally{\r\n            dropTable(con, \"ConcurrentWrite\");\r\n        }\r\n    }","startLine":19,"lastLine":29}],"size":11},{"content":"}time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(24166,1718,<563,4>,<606,5>)","rawLines":"/**\r\n      *  11. Test\r\n      *  Scroll and call the getXXX methods for every columns.\r\n      */  \r\n    static void test_Scroll_getXXX(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test scroll and call the getXXX methods for every columns: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement();\r\n            long time = -System.currentTimeMillis();\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n            for (int i=0; i<rowCount; i++){\r\n                    rs.next();\r\n\t                rs.getInt   (  1 );\r\n\t                rs.getBytes (  2 );\r\n\t                rs.getString(  3 );\r\n\t                rs.getDate  (  4 );\r\n\t                rs.getFloat (  5 );\r\n\t                rs.getFloat (  6 );\r\n\t                rs.getBytes (  7 );\r\n\t                rs.getInt   (  8 );\r\n\t                rs.getDouble(  9 );\r\n\t                rs.getDouble(  10 );\r\n\t                rs.getFloat (  11 );\r\n\t                rs.getTime  (  12 );\r\n\t                rs.getShort (  13 );\r\n\t                rs.getFloat (  14 );\r\n\t                rs.getString(  15 );\r\n\t                rs.getString(  16 );\r\n\t                rs.getByte  (  17 );\r\n\t                rs.getBytes (  18 );\r\n\t                rs.getString(  19 );\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":33,"lastLine":43},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(12551,2566,<307,4>,<364,5>)","rawLines":"/**\r\n      *  6. Test\r\n      *  Request one page of rows from a large ResultSet.\r\n      */  \r\n    static void test_RowRequestPages(Connection con){\r\n        int pages = 100; \r\n        int rows  = rowCount / pages;\r\n        System.out.println();\r\n        System.out.println( \"Test request row pages : \" + pages + \" pages, \" +rows + \" rows per page\");\r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\r\n            st.setFetchSize( rows );\r\n            for (int i=0; i<pages; i++){\r\n                rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n                rs.absolute( i*rows+1 );\r\n                for (int r=1; r<rows; r++){\r\n                    // only (rows-1) rows because absolute has already the first row\r\n                    if (!rs.next()){\r\n                        System.out.println( \"  Failed: No rows were found at page \" + i + \" page and row \" + r);\r\n                        return;\r\n                    }\r\n                    int col_i = rs.getInt(\"i\");\r\n                    if (col_i != (i*rows+r)){\r\n                        System.out.println( \"  Failed: Wrong row \" + col_i + \", it should be row \" + (i*rows+r));\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":47,"lastLine":57}],"size":11},{"content":"pr.setObject( 1, testValue.small);pr.setObject( 2, testValue.large);rs = pr.executeQuery();assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertTrue( \"To few rows\", rs.next() );assertFalse( \"To many rows\", rs.next() );pr.close();","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(6811,4518,<149,4>,<251,5>)","rawLines":"public void runTest() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        ResultSet rs;\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a = b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <= b and b <= a\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where (a > (b))\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a >= b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where not (a >= b)\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a < b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a < b or a>b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <= b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <> b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        PreparedStatement pr = con.prepareStatement(\"Select * from \" + table + \" where a between ? and ?\");\r\n        pr.setObject( 1, testValue.small);\r\n        pr.setObject( 2, testValue.large);\r\n        rs = pr.executeQuery();\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n        st.close();\r\n    }","startLine":81,"lastLine":90},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(6811,4518,<149,4>,<251,5>)","rawLines":"public void runTest() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        ResultSet rs;\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a = b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <= b and b <= a\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where (a > (b))\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a >= b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where not (a >= b)\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a < b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a < b or a>b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <= b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <> b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        PreparedStatement pr = con.prepareStatement(\"Select * from \" + table + \" where a between ? and ?\");\r\n        pr.setObject( 1, testValue.small);\r\n        pr.setObject( 2, testValue.large);\r\n        rs = pr.executeQuery();\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n        st.close();\r\n    }","startLine":60,"lastLine":69}],"size":10},{"content":"}catch(Throwable e){if(raFile != null)try{raFile.close();}catch(Exception e2){DriverManager.println(e2.toString());}throw SmallSQLException.createFromException(e);}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/IndexDescription.java|(5250,1192,<168,4>,<195,5>)","rawLines":"private void load(Database database) throws SQLException{\r\n        try{\r\n            File file = getFile( database, name );\r\n            if(!file.exists())\r\n                throw SmallSQLException.create(Language.INDEX_MISSING, name);\r\n            raFile = Utils.openRaFile( file, database.isReadOnly() );\r\n            ByteBuffer buffer = ByteBuffer.allocate(8);\r\n            raFile.read(buffer);\r\n            buffer.position(0);\r\n            int magic   = buffer.getInt();\r\n            int version = buffer.getInt();\r\n            if(magic != MAGIC_INDEX){\r\n                throw SmallSQLException.create(Language.INDEX_FILE_INVALID, file.getName());\r\n            }\r\n            if(version > INDEX_VERSION){\r\n            \tObject[] params = { new Integer(version), file.getName() };\r\n                throw SmallSQLException.create(Language.FILE_TOONEW, params);\r\n            }\r\n        }catch(Throwable e){\r\n            if(raFile != null)\r\n                try{\r\n                    raFile.close();\r\n                }catch(Exception e2){\r\n                    DriverManager.println(e2.toString());\r\n                }\r\n            throw SmallSQLException.createFromException(e);\r\n        }\r\n    }","startLine":18,"lastLine":27},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/TableView.java|(2638,1483,<75,1>,<114,2>)","rawLines":"/**\r\n\t * Load a Table or View object. \r\n\t */\r\n\tstatic TableView load(SSConnection con, Database database, String name) throws SQLException{\r\n\t    FileChannel raFile = null;\r\n\t\ttry{\r\n\t\t\tString fileName = Utils.createTableViewFileName( database, name );\r\n\t\t\tFile file = new File( fileName );\r\n\t\t\tif(!file.exists())\r\n\t\t\t\tthrow SmallSQLException.create(Language.TABLE_OR_VIEW_MISSING, name);\r\n\t\t\traFile = Utils.openRaFile( file, database.isReadOnly() );\r\n\t\t\tByteBuffer buffer = ByteBuffer.allocate(8);\r\n\t\t\traFile.read(buffer);\r\n\t\t\tbuffer.position(0);\r\n\t\t\tint magic   = buffer.getInt();\r\n\t\t\tint version = buffer.getInt();\r\n\t\t\tswitch(magic){\r\n\t\t\t\tcase MAGIC_TABLE:\r\n\t\t\t\tcase MAGIC_VIEW:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow SmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID, fileName);\r\n\t\t\t}\r\n\t\t\tif(version > TABLE_VIEW_VERSION)\r\n\t\t\t\tthrow SmallSQLException.create(Language.FILE_TOONEW, new Object[] { new Integer(version), fileName });\r\n\t\t\tif(version < TABLE_VIEW_OLD_VERSION)\r\n\t\t\t\tthrow SmallSQLException.create(Language.FILE_TOOOLD, new Object[] { new Integer(version), fileName });\r\n\t\t\tif(magic == MAGIC_TABLE)\r\n\t\t\t\treturn new Table( database, con, name, raFile, raFile.position(), version);\r\n\t\t\t\treturn new View ( con, name, raFile, raFile.position());\r\n\t\t}catch(Throwable e){\r\n\t\t\tif(raFile != null)\r\n\t\t\t\ttry{\r\n\t\t\t\t\traFile.close();\r\n\t\t\t\t}catch(Exception e2){\r\n\t\t\t\t\tDriverManager.println(e2.toString());\r\n\t\t\t\t}\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n\t}","startLine":30,"lastLine":39}],"size":10},{"content":"assertRowCount( 4, \"Select * from transactions\");con.commit();assertRowCount( 4, \"Select * from transactions\");}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(2568,963,<79,1>,<104,2>)","rawLines":"public void testCommit() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions Select * From transactions\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":14,"lastLine":25},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(3539,1055,<107,1>,<135,2>)","rawLines":"/**\r\n\t * In the table there is already one row that is committed.\r\n\t */\r\n\tpublic void testCommitWithOneCommitRow() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions (Select * From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":17,"lastLine":28}],"size":10},{"content":"result |= (((long)nextEntry) << shift);if(listEnum.stack>=3){listEnum.offsetStack[listEnum.stack] = offset;return result;}listEnum.offsetStack[listEnum.stack] = offset+pointerSize;offset = getPointer();shift -= 16;listEnum.stack++;listEnum.resultStack[listEnum.stack] = result;","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/LongTreeList.java|(10103,1277,<356,1>,<397,2>)","rawLines":"/**\r\n\t * Get the next long value from this list.\r\n     * If there are no more values then it return -1.\r\n\t * @return\r\n\t */\r\n\tfinal long getPrevious(LongTreeListEnum listEnum){\r\n\t\tint shift = (3-listEnum.stack) << 4;\r\n\t\tif(shift >= 64){ //a previous call of getNext() has return -1\r\n\t\t\tshift = 48;\r\n\t\t\toffset = 0;\r\n\t\t\tlistEnum.stack = 0;\r\n\t\t\tlistEnum.offsetStack[0] = 2 + pointerSize;\r\n\t\t\tloopToEndOfNode(listEnum);\r\n\t\t}else{\r\n\t\t\tsetPreviousOffset(listEnum);\r\n\t\t}\r\n\t\tlong result = listEnum.resultStack[listEnum.stack];\r\n\t\twhile(true){\r\n\t\t\tint nextEntry = (offset < 0) ? -1 : getUnsignedShort();\r\n\t\t\tif(nextEntry >= 0){\r\n\t\t\t\t// there are more entries in this node\r\n\t\t\t\tresult |= (((long)nextEntry) << shift);\r\n\t\t\t\tif(listEnum.stack>=3){\r\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\r\n\t\t\t\toffset = getPointer();\r\n\t\t\t\tshift -= 16;\r\n\t\t\t\tlistEnum.stack++;\r\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;\r\n\t\t\t\tloopToEndOfNode(listEnum);\r\n\t\t\t}else{\r\n\t\t\t\t//no more entries in this node\r\n\t\t\t\tshift += 16;\r\n\t\t\t\tlistEnum.stack--;\r\n\t\t\t\tif(listEnum.stack<0) return -1; // no more entries\r\n\t\t\t\tresult = listEnum.resultStack[listEnum.stack];\r\n\t\t\t\tsetPreviousOffset(listEnum);\r\n\t\t\t}\r\n\t\t}\r\n\t}","startLine":21,"lastLine":30},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/LongTreeList.java|(8850,1245,<317,1>,<353,2>)","rawLines":"/**\r\n\t * Get the next long value from this list. \r\n     * If there are no more values then it return -1.\r\n\t * @return\r\n\t */\r\n\tfinal long getNext(LongTreeListEnum listEnum){\r\n\t\tint shift = (3-listEnum.stack) << 4;\r\n\t\tif(shift >= 64) return -1; //a previous call has return -1\r\n\t\toffset \t\t= listEnum.offsetStack[listEnum.stack];\r\n\t\tlong result = listEnum.resultStack[listEnum.stack];\r\n\t\tboolean firstNode = (offset == 0); // true if it the first entry in a level\r\n\t\twhile(true){\r\n\t\t\tint nextEntry = getUnsignedShort();\r\n\t\t\tif(nextEntry != 0 || firstNode){\r\n\t\t\t\t//there are more entries in this node\r\n\t\t\t\tresult |= (((long)nextEntry) << shift);\r\n\t\t\t\tif(listEnum.stack>=3){\r\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\r\n\t\t\t\toffset = getPointer();\r\n\t\t\t\tshift -= 16;\r\n\t\t\t\tlistEnum.stack++;\r\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;\r\n\t\t\t\tfirstNode = true;\r\n\t\t\t}else{\r\n\t\t\t\t//no more entries in this node\r\n\t\t\t\tshift += 16;\r\n\t\t\t\tlistEnum.stack--;\r\n\t\t\t\tif(listEnum.stack<0) return -1; // no more entries\r\n\t\t\t\tresult = listEnum.resultStack[listEnum.stack];\r\n\t\t\t\toffset = listEnum.offsetStack[listEnum.stack];\r\n\t\t\t\tfirstNode = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}","startLine":15,"lastLine":24}],"size":10},{"content":"time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(24166,1718,<563,4>,<606,5>)","rawLines":"/**\r\n      *  11. Test\r\n      *  Scroll and call the getXXX methods for every columns.\r\n      */  \r\n    static void test_Scroll_getXXX(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test scroll and call the getXXX methods for every columns: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement();\r\n            long time = -System.currentTimeMillis();\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n            for (int i=0; i<rowCount; i++){\r\n                    rs.next();\r\n\t                rs.getInt   (  1 );\r\n\t                rs.getBytes (  2 );\r\n\t                rs.getString(  3 );\r\n\t                rs.getDate  (  4 );\r\n\t                rs.getFloat (  5 );\r\n\t                rs.getFloat (  6 );\r\n\t                rs.getBytes (  7 );\r\n\t                rs.getInt   (  8 );\r\n\t                rs.getDouble(  9 );\r\n\t                rs.getDouble(  10 );\r\n\t                rs.getFloat (  11 );\r\n\t                rs.getTime  (  12 );\r\n\t                rs.getShort (  13 );\r\n\t                rs.getFloat (  14 );\r\n\t                rs.getString(  15 );\r\n\t                rs.getString(  16 );\r\n\t                rs.getByte  (  17 );\r\n\t                rs.getBytes (  18 );\r\n\t                rs.getString(  19 );\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":34,"lastLine":43},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(12551,2566,<307,4>,<364,5>)","rawLines":"/**\r\n      *  6. Test\r\n      *  Request one page of rows from a large ResultSet.\r\n      */  \r\n    static void test_RowRequestPages(Connection con){\r\n        int pages = 100; \r\n        int rows  = rowCount / pages;\r\n        System.out.println();\r\n        System.out.println( \"Test request row pages : \" + pages + \" pages, \" +rows + \" rows per page\");\r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\r\n            st.setFetchSize( rows );\r\n            for (int i=0; i<pages; i++){\r\n                rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n                rs.absolute( i*rows+1 );\r\n                for (int r=1; r<rows; r++){\r\n                    // only (rows-1) rows because absolute has already the first row\r\n                    if (!rs.next()){\r\n                        System.out.println( \"  Failed: No rows were found at page \" + i + \" page and row \" + r);\r\n                        return;\r\n                    }\r\n                    int col_i = rs.getInt(\"i\");\r\n                    if (col_i != (i*rows+r)){\r\n                        System.out.println( \"  Failed: Wrong row \" + col_i + \", it should be row \" + (i*rows+r));\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":48,"lastLine":57},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(5466,817,<135,4>,<156,5>)","rawLines":"/**\r\n      *  2. Test\r\n      *  Delete all rows with a single statement.\r\n      */  \r\n    static void test_DeleteAll(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test delete all rows: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"DELETE FROM \" + tableName);\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":12,"lastLine":21}],"size":10},{"content":"switch(operation){case IN:case EQUALS_NULL:case EQUALS:    return comp == 0;case GREATER:   return comp >  0;case GRE_EQU:   return comp >= 0;case LESSER:    return comp <  0;case LES_EQU:   return comp <= 0;case UNEQUALS:  return comp != 0;case BETWEEN:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(18644,9508,<530,4>,<718,5>)","rawLines":"boolean getBoolean() throws java.lang.Exception {\r\n        switch(operation){\r\n        \tcase OR:    return left.getBoolean() || right.getBoolean();\r\n            case AND:   return left.getBoolean() && right.getBoolean();\r\n            case NOT:   return                      !left.getBoolean();\r\n            case LIKE:  return Utils.like( left.getString(), right.getString());\r\n            case ISNULL:return \t\t\t\t\t\tleft.isNull();\r\n\t\t\tcase ISNOTNULL:\treturn \t\t\t\t\t!left.isNull();\r\n\t\t\tcase IN:\tif(right == null)\r\n\t\t\t\t\t\t\treturn isInList();\r\n\t\t\t\t\t\tbreak;\r\n        }\r\n        final boolean leftIsNull = left.isNull();\r\n        int dataType;\r\n        if(operation == NEGATIVE || operation == BIT_NOT){\r\n        \tif(leftIsNull) return false;\r\n        \tdataType = left.getDataType();\r\n        }else{\r\n            final boolean rightIsNull = right.isNull();\r\n        \tif(operation == EQUALS_NULL && leftIsNull && rightIsNull) return true;\r\n        \tif(leftIsNull || rightIsNull) return false;\r\n        \tdataType = getDataType(left, right);\r\n        }\r\n        switch(dataType){\r\n\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\tswitch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n\t\t\t\t\t\tcase EQUALS:    return left.getBoolean() == right.getBoolean();\r\n\t\t\t\t\t\tcase UNEQUALS:  return left.getBoolean() != right.getBoolean();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//break; interpret it as BIT \r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n            case SQLTokenizer.BIT:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getInt() == right.getInt();\r\n                        case GREATER:   return left.getInt() >  right.getInt();\r\n                        case GRE_EQU:   return left.getInt() >= right.getInt();\r\n                        case LESSER:    return left.getInt() <  right.getInt();\r\n                        case LES_EQU:   return left.getInt() <= right.getInt();\r\n                        case UNEQUALS:  return left.getInt() != right.getInt();\r\n                        case BETWEEN:\r\n                                        int _left = left.getInt();\r\n                                        return _left >= right.getInt() && right2.getInt() >= _left;\r\n                        default:\r\n                        \treturn getInt() != 0;\r\n                    }\r\n            case SQLTokenizer.BIGINT:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getLong() == right.getLong();\r\n                        case GREATER:   return left.getLong() >  right.getLong();\r\n                        case GRE_EQU:   return left.getLong() >= right.getLong();\r\n                        case LESSER:    return left.getLong() <  right.getLong();\r\n                        case LES_EQU:   return left.getLong() <= right.getLong();\r\n                        case UNEQUALS:  return left.getLong() != right.getLong();\r\n                        case BETWEEN:\r\n                                        long _left = left.getLong();\r\n                                        return _left >= right.getLong() && right2.getLong() >= _left;\r\n                        default:\r\n                        \treturn getLong() != 0;\r\n                    }\r\n            case SQLTokenizer.REAL:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getFloat() == right.getFloat();\r\n                        case GREATER:   return left.getFloat() >  right.getFloat();\r\n                        case GRE_EQU:   return left.getFloat() >= right.getFloat();\r\n                        case LESSER:    return left.getFloat() <  right.getFloat();\r\n                        case LES_EQU:   return left.getFloat() <= right.getFloat();\r\n                        case UNEQUALS:  return left.getFloat() != right.getFloat();\r\n                        case BETWEEN:\r\n                                        float _left = left.getFloat();\r\n                                        return _left >= right.getFloat() && right2.getFloat() >= _left;\r\n                        default:\r\n                        \treturn getFloat() != 0;\r\n                    }\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getDouble() == right.getDouble();\r\n                        case GREATER:   return left.getDouble() >  right.getDouble();\r\n                        case GRE_EQU:   return left.getDouble() >= right.getDouble();\r\n                        case LESSER:    return left.getDouble() <  right.getDouble();\r\n                        case LES_EQU:   return left.getDouble() <= right.getDouble();\r\n                        case UNEQUALS:  return left.getDouble() != right.getDouble();\r\n                        case BETWEEN:\r\n                                        double _left = left.getDouble();\r\n                                        return _left >= right.getDouble() && right2.getDouble() >= _left;\r\n                        default:\r\n                        \treturn getDouble() != 0;\r\n                    }\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getMoney() == right.getMoney();\r\n                        case GREATER:   return left.getMoney() >  right.getMoney();\r\n                        case GRE_EQU:   return left.getMoney() >= right.getMoney();\r\n                        case LESSER:    return left.getMoney() <  right.getMoney();\r\n                        case LES_EQU:   return left.getMoney() <= right.getMoney();\r\n                        case UNEQUALS:  return left.getMoney() != right.getMoney();\r\n                        case BETWEEN:\r\n                                        long _left = left.getMoney();\r\n                                        return _left >= right.getMoney() && right2.getMoney() >= _left;\r\n                        default:\r\n                        \treturn getMoney() != 0;\r\n                    }\r\n            case SQLTokenizer.DECIMAL:\r\n\t\t\tcase SQLTokenizer.NUMERIC:{\r\n\t\t\t\t\tif(operation == NEGATIVE)\r\n\t\t\t\t\t\treturn left.getNumeric().getSignum() != 0;\r\n\t\t\t\t\tint comp = left.getNumeric().compareTo( right.getNumeric() );\r\n\t\t\t\t\tswitch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n\t\t\t\t\t\tcase EQUALS:    return comp == 0;\r\n\t\t\t\t\t\tcase GREATER:   return comp >  0;\r\n\t\t\t\t\t\tcase GRE_EQU:   return comp >= 0;\r\n\t\t\t\t\t\tcase LESSER:    return comp <  0;\r\n\t\t\t\t\t\tcase LES_EQU:   return comp <= 0;\r\n\t\t\t\t\t\tcase UNEQUALS:  return comp != 0;\r\n\t\t\t\t\t\tcase BETWEEN:\r\n\t\t\t\t\t\t\t\t\t\treturn comp >= 0 && 0 >= left.getNumeric().compareTo( right2.getNumeric() );\r\n                        default:\r\n                        \treturn getNumeric().getSignum() != 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.CLOB:{\r\n                    final String leftStr = left.getString();\r\n                    final String rightStr = right.getString();\r\n                    int comp = String.CASE_INSENSITIVE_ORDER.compare( leftStr, rightStr );\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return comp == 0;\r\n                        case GREATER:   return comp >  0;\r\n                        case GRE_EQU:   return comp >= 0;\r\n                        case LESSER:    return comp <  0;\r\n                        case LES_EQU:   return comp <= 0;\r\n                        case UNEQUALS:  return comp != 0;\r\n                        case BETWEEN:\r\n                                        return comp >= 0 && 0 >= String.CASE_INSENSITIVE_ORDER.compare( leftStr, right2.getString() );\r\n                        case ADD:       return Utils.string2boolean(leftStr + rightStr);\r\n                    }\r\n                    break;}\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:{\r\n                    byte[] leftBytes = left.getBytes();\r\n                    byte[] rightBytes= right.getBytes();\r\n                    int comp = Utils.compareBytes( leftBytes, rightBytes);\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return comp == 0;\r\n                        case GREATER:   return comp >  0;\r\n                        case GRE_EQU:   return comp >= 0;\r\n                        case LESSER:    return comp <  0;\r\n                        case LES_EQU:   return comp <= 0;\r\n                        case UNEQUALS:  return comp != 0;\r\n                        case BETWEEN:\r\n                                        return comp >= 0 && 0 >= Utils.compareBytes( leftBytes, right2.getBytes() );\r\n                    }\r\n                    break;}\r\n        }\r\n        throw createUnspportedDataType();\r\n    }","startLine":126,"lastLine":135},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(18644,9508,<530,4>,<718,5>)","rawLines":"boolean getBoolean() throws java.lang.Exception {\r\n        switch(operation){\r\n        \tcase OR:    return left.getBoolean() || right.getBoolean();\r\n            case AND:   return left.getBoolean() && right.getBoolean();\r\n            case NOT:   return                      !left.getBoolean();\r\n            case LIKE:  return Utils.like( left.getString(), right.getString());\r\n            case ISNULL:return \t\t\t\t\t\tleft.isNull();\r\n\t\t\tcase ISNOTNULL:\treturn \t\t\t\t\t!left.isNull();\r\n\t\t\tcase IN:\tif(right == null)\r\n\t\t\t\t\t\t\treturn isInList();\r\n\t\t\t\t\t\tbreak;\r\n        }\r\n        final boolean leftIsNull = left.isNull();\r\n        int dataType;\r\n        if(operation == NEGATIVE || operation == BIT_NOT){\r\n        \tif(leftIsNull) return false;\r\n        \tdataType = left.getDataType();\r\n        }else{\r\n            final boolean rightIsNull = right.isNull();\r\n        \tif(operation == EQUALS_NULL && leftIsNull && rightIsNull) return true;\r\n        \tif(leftIsNull || rightIsNull) return false;\r\n        \tdataType = getDataType(left, right);\r\n        }\r\n        switch(dataType){\r\n\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\tswitch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n\t\t\t\t\t\tcase EQUALS:    return left.getBoolean() == right.getBoolean();\r\n\t\t\t\t\t\tcase UNEQUALS:  return left.getBoolean() != right.getBoolean();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//break; interpret it as BIT \r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n            case SQLTokenizer.BIT:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getInt() == right.getInt();\r\n                        case GREATER:   return left.getInt() >  right.getInt();\r\n                        case GRE_EQU:   return left.getInt() >= right.getInt();\r\n                        case LESSER:    return left.getInt() <  right.getInt();\r\n                        case LES_EQU:   return left.getInt() <= right.getInt();\r\n                        case UNEQUALS:  return left.getInt() != right.getInt();\r\n                        case BETWEEN:\r\n                                        int _left = left.getInt();\r\n                                        return _left >= right.getInt() && right2.getInt() >= _left;\r\n                        default:\r\n                        \treturn getInt() != 0;\r\n                    }\r\n            case SQLTokenizer.BIGINT:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getLong() == right.getLong();\r\n                        case GREATER:   return left.getLong() >  right.getLong();\r\n                        case GRE_EQU:   return left.getLong() >= right.getLong();\r\n                        case LESSER:    return left.getLong() <  right.getLong();\r\n                        case LES_EQU:   return left.getLong() <= right.getLong();\r\n                        case UNEQUALS:  return left.getLong() != right.getLong();\r\n                        case BETWEEN:\r\n                                        long _left = left.getLong();\r\n                                        return _left >= right.getLong() && right2.getLong() >= _left;\r\n                        default:\r\n                        \treturn getLong() != 0;\r\n                    }\r\n            case SQLTokenizer.REAL:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getFloat() == right.getFloat();\r\n                        case GREATER:   return left.getFloat() >  right.getFloat();\r\n                        case GRE_EQU:   return left.getFloat() >= right.getFloat();\r\n                        case LESSER:    return left.getFloat() <  right.getFloat();\r\n                        case LES_EQU:   return left.getFloat() <= right.getFloat();\r\n                        case UNEQUALS:  return left.getFloat() != right.getFloat();\r\n                        case BETWEEN:\r\n                                        float _left = left.getFloat();\r\n                                        return _left >= right.getFloat() && right2.getFloat() >= _left;\r\n                        default:\r\n                        \treturn getFloat() != 0;\r\n                    }\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getDouble() == right.getDouble();\r\n                        case GREATER:   return left.getDouble() >  right.getDouble();\r\n                        case GRE_EQU:   return left.getDouble() >= right.getDouble();\r\n                        case LESSER:    return left.getDouble() <  right.getDouble();\r\n                        case LES_EQU:   return left.getDouble() <= right.getDouble();\r\n                        case UNEQUALS:  return left.getDouble() != right.getDouble();\r\n                        case BETWEEN:\r\n                                        double _left = left.getDouble();\r\n                                        return _left >= right.getDouble() && right2.getDouble() >= _left;\r\n                        default:\r\n                        \treturn getDouble() != 0;\r\n                    }\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getMoney() == right.getMoney();\r\n                        case GREATER:   return left.getMoney() >  right.getMoney();\r\n                        case GRE_EQU:   return left.getMoney() >= right.getMoney();\r\n                        case LESSER:    return left.getMoney() <  right.getMoney();\r\n                        case LES_EQU:   return left.getMoney() <= right.getMoney();\r\n                        case UNEQUALS:  return left.getMoney() != right.getMoney();\r\n                        case BETWEEN:\r\n                                        long _left = left.getMoney();\r\n                                        return _left >= right.getMoney() && right2.getMoney() >= _left;\r\n                        default:\r\n                        \treturn getMoney() != 0;\r\n                    }\r\n            case SQLTokenizer.DECIMAL:\r\n\t\t\tcase SQLTokenizer.NUMERIC:{\r\n\t\t\t\t\tif(operation == NEGATIVE)\r\n\t\t\t\t\t\treturn left.getNumeric().getSignum() != 0;\r\n\t\t\t\t\tint comp = left.getNumeric().compareTo( right.getNumeric() );\r\n\t\t\t\t\tswitch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n\t\t\t\t\t\tcase EQUALS:    return comp == 0;\r\n\t\t\t\t\t\tcase GREATER:   return comp >  0;\r\n\t\t\t\t\t\tcase GRE_EQU:   return comp >= 0;\r\n\t\t\t\t\t\tcase LESSER:    return comp <  0;\r\n\t\t\t\t\t\tcase LES_EQU:   return comp <= 0;\r\n\t\t\t\t\t\tcase UNEQUALS:  return comp != 0;\r\n\t\t\t\t\t\tcase BETWEEN:\r\n\t\t\t\t\t\t\t\t\t\treturn comp >= 0 && 0 >= left.getNumeric().compareTo( right2.getNumeric() );\r\n                        default:\r\n                        \treturn getNumeric().getSignum() != 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.CLOB:{\r\n                    final String leftStr = left.getString();\r\n                    final String rightStr = right.getString();\r\n                    int comp = String.CASE_INSENSITIVE_ORDER.compare( leftStr, rightStr );\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return comp == 0;\r\n                        case GREATER:   return comp >  0;\r\n                        case GRE_EQU:   return comp >= 0;\r\n                        case LESSER:    return comp <  0;\r\n                        case LES_EQU:   return comp <= 0;\r\n                        case UNEQUALS:  return comp != 0;\r\n                        case BETWEEN:\r\n                                        return comp >= 0 && 0 >= String.CASE_INSENSITIVE_ORDER.compare( leftStr, right2.getString() );\r\n                        case ADD:       return Utils.string2boolean(leftStr + rightStr);\r\n                    }\r\n                    break;}\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:{\r\n                    byte[] leftBytes = left.getBytes();\r\n                    byte[] rightBytes= right.getBytes();\r\n                    int comp = Utils.compareBytes( leftBytes, rightBytes);\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return comp == 0;\r\n                        case GREATER:   return comp >  0;\r\n                        case GRE_EQU:   return comp >= 0;\r\n                        case LESSER:    return comp <  0;\r\n                        case LES_EQU:   return comp <= 0;\r\n                        case UNEQUALS:  return comp != 0;\r\n                        case BETWEEN:\r\n                                        return comp >= 0 && 0 >= Utils.compareBytes( leftBytes, right2.getBytes() );\r\n                    }\r\n                    break;}\r\n        }\r\n        throw createUnspportedDataType();\r\n    }","startLine":173,"lastLine":182},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(18644,9508,<530,4>,<718,5>)","rawLines":"boolean getBoolean() throws java.lang.Exception {\r\n        switch(operation){\r\n        \tcase OR:    return left.getBoolean() || right.getBoolean();\r\n            case AND:   return left.getBoolean() && right.getBoolean();\r\n            case NOT:   return                      !left.getBoolean();\r\n            case LIKE:  return Utils.like( left.getString(), right.getString());\r\n            case ISNULL:return \t\t\t\t\t\tleft.isNull();\r\n\t\t\tcase ISNOTNULL:\treturn \t\t\t\t\t!left.isNull();\r\n\t\t\tcase IN:\tif(right == null)\r\n\t\t\t\t\t\t\treturn isInList();\r\n\t\t\t\t\t\tbreak;\r\n        }\r\n        final boolean leftIsNull = left.isNull();\r\n        int dataType;\r\n        if(operation == NEGATIVE || operation == BIT_NOT){\r\n        \tif(leftIsNull) return false;\r\n        \tdataType = left.getDataType();\r\n        }else{\r\n            final boolean rightIsNull = right.isNull();\r\n        \tif(operation == EQUALS_NULL && leftIsNull && rightIsNull) return true;\r\n        \tif(leftIsNull || rightIsNull) return false;\r\n        \tdataType = getDataType(left, right);\r\n        }\r\n        switch(dataType){\r\n\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\tswitch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n\t\t\t\t\t\tcase EQUALS:    return left.getBoolean() == right.getBoolean();\r\n\t\t\t\t\t\tcase UNEQUALS:  return left.getBoolean() != right.getBoolean();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//break; interpret it as BIT \r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n            case SQLTokenizer.BIT:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getInt() == right.getInt();\r\n                        case GREATER:   return left.getInt() >  right.getInt();\r\n                        case GRE_EQU:   return left.getInt() >= right.getInt();\r\n                        case LESSER:    return left.getInt() <  right.getInt();\r\n                        case LES_EQU:   return left.getInt() <= right.getInt();\r\n                        case UNEQUALS:  return left.getInt() != right.getInt();\r\n                        case BETWEEN:\r\n                                        int _left = left.getInt();\r\n                                        return _left >= right.getInt() && right2.getInt() >= _left;\r\n                        default:\r\n                        \treturn getInt() != 0;\r\n                    }\r\n            case SQLTokenizer.BIGINT:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getLong() == right.getLong();\r\n                        case GREATER:   return left.getLong() >  right.getLong();\r\n                        case GRE_EQU:   return left.getLong() >= right.getLong();\r\n                        case LESSER:    return left.getLong() <  right.getLong();\r\n                        case LES_EQU:   return left.getLong() <= right.getLong();\r\n                        case UNEQUALS:  return left.getLong() != right.getLong();\r\n                        case BETWEEN:\r\n                                        long _left = left.getLong();\r\n                                        return _left >= right.getLong() && right2.getLong() >= _left;\r\n                        default:\r\n                        \treturn getLong() != 0;\r\n                    }\r\n            case SQLTokenizer.REAL:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getFloat() == right.getFloat();\r\n                        case GREATER:   return left.getFloat() >  right.getFloat();\r\n                        case GRE_EQU:   return left.getFloat() >= right.getFloat();\r\n                        case LESSER:    return left.getFloat() <  right.getFloat();\r\n                        case LES_EQU:   return left.getFloat() <= right.getFloat();\r\n                        case UNEQUALS:  return left.getFloat() != right.getFloat();\r\n                        case BETWEEN:\r\n                                        float _left = left.getFloat();\r\n                                        return _left >= right.getFloat() && right2.getFloat() >= _left;\r\n                        default:\r\n                        \treturn getFloat() != 0;\r\n                    }\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getDouble() == right.getDouble();\r\n                        case GREATER:   return left.getDouble() >  right.getDouble();\r\n                        case GRE_EQU:   return left.getDouble() >= right.getDouble();\r\n                        case LESSER:    return left.getDouble() <  right.getDouble();\r\n                        case LES_EQU:   return left.getDouble() <= right.getDouble();\r\n                        case UNEQUALS:  return left.getDouble() != right.getDouble();\r\n                        case BETWEEN:\r\n                                        double _left = left.getDouble();\r\n                                        return _left >= right.getDouble() && right2.getDouble() >= _left;\r\n                        default:\r\n                        \treturn getDouble() != 0;\r\n                    }\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getMoney() == right.getMoney();\r\n                        case GREATER:   return left.getMoney() >  right.getMoney();\r\n                        case GRE_EQU:   return left.getMoney() >= right.getMoney();\r\n                        case LESSER:    return left.getMoney() <  right.getMoney();\r\n                        case LES_EQU:   return left.getMoney() <= right.getMoney();\r\n                        case UNEQUALS:  return left.getMoney() != right.getMoney();\r\n                        case BETWEEN:\r\n                                        long _left = left.getMoney();\r\n                                        return _left >= right.getMoney() && right2.getMoney() >= _left;\r\n                        default:\r\n                        \treturn getMoney() != 0;\r\n                    }\r\n            case SQLTokenizer.DECIMAL:\r\n\t\t\tcase SQLTokenizer.NUMERIC:{\r\n\t\t\t\t\tif(operation == NEGATIVE)\r\n\t\t\t\t\t\treturn left.getNumeric().getSignum() != 0;\r\n\t\t\t\t\tint comp = left.getNumeric().compareTo( right.getNumeric() );\r\n\t\t\t\t\tswitch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n\t\t\t\t\t\tcase EQUALS:    return comp == 0;\r\n\t\t\t\t\t\tcase GREATER:   return comp >  0;\r\n\t\t\t\t\t\tcase GRE_EQU:   return comp >= 0;\r\n\t\t\t\t\t\tcase LESSER:    return comp <  0;\r\n\t\t\t\t\t\tcase LES_EQU:   return comp <= 0;\r\n\t\t\t\t\t\tcase UNEQUALS:  return comp != 0;\r\n\t\t\t\t\t\tcase BETWEEN:\r\n\t\t\t\t\t\t\t\t\t\treturn comp >= 0 && 0 >= left.getNumeric().compareTo( right2.getNumeric() );\r\n                        default:\r\n                        \treturn getNumeric().getSignum() != 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.CLOB:{\r\n                    final String leftStr = left.getString();\r\n                    final String rightStr = right.getString();\r\n                    int comp = String.CASE_INSENSITIVE_ORDER.compare( leftStr, rightStr );\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return comp == 0;\r\n                        case GREATER:   return comp >  0;\r\n                        case GRE_EQU:   return comp >= 0;\r\n                        case LESSER:    return comp <  0;\r\n                        case LES_EQU:   return comp <= 0;\r\n                        case UNEQUALS:  return comp != 0;\r\n                        case BETWEEN:\r\n                                        return comp >= 0 && 0 >= String.CASE_INSENSITIVE_ORDER.compare( leftStr, right2.getString() );\r\n                        case ADD:       return Utils.string2boolean(leftStr + rightStr);\r\n                    }\r\n                    break;}\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:{\r\n                    byte[] leftBytes = left.getBytes();\r\n                    byte[] rightBytes= right.getBytes();\r\n                    int comp = Utils.compareBytes( leftBytes, rightBytes);\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return comp == 0;\r\n                        case GREATER:   return comp >  0;\r\n                        case GRE_EQU:   return comp >= 0;\r\n                        case LESSER:    return comp <  0;\r\n                        case LES_EQU:   return comp <= 0;\r\n                        case UNEQUALS:  return comp != 0;\r\n                        case BETWEEN:\r\n                                        return comp >= 0 && 0 >= Utils.compareBytes( leftBytes, right2.getBytes() );\r\n                    }\r\n                    break;}\r\n        }\r\n        throw createUnspportedDataType();\r\n    }","startLine":151,"lastLine":160}],"size":10},{"content":"if(value == null){if(expr.isNull())dataType = expr.getDataType();elseinitValue( expr );}else if(!expr.isNull()){switch(dataType){case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionValue.java|(2725,5781,<101,0>,<261,2>)","rawLines":"/*==============================================================================\r\nmethods for Grouping\r\n==============================================================================*/\r\n\t/**\r\n\t * Accumulate the value of the expression to this aggregate function value. \r\n\t */\r\n    void accumulate(Expression expr) throws Exception{\r\n\t\tint type = getType();\r\n\t\tif(type != GROUP_BY) expr = expr.getParams()[0];\r\n\t\tswitch(type){\r\n\t\t\tcase GROUP_BY:\r\n\t\t\tcase FIRST:\r\n\t\t\t\tif(isEmpty()) set( expr.getObject(), expr.getDataType() );\r\n\t\t\t\tbreak;\r\n\t\t\tcase LAST:\r\n\t\t\t\tset( expr.getObject(), expr.getDataType() );\r\n\t\t\t\tbreak;\r\n\t\t\tcase COUNT:\r\n\t\t\t\tif(!expr.isNull()) ((MutableInteger)value).value++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase SUM:\r\n\t\t\t\tif(isEmpty()){\r\n\t\t\t\t\tinitValue( expr );\r\n\t\t\t\t}else\r\n\t\t\t\tswitch(dataType){\r\n\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\t((MutableInteger)value).value += expr.getInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\t\t((MutableLong)value).value += expr.getLong();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\t((MutableFloat)value).value += expr.getFloat();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\t\t((MutableDouble)value).value += expr.getDouble();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();\r\n\t\t\t\t\t\tif(newValue != null)\r\n\t\t\t\t\t\t\t((MutableNumeric)value).add( newValue );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\t\t((Money)value).value += expr.getMoney();\r\n\t\t\t\t\t\tbreak;\t\t\t\t\t\t\r\n\t\t\t\t\tdefault: throw SmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM, SQLTokenizer.getKeyWord(dataType));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase MAX:\r\n\t\t\t\tif(value == null){\r\n\t\t\t\t\tif(expr.isNull())\r\n\t\t\t\t\t\tdataType = expr.getDataType();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinitValue( expr );\r\n\t\t\t\t}else if(!expr.isNull()){\r\n\t\t\t\t\tswitch(dataType){\r\n\t\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\t\t((MutableInteger)value).value = Math.max( ((MutableInteger)value).value, expr.getInt());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\t\t\t((MutableLong)value).value = Math.max( ((MutableLong)value).value, expr.getLong());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\t\t((MutableFloat)value).value = Math.max( ((MutableFloat)value).value, expr.getFloat());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\t\t\t((MutableDouble)value).value = Math.max( ((MutableDouble)value).value, expr.getDouble());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\t\t\tString str = expr.getString();\r\n\t\t\t\t\t\t\tif(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) < 0) //cast needed for Compiler 1.5\r\n\t\t\t\t\t\t\t\tvalue = str;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();\r\n\t\t\t\t\t\t\tif(((MutableNumeric)value).compareTo( newValue ) < 0)\r\n\t\t\t\t\t\t\t\tvalue = newValue;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\t\t\t((Money)value).value = Math.max( ((Money)value).value, expr.getMoney());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\t\t\t((DateTime)value).time = Math.max( ((DateTime)value).time, expr.getLong());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\t\t\t// uuid are fixed-len uppercase hex strings and can be correctly \r\n\t\t\t\t\t\t\t// compared with compareTo()\r\n\t\t\t\t\t\t\tString uuidStr = expr.getString();\r\n\t\t\t\t\t\t\tif (uuidStr.compareTo( (String)value) > 0) value = uuidStr;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tString keyword = SQLTokenizer.getKeyWord(dataType);\r\n\t\t\t\t\t\t\tthrow SmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX, keyword);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase MIN:\r\n\t\t\t\tif(value == null){\r\n\t\t\t\t\tif(expr.isNull())\r\n\t\t\t\t\t\tdataType = expr.getDataType();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinitValue( expr );\r\n\t\t\t\t}else if(!expr.isNull()){\r\n\t\t\t\t\tswitch(dataType){\r\n\t\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\t\t((MutableInteger)value).value = Math.min( ((MutableInteger)value).value, expr.getInt());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\t\t\t((MutableLong)value).value = Math.min( ((MutableLong)value).value, expr.getLong());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\t\t((MutableFloat)value).value = Math.min( ((MutableFloat)value).value, expr.getFloat());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\t\t\t((MutableDouble)value).value = Math.min( ((MutableDouble)value).value, expr.getDouble());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\t\t\tString str = expr.getString();\r\n\t\t\t\t\t\t\tif(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) > 0) //cast needed for Compiler 1.5\r\n\t\t\t\t\t\t\t\tvalue = str;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();\r\n\t\t\t\t\t\t\tif(((MutableNumeric)value).compareTo( newValue ) > 0)\r\n\t\t\t\t\t\t\t\tvalue = newValue;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\t\t\t((Money)value).value = Math.min( ((Money)value).value, expr.getMoney());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\t\t\t((DateTime)value).time = Math.min( ((DateTime)value).time, expr.getLong());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: throw new Error(\"\"+dataType);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: throw new Error();\r\n\t\t}\r\n\t}","startLine":110,"lastLine":119},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionValue.java|(2725,5781,<101,0>,<261,2>)","rawLines":"/*==============================================================================\r\nmethods for Grouping\r\n==============================================================================*/\r\n\t/**\r\n\t * Accumulate the value of the expression to this aggregate function value. \r\n\t */\r\n    void accumulate(Expression expr) throws Exception{\r\n\t\tint type = getType();\r\n\t\tif(type != GROUP_BY) expr = expr.getParams()[0];\r\n\t\tswitch(type){\r\n\t\t\tcase GROUP_BY:\r\n\t\t\tcase FIRST:\r\n\t\t\t\tif(isEmpty()) set( expr.getObject(), expr.getDataType() );\r\n\t\t\t\tbreak;\r\n\t\t\tcase LAST:\r\n\t\t\t\tset( expr.getObject(), expr.getDataType() );\r\n\t\t\t\tbreak;\r\n\t\t\tcase COUNT:\r\n\t\t\t\tif(!expr.isNull()) ((MutableInteger)value).value++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase SUM:\r\n\t\t\t\tif(isEmpty()){\r\n\t\t\t\t\tinitValue( expr );\r\n\t\t\t\t}else\r\n\t\t\t\tswitch(dataType){\r\n\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\t((MutableInteger)value).value += expr.getInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\t\t((MutableLong)value).value += expr.getLong();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\t((MutableFloat)value).value += expr.getFloat();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\t\t((MutableDouble)value).value += expr.getDouble();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();\r\n\t\t\t\t\t\tif(newValue != null)\r\n\t\t\t\t\t\t\t((MutableNumeric)value).add( newValue );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\t\t((Money)value).value += expr.getMoney();\r\n\t\t\t\t\t\tbreak;\t\t\t\t\t\t\r\n\t\t\t\t\tdefault: throw SmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM, SQLTokenizer.getKeyWord(dataType));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase MAX:\r\n\t\t\t\tif(value == null){\r\n\t\t\t\t\tif(expr.isNull())\r\n\t\t\t\t\t\tdataType = expr.getDataType();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinitValue( expr );\r\n\t\t\t\t}else if(!expr.isNull()){\r\n\t\t\t\t\tswitch(dataType){\r\n\t\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\t\t((MutableInteger)value).value = Math.max( ((MutableInteger)value).value, expr.getInt());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\t\t\t((MutableLong)value).value = Math.max( ((MutableLong)value).value, expr.getLong());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\t\t((MutableFloat)value).value = Math.max( ((MutableFloat)value).value, expr.getFloat());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\t\t\t((MutableDouble)value).value = Math.max( ((MutableDouble)value).value, expr.getDouble());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\t\t\tString str = expr.getString();\r\n\t\t\t\t\t\t\tif(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) < 0) //cast needed for Compiler 1.5\r\n\t\t\t\t\t\t\t\tvalue = str;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();\r\n\t\t\t\t\t\t\tif(((MutableNumeric)value).compareTo( newValue ) < 0)\r\n\t\t\t\t\t\t\t\tvalue = newValue;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\t\t\t((Money)value).value = Math.max( ((Money)value).value, expr.getMoney());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\t\t\t((DateTime)value).time = Math.max( ((DateTime)value).time, expr.getLong());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\t\t\t// uuid are fixed-len uppercase hex strings and can be correctly \r\n\t\t\t\t\t\t\t// compared with compareTo()\r\n\t\t\t\t\t\t\tString uuidStr = expr.getString();\r\n\t\t\t\t\t\t\tif (uuidStr.compareTo( (String)value) > 0) value = uuidStr;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tString keyword = SQLTokenizer.getKeyWord(dataType);\r\n\t\t\t\t\t\t\tthrow SmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX, keyword);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase MIN:\r\n\t\t\t\tif(value == null){\r\n\t\t\t\t\tif(expr.isNull())\r\n\t\t\t\t\t\tdataType = expr.getDataType();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinitValue( expr );\r\n\t\t\t\t}else if(!expr.isNull()){\r\n\t\t\t\t\tswitch(dataType){\r\n\t\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\t\t((MutableInteger)value).value = Math.min( ((MutableInteger)value).value, expr.getInt());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\t\t\t((MutableLong)value).value = Math.min( ((MutableLong)value).value, expr.getLong());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\t\t((MutableFloat)value).value = Math.min( ((MutableFloat)value).value, expr.getFloat());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\t\t\t((MutableDouble)value).value = Math.min( ((MutableDouble)value).value, expr.getDouble());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\t\t\tString str = expr.getString();\r\n\t\t\t\t\t\t\tif(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) > 0) //cast needed for Compiler 1.5\r\n\t\t\t\t\t\t\t\tvalue = str;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();\r\n\t\t\t\t\t\t\tif(((MutableNumeric)value).compareTo( newValue ) > 0)\r\n\t\t\t\t\t\t\t\tvalue = newValue;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\t\t\t((Money)value).value = Math.min( ((Money)value).value, expr.getMoney());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\t\t\t((DateTime)value).time = Math.min( ((DateTime)value).time, expr.getLong());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: throw new Error(\"\"+dataType);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: throw new Error();\r\n\t\t}\r\n\t}","startLine":53,"lastLine":62}],"size":10},{"content":"if(newValue != null){assertTrue( oldValue.compareTo( newValue ) > 0 );count++;}oldValue = newValue;}assertNull(oldValue);assertFalse( rs.next() );assertEquals( valueCount, count );}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(5916,667,<198,1>,<223,2>)","rawLines":"public void testOrderBy_varchar_desc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":15,"lastLine":25},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(11940,681,<440,1>,<464,2>)","rawLines":"public void testOrderBy_int_desc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Desc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tInteger newValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":15,"lastLine":24},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(6592,677,<226,1>,<251,2>)","rawLines":"public void testOrderBy_varchar_DescAsc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":15,"lastLine":25}],"size":10},{"content":"rows.add(row);}}}}Object[][] result = new Object[rows.size()][];rows.toArray(result);return result;}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(17286,1016,<480,1>,<508,2>)","rawLines":"Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = getTables(table);\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tIndexDescription index = indexes.get(i);\r\n\t\t\t\tif(index.isPrimary()){\r\n\t\t\t\t\tStrings columns = index.getColumns();\r\n\t\t\t\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\t\t\t\tObject[] row = new Object[6];\r\n\t\t\t\t\t\trow[0] = getName(); \t\t\t//TABLE_CAT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//TABLE_SCHEM\r\n\t\t\t\t\t\trow[2] = tableName;\t\t\t\t//TABLE_NAME\r\n\t\t\t\t\t\trow[3] = columns.get(c);\t\t//COLUMN_NAME\r\n\t\t\t\t\t\trow[4] = Utils.getShort(c+1);\t//KEY_SEQ\r\n\t\t\t\t\t\trow[5] = index.getName();\t\t//PK_NAME\r\n\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\t\t\r\n\t}","startLine":20,"lastLine":28},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(15879,1399,<444,1>,<477,2>)","rawLines":"Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = getTables(table);\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tIndexDescription index = indexes.get(i);\r\n\t\t\t\tif(index.isUnique()){\r\n\t\t\t\t\tStrings columns = index.getColumns();\r\n\t\t\t\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\t\t\t\tString columnName = columns.get(c);\r\n\t\t\t\t\t\tColumn column = tab.findColumn(columnName);\r\n\t\t\t\t\t\tObject[] row = new Object[8];\r\n\t\t\t\t\t\trow[0] = Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE\r\n\t\t\t\t\t\trow[1] = columnName;\t\t\t//COLUMN_NAME\r\n\t\t\t\t\t\tfinal int dataType = column.getDataType();\r\n\t\t\t\t\t\trow[2] = Utils.getInteger(dataType);//DATA_TYPE\r\n\t\t\t\t\t\trow[3] = SQLTokenizer.getKeyWord(dataType);//TYPE_NAME\r\n\t\t\t\t\t\trow[4] = Utils.getInteger(column.getPrecision());\t//COLUMN_SIZE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//BUFFER_LENGTH\r\n\t\t\t\t\t\trow[6] = Utils.getShort(column.getScale());\t\t//DECIMAL_DIGITS\r\n\t\t\t\t\t\trow[7] = Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN\r\n\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\t\t\r\n\t}","startLine":25,"lastLine":33},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(14095,1775,<401,1>,<441,2>)","rawLines":"Object[][] getReferenceKeys(SSConnection con, String pkTable, String fkTable) throws SQLException{\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = (pkTable != null) ? getTables(pkTable) : getTables(fkTable);\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tForeignKeys references = ((Table)tab).references;\r\n\t\t\tfor(int i=0; i<references.size(); i++){\r\n\t\t\t\tForeignKey foreignKey = references.get(i);\r\n\t\t\t\tIndexDescription pk = foreignKey.pk;\r\n\t\t\t\tIndexDescription fk = foreignKey.fk;\r\n\t\t\t\tif((pkTable == null || pkTable.equals(foreignKey.pkTable)) &&\r\n\t\t\t\t   (fkTable == null || fkTable.equals(foreignKey.fkTable))){\r\n\t\t\t\t\tStrings columnsPk = pk.getColumns();\r\n\t\t\t\t\tStrings columnsFk = fk.getColumns();\r\n\t\t\t\t\tfor(int c=0; c<columnsPk.size(); c++){\r\n\t\t\t\t\t\tObject[] row = new Object[14];\r\n\t\t\t\t\t\trow[0] = getName();\t\t\t\t//PKTABLE_CAT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//PKTABLE_SCHEM\r\n\t\t\t\t\t\trow[2] = foreignKey.pkTable;\t//PKTABLE_NAME\r\n\t\t\t\t\t\trow[3] = columnsPk.get(c);\t\t//PKCOLUMN_NAME\r\n\t\t\t\t\t\trow[4] = getName();\t\t\t\t//FKTABLE_CAT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//FKTABLE_SCHEM\r\n\t\t\t\t\t\trow[6] = foreignKey.fkTable;\t//FKTABLE_NAME\r\n\t\t\t\t\t\trow[7] = columnsFk.get(c);\t\t//FKCOLUMN_NAME\r\n\t\t\t\t\t\trow[8] = Utils.getShort(c+1);\t//KEY_SEQ\r\n\t\t\t\t\t\trow[9] = Utils.getShort(foreignKey.updateRule);//UPDATE_RULE\r\n\t\t\t\t\t\trow[10]= Utils.getShort(foreignKey.deleteRule); //DELETE_RULE\r\n\t\t\t\t\t\trow[11]= fk.getName();\t//FK_NAME\r\n\t\t\t\t\t\trow[12]= pk.getName();\t//PK_NAME\r\n\t\t\t\t\t\trow[13]= Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable); //DEFERRABILITY\r\n\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\t\t\r\n\t}","startLine":32,"lastLine":40}],"size":9},{"content":"Connection con = AllTests.getConnection();try{con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");assertRowCount( 1, \"Select * from transactions\");con.setAutoCommit(false);con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");assertRowCount( 2, \"Select * from transactions\");","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(5584,1061,<166,1>,<194,2>)","rawLines":"/**\r\n\t * In the table there is already one row that is commited.\r\n\t */\r\n\tpublic void testRollbackWithOneCommitRow() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.rollback();\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":4,"lastLine":14},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(3539,1055,<107,1>,<135,2>)","rawLines":"/**\r\n\t * In the table there is already one row that is committed.\r\n\t */\r\n\tpublic void testCommitWithOneCommitRow() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions (Select * From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":4,"lastLine":14}],"size":9},{"content":"List rows = new ArrayList();Strings tables = getTables(table);for(int t=0; t<tables.size(); t++){String tableName = tables.get(t);TableView tab = getTableView( con, tableName);if(!(tab instanceof Table)) continue;IndexDescriptions indexes = ((Table)tab).indexes;for(int i=0; i<indexes.size(); i++){IndexDescription index = indexes.get(i);","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(17286,1016,<480,1>,<508,2>)","rawLines":"Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = getTables(table);\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tIndexDescription index = indexes.get(i);\r\n\t\t\t\tif(index.isPrimary()){\r\n\t\t\t\t\tStrings columns = index.getColumns();\r\n\t\t\t\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\t\t\t\tObject[] row = new Object[6];\r\n\t\t\t\t\t\trow[0] = getName(); \t\t\t//TABLE_CAT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//TABLE_SCHEM\r\n\t\t\t\t\t\trow[2] = tableName;\t\t\t\t//TABLE_NAME\r\n\t\t\t\t\t\trow[3] = columns.get(c);\t\t//COLUMN_NAME\r\n\t\t\t\t\t\trow[4] = Utils.getShort(c+1);\t//KEY_SEQ\r\n\t\t\t\t\t\trow[5] = index.getName();\t\t//PK_NAME\r\n\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\t\t\r\n\t}","startLine":1,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(15879,1399,<444,1>,<477,2>)","rawLines":"Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = getTables(table);\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tIndexDescription index = indexes.get(i);\r\n\t\t\t\tif(index.isUnique()){\r\n\t\t\t\t\tStrings columns = index.getColumns();\r\n\t\t\t\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\t\t\t\tString columnName = columns.get(c);\r\n\t\t\t\t\t\tColumn column = tab.findColumn(columnName);\r\n\t\t\t\t\t\tObject[] row = new Object[8];\r\n\t\t\t\t\t\trow[0] = Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE\r\n\t\t\t\t\t\trow[1] = columnName;\t\t\t//COLUMN_NAME\r\n\t\t\t\t\t\tfinal int dataType = column.getDataType();\r\n\t\t\t\t\t\trow[2] = Utils.getInteger(dataType);//DATA_TYPE\r\n\t\t\t\t\t\trow[3] = SQLTokenizer.getKeyWord(dataType);//TYPE_NAME\r\n\t\t\t\t\t\trow[4] = Utils.getInteger(column.getPrecision());\t//COLUMN_SIZE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//BUFFER_LENGTH\r\n\t\t\t\t\t\trow[6] = Utils.getShort(column.getScale());\t\t//DECIMAL_DIGITS\r\n\t\t\t\t\t\trow[7] = Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN\r\n\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\t\t\r\n\t}","startLine":1,"lastLine":9}],"size":9},{"content":"buf.append( SHORT_MONTHS[ details.month ]);buf.append(' ');formatNumber( details.day, 2, buf);buf.append(' ');formatNumber( details.year, 4, buf);buf.append(' ');formatHour12( details.hour, buf );buf.append(':');formatNumber( details.minute, 2, buf);","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":132,"lastLine":140},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":11,"lastLine":19}],"size":9},{"content":"}}else{prev.nextLock = lock.nextLock;}return;}prev = lock;lock = lock.nextLock;}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Table.java|(17465,2175,<491,1>,<565,2>)","rawLines":"/**\r\n\t * Remove the lock from this table.\r\n\t */\r\n\tvoid freeLock(TableStorePage storePage){\r\n\t\tfinal int lockType = storePage.lockType;\r\n\t\tfinal long fileOffset = storePage.fileOffset;\r\n\t\tsynchronized(locks){\r\n\t\t\ttry{\r\n\t\t\t\tTableStorePage lock;\r\n\t\t\t\tTableStorePage prev;\r\n\t\t\t\tswitch(lockType){\r\n\t\t\t\t\tcase LOCK_INSERT:\r\n\t\t\t\t\t\tfor(int i=0; i<locksInsert.size(); i++){\r\n\t\t\t\t\t\t\tprev = lock = (TableStorePage)locksInsert.get(i);\r\n\t\t\t\t\t\t\twhile(lock != null){\r\n\t\t\t\t\t\t\t\tif(lock == storePage){\r\n\t\t\t\t\t\t\t\t\t//remove lock\r\n\t\t\t\t\t\t\t\t\tif(lock == prev){\r\n\t\t\t\t\t\t\t\t\t\tif(lock.nextLock == null){\r\n\t\t\t\t\t\t\t\t\t\t\t// the first lock is the only lock in the list\r\n\t\t\t\t\t\t\t\t\t\t\tlocksInsert.remove(i--);\r\n\t\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t\t// only the first lock of the list is remove\r\n\t\t\t\t\t\t\t\t\t\t\tlocksInsert.set( i, lock.nextLock );\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t// a lock in the mid or end is removed\r\n\t\t\t\t\t\t\t\t\t\tprev.nextLock = lock.nextLock;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tprev = lock;\r\n\t\t\t\t\t\t\t\tlock = lock.nextLock;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase LOCK_READ:\r\n\t\t\t\t\tcase LOCK_WRITE:\r\n\t\t\t\t\t\tLong pageKey = new Long(fileOffset); //TODO performance\r\n\t\t\t\t\t\tlock = (TableStorePage)locks.get( pageKey );\r\n\t\t\t\t\t\tprev = lock;\r\n\t\t\t\t\t\twhile(lock != null){\r\n\t\t\t\t\t\t\tif(lock == storePage){\r\n\t\t\t\t\t\t\t\t//lock entfernen\r\n\t\t\t\t\t\t\t\tif(lock == prev){\r\n\t\t\t\t\t\t\t\t\tif(lock.nextLock == null){\r\n\t\t\t\t\t\t\t\t\t\t// erste und einzige Lock in Liste\r\n\t\t\t\t\t\t\t\t\t\tlocks.remove(pageKey);\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t// the first lock in the list is removed\r\n\t\t\t\t\t\t\t\t\t\tlocks.put( pageKey, lock.nextLock );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t// a lock in the middle or end of the list is removed\r\n\t\t\t\t\t\t\t\t\tprev.nextLock = lock.nextLock;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tprev = lock;\r\n\t\t\t\t\t\t\tlock = lock.nextLock;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// a run through can occur if a lock was step high and the type does not compare\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase LOCK_TAB:\r\n\t\t\t\t\t\tassert storePage.con == tabLockConnection : \"Internal Error with TabLock\";\r\n\t\t\t\t\t\tif(--tabLockCount == 0) tabLockConnection = null;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error();\r\n\t\t\t\t}\r\n\t\t\t}finally{\r\n\t\t\t\tlocks.notifyAll();\r\n\t\t\t}\r\n\t\t}\r\n\t}","startLine":51,"lastLine":60},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Table.java|(17465,2175,<491,1>,<565,2>)","rawLines":"/**\r\n\t * Remove the lock from this table.\r\n\t */\r\n\tvoid freeLock(TableStorePage storePage){\r\n\t\tfinal int lockType = storePage.lockType;\r\n\t\tfinal long fileOffset = storePage.fileOffset;\r\n\t\tsynchronized(locks){\r\n\t\t\ttry{\r\n\t\t\t\tTableStorePage lock;\r\n\t\t\t\tTableStorePage prev;\r\n\t\t\t\tswitch(lockType){\r\n\t\t\t\t\tcase LOCK_INSERT:\r\n\t\t\t\t\t\tfor(int i=0; i<locksInsert.size(); i++){\r\n\t\t\t\t\t\t\tprev = lock = (TableStorePage)locksInsert.get(i);\r\n\t\t\t\t\t\t\twhile(lock != null){\r\n\t\t\t\t\t\t\t\tif(lock == storePage){\r\n\t\t\t\t\t\t\t\t\t//remove lock\r\n\t\t\t\t\t\t\t\t\tif(lock == prev){\r\n\t\t\t\t\t\t\t\t\t\tif(lock.nextLock == null){\r\n\t\t\t\t\t\t\t\t\t\t\t// the first lock is the only lock in the list\r\n\t\t\t\t\t\t\t\t\t\t\tlocksInsert.remove(i--);\r\n\t\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t\t// only the first lock of the list is remove\r\n\t\t\t\t\t\t\t\t\t\t\tlocksInsert.set( i, lock.nextLock );\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t// a lock in the mid or end is removed\r\n\t\t\t\t\t\t\t\t\t\tprev.nextLock = lock.nextLock;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tprev = lock;\r\n\t\t\t\t\t\t\t\tlock = lock.nextLock;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase LOCK_READ:\r\n\t\t\t\t\tcase LOCK_WRITE:\r\n\t\t\t\t\t\tLong pageKey = new Long(fileOffset); //TODO performance\r\n\t\t\t\t\t\tlock = (TableStorePage)locks.get( pageKey );\r\n\t\t\t\t\t\tprev = lock;\r\n\t\t\t\t\t\twhile(lock != null){\r\n\t\t\t\t\t\t\tif(lock == storePage){\r\n\t\t\t\t\t\t\t\t//lock entfernen\r\n\t\t\t\t\t\t\t\tif(lock == prev){\r\n\t\t\t\t\t\t\t\t\tif(lock.nextLock == null){\r\n\t\t\t\t\t\t\t\t\t\t// erste und einzige Lock in Liste\r\n\t\t\t\t\t\t\t\t\t\tlocks.remove(pageKey);\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t// the first lock in the list is removed\r\n\t\t\t\t\t\t\t\t\t\tlocks.put( pageKey, lock.nextLock );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t// a lock in the middle or end of the list is removed\r\n\t\t\t\t\t\t\t\t\tprev.nextLock = lock.nextLock;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tprev = lock;\r\n\t\t\t\t\t\t\tlock = lock.nextLock;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// a run through can occur if a lock was step high and the type does not compare\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase LOCK_TAB:\r\n\t\t\t\t\t\tassert storePage.con == tabLockConnection : \"Internal Error with TabLock\";\r\n\t\t\t\t\t\tif(--tabLockCount == 0) tabLockConnection = null;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error();\r\n\t\t\t\t}\r\n\t\t\t}finally{\r\n\t\t\t\tlocks.notifyAll();\r\n\t\t\t}\r\n\t\t}\r\n\t}","startLine":24,"lastLine":33}],"size":9},{"content":"case SQLTokenizer.TIMESTAMP:return readTimestamp();case SQLTokenizer.TIME:return readTime();case SQLTokenizer.DATE:return readDate();case SQLTokenizer.SMALLDATETIME:return readSmallDateTime();default:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(35005,2639,<955,4>,<1017,5>)","rawLines":"/**\r\n     * It used for ResultSet.getLong()\r\n     */\r\n    @Override\r\n    long getLong(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2long( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return (long)readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return (long)readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / 10000;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / 10000;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().longValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Long.parseLong( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Long.parseLong( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return ExpressionValue.getLong( ois.readObject().toString(), SQLTokenizer.VARCHAR );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2long( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"BIGINT\" });\r\n        }\r\n    }","startLine":51,"lastLine":59},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(37658,2631,<1020,4>,<1082,5>)","rawLines":"/**\r\n     * It used for ResultSet.getFloat()\r\n     */\r\n    @Override\r\n    float getFloat(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2float( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return (float)readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / (float)10000.0;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / (float)10000.0;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().floatValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Float.parseFloat( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Float.parseFloat( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return Float.parseFloat( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2float( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"REAL\" });\r\n        }\r\n    }","startLine":51,"lastLine":59},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(40303,2625,<1085,4>,<1147,5>)","rawLines":"/**\r\n     * It used for ResultSet.getDouble()\r\n     */\r\n    @Override\r\n    double getDouble(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2double( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / 10000.0;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / 10000.0;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().doubleValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Double.parseDouble( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Double.parseDouble( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return Double.parseDouble( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2double( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });\r\n        }\r\n    }","startLine":51,"lastLine":59}],"size":9},{"content":"if(page == null)return null;if(i + 1 == count)return page.getValue();elsepage = (IndexNode)page.getValue();}throw new Error();}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Index.java|(4001,1018,<112,1>,<136,5>)","rawLines":"/**\r\n     * Returns a Long (unique) or a LongTreeList with rowOffsets. If the value in expressions does not exist then it\r\n     * return a null.\r\n     * \r\n     * @param expressions\r\n     *            The value that are search in the Index.\r\n     * @param searchNullValues\r\n     *            a expression with NULL values should return a result.\r\n     * @param nodeList\r\n     *            optional, can be null. The search path in the index tree.\r\n     */\r\n    final Object findRows(Expression[] expressions, boolean searchNullValues, ArrayList nodeList) throws Exception{\r\n        IndexNode page = rootPage;\r\n        int count = expressions.length;\r\n        for(int i = 0; i < count; i++){\r\n            page = findRows(page, expressions[i], searchNullValues, nodeList);\r\n            if(page == null)\r\n                return null;\r\n            if(i + 1 == count)\r\n                return page.getValue();\r\n            else\r\n                page = (IndexNode)page.getValue();\r\n        }\r\n        throw new Error();\r\n    }","startLine":16,"lastLine":24},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Index.java|(2975,1017,<85,1>,<109,5>)","rawLines":"/**\r\n     * Returns a Long (unique) or a LongTreeList with rowOffsets. If the value in expressions does not exist then it\r\n     * return a null.\r\n     * \r\n     * @param expressions\r\n     *            The value that are search in the Index.\r\n     * @param searchNullValues\r\n     *            expressions with NULL values should return a result.\r\n     * @param nodeList\r\n     *            optional, can be null. The search path in the index tree.\r\n     */\r\n\tfinal Object findRows(Expressions expressions, boolean searchNullValues, ArrayList nodeList) throws Exception{\r\n        IndexNode page = rootPage;\r\n        int count = expressions.size();\r\n        for(int i = 0; i < count; i++){\r\n            page = findRows(page, expressions.get(i), searchNullValues, nodeList);\r\n            if(page == null)\r\n                return null;\r\n            if(i + 1 == count)\r\n                return page.getValue();\r\n            else\r\n                page = (IndexNode)page.getValue();\r\n        }\r\n        throw new Error();\r\n    }","startLine":16,"lastLine":24}],"size":9},{"content":"try{java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");byte bytes[] = new byte[1024];for(int i=0; i<rowCount; i++){fos.write(bytes);}fos.close();java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");long time = -System.currentTimeMillis();","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(27309,1649,<646,4>,<682,5>)","rawLines":"/**\r\n      *  12. Test\r\n      *  Update large binary data with a SP.\r\n      */  \r\n    static void test_UpdateLargeBinaryWithSP(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update large binary data with a SP: \" + rowCount + \"KB bytes\");\r\n        \r\n        try{\r\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\r\n            byte bytes[] = new byte[1024];\r\n            for(int i=0; i<rowCount; i++){\r\n                fos.write(bytes);\r\n            }\r\n            fos.close();\r\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"CREATE PROCEDURE #UpdateLargeBinary(@im image) as Update \" + tableName + \" set im=@im WHERE pr=2\");\r\n            PreparedStatement pr = con.prepareStatement(\"exec #UpdateLargeBinary ?\");\r\n            pr.setBinaryStream( 1, fis, rowCount*1024 );\r\n            pr.execute();\r\n            st.execute(\"DROP PROCEDURE #UpdateLargeBinary\");\r\n            st.close();\r\n            pr.close();\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            fis.close();\r\n            java.io.File file = new java.io.File(tableName+\".bin\");\r\n            file.delete();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":8,"lastLine":16},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(25903,1379,<609,4>,<641,5>)","rawLines":"/**\r\n      *  12. Test\r\n      *  Update large binary data.\r\n      */  \r\n    static void test_UpdateLargeBinary(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update large binary data: \" + rowCount + \"KB bytes\");\r\n        \r\n        try{\r\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\r\n            byte bytes[] = new byte[1024];\r\n            for(int i=0; i<rowCount; i++){\r\n                fos.write(bytes);\r\n            }\r\n            fos.close();\r\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\r\n            long time = -System.currentTimeMillis();\r\n            PreparedStatement pr = con.prepareStatement(\"Update \" + tableName + \" set im=? WHERE pr=1\");\r\n            pr.setBinaryStream( 1, fis, rowCount*1024 );\r\n            pr.execute();\r\n            pr.close();\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            fis.close();\r\n            java.io.File file = new java.io.File(tableName+\".bin\");\r\n            file.delete();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":8,"lastLine":16}],"size":9},{"content":"public void tearDown(){try{Connection con = AllTests.getConnection();Statement st = con.createStatement();st.execute(\"drop table \" + table);st.close();}catch(Throwable e){}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestDataTypes.java|(3053,301,<68,4>,<77,5>)","rawLines":"public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }","startLine":0,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(5149,301,<95,4>,<104,5>)","rawLines":"public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }","startLine":0,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java|(1787,301,<53,4>,<62,5>)","rawLines":"public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }","startLine":0,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestFunctions.java|(22524,301,<374,4>,<383,5>)","rawLines":"public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }","startLine":0,"lastLine":9}],"size":9},{"content":"public void run(){try{Statement st2 = con.createStatement();int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");assertEquals(\"Update Count\", 1, count);}catch(Throwable ex){throwable = ex;}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestThreads.java|(2645,435,<91,20>,<99,21>)","rawLines":"public void run(){\r\n                        try{\r\n                            Statement st2 = con.createStatement();\r\n                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");\r\n                            assertEquals(\"Update Count\", 1, count);\r\n                        }catch(Throwable ex){\r\n                            throwable = ex;\r\n                        }\r\n                    }","startLine":0,"lastLine":8},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestThreads.java|(1850,1874,<72,4>,<121,5>)","rawLines":"/**\r\n     * Create a table with a single row. In different threads on the same connection a int value will be increment.\r\n     * \r\n     * @throws Throwable\r\n     *             if an thread problem occur\r\n     */\r\n    public void testConcurrentThreadWrite() throws Throwable{\r\n        ArrayList threadList = new ArrayList();\r\n        throwable = null;\r\n        final Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        try{\r\n            st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");\r\n            st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");\r\n\r\n            // start threads that check the row count\r\n            for(int i = 0; i < 200; i++){\r\n                Thread thread = new Thread(new Runnable(){\r\n\r\n                    public void run(){\r\n                        try{\r\n                            Statement st2 = con.createStatement();\r\n                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");\r\n                            assertEquals(\"Update Count\", 1, count);\r\n                        }catch(Throwable ex){\r\n                            throwable = ex;\r\n                        }\r\n                    }\r\n\r\n                });\r\n                threadList.add(thread);\r\n                thread.start();\r\n            }\r\n\r\n            // wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }\r\n\r\n            // throw the exception if one occur\r\n            if(throwable != null){\r\n                throw throwable;\r\n            }\r\n\r\n            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");\r\n        }finally{\r\n            dropTable(con, \"ConcurrentWrite\");\r\n        }\r\n    }","startLine":19,"lastLine":27}],"size":9},{"content":"else System.out.println( \"  Test time: \" + time + \" ms\");st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(7700,2106,<194,4>,<243,5>)","rawLines":"/**\r\n      *  4. Test\r\n      *  Delete rows with the method deleteRow().\r\n      */  \r\n    static void test_DeleteRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test delete rows with deleteRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.next();\r\n                rs.deleteRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            count = rs.getInt(1);\r\n            if (count != 0)\r\n                 System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":41,"lastLine":49},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(6307,1369,<160,4>,<190,5>)","rawLines":"/**\r\n      *  3. Test\r\n      *  Insert only empty rows with the default values of the row with the method insertRow().\r\n      */  \r\n    static void test_InsertEmptyRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert empty rows with insertRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.moveToInsertRow();\r\n                rs.insertRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":22,"lastLine":30},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(4122,1320,<103,4>,<131,5>)","rawLines":"/**\r\n      *  1. Test\r\n      *  Insert rows with default values with a classic insert statement.\r\n      */  \r\n    static void test_InsertClassic(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert rows with default values with a classic insert statement: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                st.execute(\"INSERT INTO \" + tableName + \"(i) VALUES(\" + i +\")\");\r\n            }\r\n            time += System.currentTimeMillis();\r\n            ResultSet rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":20,"lastLine":28}],"size":9},{"content":"case SQLTokenizer.LONGVARBINARY:return getBytes();case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:return new DateTime( getLong(), dataType );case SQLTokenizer.UNIQUEIDENTIFIER:return getBytes();","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(16193,2433,<474,4>,<527,5>)","rawLines":"Object getObject() throws java.lang.Exception {\r\n        if(isNull()) return null;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return getBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return getBytes();\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n                    return new Integer( getInt() );\r\n            case SQLTokenizer.BIGINT:\r\n                    return new Long( getLong() );\r\n            case SQLTokenizer.REAL:\r\n                    return new Float( getFloat() );\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return new Double( getDouble() );\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return Money.createFromUnscaledValue( getMoney() );\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return getNumeric();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n            \t\treturn getString( left.getString(), right.getString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    Object lObj = left.getObject();\r\n                    //FIXME NullPointerException bei NEGATIVE\r\n                    Object rObj = right.getObject();\r\n                    if(lObj instanceof Number && rObj instanceof Number)\r\n                        return new Double( getDoubleImpl( ((Number)lObj).doubleValue(), ((Number)rObj).doubleValue() ) );\r\n                    else\r\n                        return getString( lObj.toString(), rObj.toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n                    return getBytes();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn new DateTime( getLong(), dataType );\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    return getBytes();\r\n            default: throw createUnspportedDataType();\r\n        }\r\n    }","startLine":42,"lastLine":50},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionFunctionReturnP1.java|(1651,1775,<48,4>,<93,5>)","rawLines":"Object getObject() throws Exception{\r\n\t\tif(isNull()) return null;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n\t        case SQLTokenizer.BIT:\r\n\t        case SQLTokenizer.BOOLEAN:\r\n\t                return getBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n\t        case SQLTokenizer.BINARY:\r\n\t        case SQLTokenizer.VARBINARY:\r\n\t                return getBytes();\r\n\t        case SQLTokenizer.TINYINT:\r\n\t        case SQLTokenizer.SMALLINT:\r\n\t        case SQLTokenizer.INT:\r\n\t                return new Integer( getInt() );\r\n\t        case SQLTokenizer.BIGINT:\r\n\t                return new Long( getLong() );\r\n\t        case SQLTokenizer.REAL:\r\n\t                return new Float( getFloat() );\r\n\t        case SQLTokenizer.FLOAT:\r\n\t        case SQLTokenizer.DOUBLE:\r\n\t                return new Double( getDouble() );\r\n\t        case SQLTokenizer.MONEY:\r\n\t        case SQLTokenizer.SMALLMONEY:\r\n\t                return Money.createFromUnscaledValue( getMoney() );\r\n\t        case SQLTokenizer.NUMERIC:\r\n\t        case SQLTokenizer.DECIMAL:\r\n\t                return getNumeric();\r\n\t        case SQLTokenizer.CHAR:\r\n\t        case SQLTokenizer.NCHAR:\r\n\t        case SQLTokenizer.VARCHAR:\r\n\t        case SQLTokenizer.NVARCHAR:\r\n\t        case SQLTokenizer.LONGNVARCHAR:\r\n\t        case SQLTokenizer.LONGVARCHAR:\r\n\t        \t\treturn getString();\r\n\t        case SQLTokenizer.LONGVARBINARY:\r\n\t                return getBytes();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn new DateTime( getLong(), dataType );\r\n\t        case SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t                return getBytes();\r\n\t        default: throw createUnspportedDataType(param1.getDataType());\r\n\t    }\r\n    }","startLine":34,"lastLine":42}],"size":9},{"content":"if(obj == null) return 0;switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return (obj == Boolean.TRUE) ? 1 : 0;case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:case SQLTokenizer.INT:case SQLTokenizer.BIGINT:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionValue.java|(13986,1138,<423,1>,<452,5>)","rawLines":"static int getInt(Object obj, int dataType) throws Exception{\r\n        if(obj == null) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                return (obj == Boolean.TRUE) ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n            case SQLTokenizer.BIGINT:\r\n            case SQLTokenizer.REAL:\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.DECIMAL:\r\n            case SQLTokenizer.NUMERIC:\r\n                return ((Number)obj).intValue();\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn (int)((DateTime)obj).getTimeMillis();\r\n            default:\r\n\t\t\t\tString str = obj.toString().trim();\r\n\t\t\t\ttry{\r\n\t\t\t\t\treturn Integer.parseInt( str );\r\n\t\t\t\t}catch(Throwable th){/* A NumberFormatException can occur if it a floating point number */}\r\n\t\t\t\treturn (int)Double.parseDouble( str );\r\n        }\r\n    }","startLine":1,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionValue.java|(15226,1037,<458,1>,<486,5>)","rawLines":"static long getLong(Object obj, int dataType) throws Exception{\r\n       if(obj == null) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                return (obj == Boolean.TRUE) ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n            case SQLTokenizer.BIGINT:\r\n            case SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n                return ((Number)obj).longValue();\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn ((DateTime)obj).getTimeMillis();\r\n            default: \r\n            \tString str = obj.toString();\r\n            \tif(str.indexOf('-') > 0 || str.indexOf(':') > 0)\r\n            \t\treturn DateTime.parse(str);\r\n\t\t\t\ttry{\r\n\t\t\t\t\treturn Long.parseLong( str );\r\n\t\t\t\t}catch(NumberFormatException e){\r\n\t\t\t\t\treturn (long)Double.parseDouble( str );\r\n\t\t\t\t}\r\n        }\r\n    }","startLine":1,"lastLine":9}],"size":9},{"content":"formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append(':');formatMillis( details.millis, buf );return buf.toString();","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":203,"lastLine":210},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":280,"lastLine":287}],"size":8},{"content":"try{Expression expr = getValue(i);wasNull = expr.isNull();return expr.getLong();}catch(Exception e){throw SmallSQLException.createFromException( e );}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4331,291,<117,4>,<125,5>)","rawLines":"public long getLong(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":1,"lastLine":8},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4928,295,<135,4>,<143,5>)","rawLines":"public double getDouble(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":1,"lastLine":8}],"size":8},{"content":"this.offset = valueOffset;if(readBoolean()) return 0;switch(dataType){case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return readBoolean() ? 1 : 0;case SQLTokenizer.BINARY:case SQLTokenizer.VARBINARY:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(32283,2708,<889,4>,<952,5>)","rawLines":"/**\r\n     * It used for ResultSet.getInt()\r\n     */\r\n    @Override\r\n    int getInt(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2int( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return (int)readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return (int)readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return (int)readDouble();\r\n            case SQLTokenizer.MONEY:\r\n            \t\tlong longValue = readLong() / 10000;\r\n            \t\treturn Utils.money2int(longValue);\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / 10000;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().intValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Integer.parseInt( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Integer.parseInt( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return ExpressionValue.getInt(ois.readObject().toString(), SQLTokenizer.VARCHAR);\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2int( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn (int)readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn (int)readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn (int)readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn (int)readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"INT\" });\r\n        }\r\n    }","startLine":5,"lastLine":12},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(35005,2639,<955,4>,<1017,5>)","rawLines":"/**\r\n     * It used for ResultSet.getLong()\r\n     */\r\n    @Override\r\n    long getLong(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2long( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return (long)readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return (long)readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / 10000;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / 10000;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().longValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Long.parseLong( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Long.parseLong( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return ExpressionValue.getLong( ois.readObject().toString(), SQLTokenizer.VARCHAR );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2long( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"BIGINT\" });\r\n        }\r\n    }","startLine":5,"lastLine":12},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(37658,2631,<1020,4>,<1082,5>)","rawLines":"/**\r\n     * It used for ResultSet.getFloat()\r\n     */\r\n    @Override\r\n    float getFloat(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2float( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return (float)readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / (float)10000.0;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / (float)10000.0;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().floatValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Float.parseFloat( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Float.parseFloat( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return Float.parseFloat( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2float( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"REAL\" });\r\n        }\r\n    }","startLine":5,"lastLine":12},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(40303,2625,<1085,4>,<1147,5>)","rawLines":"/**\r\n     * It used for ResultSet.getDouble()\r\n     */\r\n    @Override\r\n    double getDouble(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2double( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / 10000.0;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / 10000.0;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().doubleValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Double.parseDouble( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Double.parseDouble( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return Double.parseDouble( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2double( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });\r\n        }\r\n    }","startLine":5,"lastLine":12}],"size":8},{"content":"break;case SQLTokenizer.BIGINT:case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Index.java|(8083,2880,<220,1>,<291,2>)","rawLines":"/**\r\n\t * Add a value to the index.\r\n\t * @param rowOffset Is the value that is save in the index. It is typical a row number or a rowOffset.\r\n\t * @param expressions This is the list of ORDER BY columns and describe the position in the index.\r\n\t */\r\n\tfinal void addValues( long rowOffset, Expressions expressions ) throws Exception{\r\n\t\tIndexNode page = this.rootPage;\r\n\t\tint count = expressions.size();\r\n\t\tfor(int i=0; i<count; i++){\r\n\t\t\tExpression expr = expressions.get(i);\r\n\t\t\tboolean isLastValues = (i == count-1);\r\n\t\t\tif(expr.isNull()){\r\n\t\t\t\tpage = addNull(page, rowOffset, isLastValues);\r\n\t\t\t}else{\r\n\t\t\t\tswitch(expr.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, floatToBinarySortOrder( expr.getFloat()), isLastValues, 2 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, doubleToBinarySortOrder( expr.getDouble()), isLastValues, 4 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, expr.getInt(), isLastValues, 1 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, shortToBinarySortOrder( expr.getInt()), isLastValues, 1 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, intToBinarySortOrder( expr.getInt()), isLastValues, 2 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLMONEY:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.NVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGNVARCHAR:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), false ), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), true ), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BLOB:\r\n\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, bytesToBinarySortOrder( expr.getBytes()), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, expr.getBoolean() ? 2 : 1, isLastValues, 1 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, numericToBinarySortOrder( expr.getNumeric()), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault: \r\n\t\t\t\t\t\t//TODO more data types\r\n\t\t\t\t\t\tthrow new Error(String.valueOf(expr.getDataType()));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}","startLine":30,"lastLine":37},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Index.java|(5028,3047,<139,1>,<217,2>)","rawLines":"/**\r\n     * Return the last IndexNode for the expression. If the value in expressions does not exist then it return a null.\r\n     * \r\n     * @param page\r\n     *            the start point of the search. If it the first expression of a list then it is the rootPage\r\n     * @param expr\r\n     *            the searching expression\r\n     * @param searchNullValues\r\n     *            a expression with NULL values should return a result.\r\n     * @param nodeList\r\n     *            optional, can be null. The search path in the index tree.\r\n     * @return the mapping IndexNode or null.\r\n     */\r\n\tfinal private IndexNode findRows(IndexNode page, Expression expr, boolean searchNullValues, ArrayList nodeList) throws Exception{\r\n\t\t\tif(expr.isNull()){\r\n                if(!searchNullValues){\r\n                    return null;\r\n                }\r\n\t\t\t\tpage = findNull(page);\r\n\t\t\t}else{\r\n\t\t\t\tswitch(expr.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\tpage = find( page, floatToBinarySortOrder( expr.getFloat()), 2, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\tpage = find( page, doubleToBinarySortOrder( expr.getDouble()), 4, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\tpage = find( page, expr.getInt(), 1, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\tpage = find( page, shortToBinarySortOrder( expr.getInt()), 1, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\tpage = find( page, intToBinarySortOrder( expr.getInt()), 2, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLMONEY:\r\n\t\t\t\t\t\tpage = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.NVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGNVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\t\t\tpage = find( page, stringToBinarySortOrder( expr.getString(), false ), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\t\tpage = find( page, stringToBinarySortOrder( expr.getString(), true ), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BLOB:\r\n\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\t\tpage = find( page, bytesToBinarySortOrder( expr.getBytes()), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\t\tpage = find( page, expr.getBoolean() ? 2 : 1, 1, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\tcase SQLTokenizer.DECIMAL:\t\t\t\t\t\t\r\n\t\t\t\t\t\tpage = find( page, numericToBinarySortOrder( expr.getNumeric() ), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault: \r\n\t\t\t\t\t\t//TODO more data types\r\n\t\t\t\t\t\tthrow new Error(String.valueOf(expr.getDataType()));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn page;\r\n\t}","startLine":36,"lastLine":43}],"size":8},{"content":"formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);buf.append('.');formatMillis( details.millis, buf );return buf.toString();","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":233,"lastLine":240},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":249,"lastLine":256}],"size":8},{"content":"Connection con = AllTests.getConnection();try{con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");assertRowCount( 0, \"Select * from Scrollable\");con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");assertRowCount( 1, \"Select * from Scrollable\");assertRowCount( 0, \"Select * from Scrollable Where 1=0\");Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestScrollable.java|(4338,1050,<108,1>,<126,2>)","rawLines":"public void testFirstWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}","startLine":1,"lastLine":10},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestScrollable.java|(5944,1192,<144,1>,<164,2>)","rawLines":"public void testPreviousWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testPreviousWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testPreviousWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testPreviousWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testPreviousWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n            testPreviousWithWhereAssert( st.executeQuery(\"Select v from Scrollable Group By v Having 1=0 Order By v\") );\r\n\t\t\t\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}","startLine":1,"lastLine":10},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestScrollable.java|(1466,1036,<43,1>,<61,2>)","rawLines":"public void testLastWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n\t\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}","startLine":1,"lastLine":10},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestScrollable.java|(2921,1045,<76,1>,<94,2>)","rawLines":"public void testNextWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}","startLine":1,"lastLine":10}],"size":8},{"content":"fail(\"SQLException 'Duplicated Column' should be throw\");}catch(SQLException e){assertSQLException(\"01000\", 0, e);}}finally{dropTable(con, \"DuplicatedColumn\");}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestExceptionMethods.java|(6322,607,<182,4>,<196,5>)","rawLines":"public void testDuplicatedColumnInsert() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }\r\n    }","startLine":7,"lastLine":14},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestExceptionMethods.java|(5715,597,<165,4>,<179,5>)","rawLines":"public void testDuplicatedColumnAlter() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }\r\n    }","startLine":7,"lastLine":14}],"size":8},{"content":"st.close();}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(24166,1718,<563,4>,<606,5>)","rawLines":"/**\r\n      *  11. Test\r\n      *  Scroll and call the getXXX methods for every columns.\r\n      */  \r\n    static void test_Scroll_getXXX(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test scroll and call the getXXX methods for every columns: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement();\r\n            long time = -System.currentTimeMillis();\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n            for (int i=0; i<rowCount; i++){\r\n                    rs.next();\r\n\t                rs.getInt   (  1 );\r\n\t                rs.getBytes (  2 );\r\n\t                rs.getString(  3 );\r\n\t                rs.getDate  (  4 );\r\n\t                rs.getFloat (  5 );\r\n\t                rs.getFloat (  6 );\r\n\t                rs.getBytes (  7 );\r\n\t                rs.getInt   (  8 );\r\n\t                rs.getDouble(  9 );\r\n\t                rs.getDouble(  10 );\r\n\t                rs.getFloat (  11 );\r\n\t                rs.getTime  (  12 );\r\n\t                rs.getShort (  13 );\r\n\t                rs.getFloat (  14 );\r\n\t                rs.getString(  15 );\r\n\t                rs.getString(  16 );\r\n\t                rs.getByte  (  17 );\r\n\t                rs.getBytes (  18 );\r\n\t                rs.getString(  19 );\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":36,"lastLine":43},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(7700,2106,<194,4>,<243,5>)","rawLines":"/**\r\n      *  4. Test\r\n      *  Delete rows with the method deleteRow().\r\n      */  \r\n    static void test_DeleteRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test delete rows with deleteRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.next();\r\n                rs.deleteRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            count = rs.getInt(1);\r\n            if (count != 0)\r\n                 System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":42,"lastLine":49},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(12551,2566,<307,4>,<364,5>)","rawLines":"/**\r\n      *  6. Test\r\n      *  Request one page of rows from a large ResultSet.\r\n      */  \r\n    static void test_RowRequestPages(Connection con){\r\n        int pages = 100; \r\n        int rows  = rowCount / pages;\r\n        System.out.println();\r\n        System.out.println( \"Test request row pages : \" + pages + \" pages, \" +rows + \" rows per page\");\r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\r\n            st.setFetchSize( rows );\r\n            for (int i=0; i<pages; i++){\r\n                rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n                rs.absolute( i*rows+1 );\r\n                for (int r=1; r<rows; r++){\r\n                    // only (rows-1) rows because absolute has already the first row\r\n                    if (!rs.next()){\r\n                        System.out.println( \"  Failed: No rows were found at page \" + i + \" page and row \" + r);\r\n                        return;\r\n                    }\r\n                    int col_i = rs.getInt(\"i\");\r\n                    if (col_i != (i*rows+r)){\r\n                        System.out.println( \"  Failed: Wrong row \" + col_i + \", it should be row \" + (i*rows+r));\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":50,"lastLine":57},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(5466,817,<135,4>,<156,5>)","rawLines":"/**\r\n      *  2. Test\r\n      *  Delete all rows with a single statement.\r\n      */  \r\n    static void test_DeleteAll(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test delete all rows: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"DELETE FROM \" + tableName);\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":14,"lastLine":21},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(6307,1369,<160,4>,<190,5>)","rawLines":"/**\r\n      *  3. Test\r\n      *  Insert only empty rows with the default values of the row with the method insertRow().\r\n      */  \r\n    static void test_InsertEmptyRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert empty rows with insertRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.moveToInsertRow();\r\n                rs.insertRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":23,"lastLine":30},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(4122,1320,<103,4>,<131,5>)","rawLines":"/**\r\n      *  1. Test\r\n      *  Insert rows with default values with a classic insert statement.\r\n      */  \r\n    static void test_InsertClassic(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert rows with default values with a classic insert statement: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                st.execute(\"INSERT INTO \" + tableName + \"(i) VALUES(\" + i +\")\");\r\n            }\r\n            time += System.currentTimeMillis();\r\n            ResultSet rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":21,"lastLine":28}],"size":8},{"content":"rs.beforeFirst();assertTrue( rs.next() );assertEquals(\"qwert2\", rs.getString(\"v\"));assertFalse( rs.next() );}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(12649,1193,<339,1>,<371,2>)","rawLines":"/**\r\n     * If there was insert a row within the ResultSet that not map WHERE than you scroll to this row. If there an Insert\r\n     * outsite the ResultSet that not map the WHERE then you can't scroll this row.\r\n     * \r\n     * @throws Exception\r\n     */\r\n\tpublic void testInsertRow_withWrongWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\r\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\r\n\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where 1=0\");\r\n\t\t\t\r\n\t\t\trs.moveToInsertRow();\r\n\t\t\trs.updateString(\"v\", \"qwert2\");\r\n\t\t\trs.insertRow();\r\n\t\t\t\r\n\t\t\trs.beforeFirst();\r\n\t\t\tassertTrue( rs.next() );\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":22,"lastLine":29},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(6652,1073,<197,1>,<228,2>)","rawLines":"private void testInsertRow_Last(Connection con, boolean callLastBefore) throws Exception{\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\r\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\r\n\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where 1=0\");\r\n\t\t\t\r\n\t\t\tif(callLastBefore) rs.last();\r\n\t\t\trs.moveToInsertRow();\r\n\t\t\trs.updateString(\"v\", \"qwert2\");\r\n\t\t\trs.insertRow();\r\n\t\t\t\r\n\t\t\trs.last();\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\t\t\tassertTrue( rs.previous() );\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\t\r\n\t\t\trs.beforeFirst();\r\n\t\t\tassertTrue( rs.next() );\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t}\r\n\t}","startLine":21,"lastLine":29}],"size":8},{"content":"Statement st = con.createStatement();try{st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");for(int i = 0; i < 200; i++){Thread thread = new Thread(new Runnable(){public void run(){try{","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestThreads.java|(3734,1973,<124,4>,<175,5>)","rawLines":"/**\r\n     * Create a table with a single row. In different connections a int value will be increment.\r\n     * \r\n     * @throws Throwable\r\n     *             if an thread problem occur\r\n     */\r\n    public void testConcurrentConnectionWrite() throws Throwable{\r\n        ArrayList threadList = new ArrayList();\r\n        throwable = null;\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        try{\r\n            st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");\r\n            st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");\r\n\r\n            // start threads that check the row count\r\n            for(int i = 0; i < 200; i++){\r\n                Thread thread = new Thread(new Runnable(){\r\n\r\n                    public void run(){\r\n                        try{\r\n                            Connection con2 = AllTests.createConnection();\r\n                            Statement st2 = con2.createStatement();\r\n                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");\r\n                            assertEquals(\"Update Count\", 1, count);\r\n                            con2.close();\r\n                        }catch(Throwable ex){\r\n                            throwable = ex;\r\n                        }\r\n                    }\r\n\r\n                });\r\n                threadList.add(thread);\r\n                thread.start();\r\n            }\r\n\r\n            // wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }\r\n\r\n            // throw the exception if one occur\r\n            if(throwable != null){\r\n                throw throwable;\r\n            }\r\n\r\n            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");\r\n        }finally{\r\n            dropTable(con, \"ConcurrentWrite\");\r\n        }\r\n    }","startLine":10,"lastLine":20},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestThreads.java|(1850,1874,<72,4>,<121,5>)","rawLines":"/**\r\n     * Create a table with a single row. In different threads on the same connection a int value will be increment.\r\n     * \r\n     * @throws Throwable\r\n     *             if an thread problem occur\r\n     */\r\n    public void testConcurrentThreadWrite() throws Throwable{\r\n        ArrayList threadList = new ArrayList();\r\n        throwable = null;\r\n        final Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        try{\r\n            st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");\r\n            st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");\r\n\r\n            // start threads that check the row count\r\n            for(int i = 0; i < 200; i++){\r\n                Thread thread = new Thread(new Runnable(){\r\n\r\n                    public void run(){\r\n                        try{\r\n                            Statement st2 = con.createStatement();\r\n                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");\r\n                            assertEquals(\"Update Count\", 1, count);\r\n                        }catch(Throwable ex){\r\n                            throwable = ex;\r\n                        }\r\n                    }\r\n\r\n                });\r\n                threadList.add(thread);\r\n                thread.start();\r\n            }\r\n\r\n            // wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }\r\n\r\n            // throw the exception if one occur\r\n            if(throwable != null){\r\n                throw throwable;\r\n            }\r\n\r\n            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");\r\n        }finally{\r\n            dropTable(con, \"ConcurrentWrite\");\r\n        }\r\n    }","startLine":10,"lastLine":20}],"size":8},{"content":"assertTrue( rs.next() );oldValue = rs.getString(\"v\");assertNull(oldValue);assertTrue( rs.next() );oldValue = rs.getString(\"v\");int count = 1;while(rs.next()){String newValue = rs.getString(\"v\");","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(4576,664,<143,1>,<167,2>)","rawLines":"public void testOrderBy_varchar() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":9,"lastLine":18},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(5248,660,<170,1>,<195,2>)","rawLines":"public void testOrderBy_varchar_asc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\trs.close();\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":9,"lastLine":18}],"size":8},{"content":"result = left.next();if(result){result = right.first();if(!result){switch(type){case Join.LEFT_JOIN:case Join.FULL_JOIN:isOuterValid = false;","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/JoinScroll.java|(2486,3786,<80,4>,<175,5>)","rawLines":"boolean next() throws Exception{\r\n        boolean result;\r\n        if(fullReturnCounter >=0){\r\n            do{\r\n                if(fullReturnCounter >= fullRowCount){\r\n                    return false; \r\n                }\r\n                right.next();\r\n            }while(isFullNotValid[fullReturnCounter++]);\r\n            return true;\r\n        }\r\n        do{\r\n            if(isBeforeFirst){               \r\n                result = left.next();\r\n                if(result){ \r\n                    result = right.first();\r\n                    if(!result){\r\n                        switch(type){\r\n                            case Join.LEFT_JOIN:\r\n                            case Join.FULL_JOIN:\r\n                                isOuterValid = false;\r\n                                isBeforeFirst = false;\r\n                                right.nullRow();\r\n                                return true;\r\n                        }\r\n                    }else fullRightRowCounter++;\r\n                }else{\r\n                    // left does not include any row\r\n                    if(type == Join.FULL_JOIN){\r\n                        while(right.next()){\r\n                            fullRightRowCounter++;\r\n                        }\r\n                        fullRowCount = fullRightRowCounter;\r\n                    }\r\n                }\r\n            }else{\r\n                result = right.next();              \r\n                if(!result){\r\n                    switch(type){\r\n                        case Join.LEFT_JOIN:\r\n                        case Join.FULL_JOIN:\r\n                            if(isOuterValid){\r\n                                isOuterValid = false;\r\n                                right.nullRow();\r\n                                return true;\r\n                            }\r\n                            fullRowCount = Math.max( fullRowCount, fullRightRowCounter);\r\n                            fullRightRowCounter = 0;\r\n                    }\r\n                    isOuterValid = true;\r\n                    result = left.next();\r\n                    if(result){ \r\n                        result = right.first();\r\n                        if(!result){\r\n                            switch(type){\r\n                                case Join.LEFT_JOIN:\r\n                                case Join.FULL_JOIN:\r\n                                    isOuterValid = false;\r\n                                    right.nullRow();\r\n                                    return true;\r\n                            }\r\n                        }else fullRightRowCounter++;\r\n                    }\r\n                    \r\n                }else fullRightRowCounter++;\r\n            }\r\n            isBeforeFirst = false;\r\n        }while(result && !getBoolean());\r\n        isOuterValid = false;\r\n        if(type == Join.FULL_JOIN){\r\n            if(fullRightRowCounter >= isFullNotValid.length){\r\n                boolean[] temp = new boolean[fullRightRowCounter << 1];\r\n                System.arraycopy( isFullNotValid, 0, temp, 0, fullRightRowCounter);\r\n                isFullNotValid = temp;\r\n            }\r\n            if(!result){\r\n                if(fullRowCount == 0){\r\n                    return false; \r\n                }\r\n                if(fullReturnCounter<0) {\r\n                    fullReturnCounter = 0;\r\n                    right.first();\r\n                    left.nullRow();\r\n                }\r\n                while(isFullNotValid[fullReturnCounter++]){\r\n                    if(fullReturnCounter >= fullRowCount){\r\n                       return false; \r\n                    }\r\n                    right.next();\r\n                }\r\n                return true;\r\n            }else\r\n                isFullNotValid[fullRightRowCounter-1] = result;\r\n        }\r\n        return result;\r\n    }","startLine":13,"lastLine":20},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/JoinScroll.java|(2486,3786,<80,4>,<175,5>)","rawLines":"boolean next() throws Exception{\r\n        boolean result;\r\n        if(fullReturnCounter >=0){\r\n            do{\r\n                if(fullReturnCounter >= fullRowCount){\r\n                    return false; \r\n                }\r\n                right.next();\r\n            }while(isFullNotValid[fullReturnCounter++]);\r\n            return true;\r\n        }\r\n        do{\r\n            if(isBeforeFirst){               \r\n                result = left.next();\r\n                if(result){ \r\n                    result = right.first();\r\n                    if(!result){\r\n                        switch(type){\r\n                            case Join.LEFT_JOIN:\r\n                            case Join.FULL_JOIN:\r\n                                isOuterValid = false;\r\n                                isBeforeFirst = false;\r\n                                right.nullRow();\r\n                                return true;\r\n                        }\r\n                    }else fullRightRowCounter++;\r\n                }else{\r\n                    // left does not include any row\r\n                    if(type == Join.FULL_JOIN){\r\n                        while(right.next()){\r\n                            fullRightRowCounter++;\r\n                        }\r\n                        fullRowCount = fullRightRowCounter;\r\n                    }\r\n                }\r\n            }else{\r\n                result = right.next();              \r\n                if(!result){\r\n                    switch(type){\r\n                        case Join.LEFT_JOIN:\r\n                        case Join.FULL_JOIN:\r\n                            if(isOuterValid){\r\n                                isOuterValid = false;\r\n                                right.nullRow();\r\n                                return true;\r\n                            }\r\n                            fullRowCount = Math.max( fullRowCount, fullRightRowCounter);\r\n                            fullRightRowCounter = 0;\r\n                    }\r\n                    isOuterValid = true;\r\n                    result = left.next();\r\n                    if(result){ \r\n                        result = right.first();\r\n                        if(!result){\r\n                            switch(type){\r\n                                case Join.LEFT_JOIN:\r\n                                case Join.FULL_JOIN:\r\n                                    isOuterValid = false;\r\n                                    right.nullRow();\r\n                                    return true;\r\n                            }\r\n                        }else fullRightRowCounter++;\r\n                    }\r\n                    \r\n                }else fullRightRowCounter++;\r\n            }\r\n            isBeforeFirst = false;\r\n        }while(result && !getBoolean());\r\n        isOuterValid = false;\r\n        if(type == Join.FULL_JOIN){\r\n            if(fullRightRowCounter >= isFullNotValid.length){\r\n                boolean[] temp = new boolean[fullRightRowCounter << 1];\r\n                System.arraycopy( isFullNotValid, 0, temp, 0, fullRightRowCounter);\r\n                isFullNotValid = temp;\r\n            }\r\n            if(!result){\r\n                if(fullRowCount == 0){\r\n                    return false; \r\n                }\r\n                if(fullReturnCounter<0) {\r\n                    fullReturnCounter = 0;\r\n                    right.first();\r\n                    left.nullRow();\r\n                }\r\n                while(isFullNotValid[fullReturnCounter++]){\r\n                    if(fullReturnCounter >= fullRowCount){\r\n                       return false; \r\n                    }\r\n                    right.next();\r\n                }\r\n                return true;\r\n            }else\r\n                isFullNotValid[fullRightRowCounter-1] = result;\r\n        }\r\n        return result;\r\n    }","startLine":50,"lastLine":57}],"size":8},{"content":"case SQLTokenizer.COMMA:continue;default:throw new Error();}}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SQLParser.java|(36420,1015,<1022,4>,<1051,5>)","rawLines":"/**\r\n     * Read a Expression list in parenthesis like of VALUES() or functions. \r\n     * The left parenthesis is already consumed.\r\n     * \r\n     * @param cmd is needed to add parameters \"?\" with addParameter() \r\n     * @see #expressionDefList\r\n     */ \r\n    private Expressions expressionParenthesisList(Command cmd) throws SQLException{\r\n\t\tExpressions list = new Expressions();\r\n\t\t{\r\n\t\t\tSQLToken token = nextToken();\r\n\t\t\tif(token != null && token.value == SQLTokenizer.PARENTHESIS_R){\r\n\t\t\t\t// empty list like functions without parameters\r\n\t\t\t\treturn list;\r\n\t\t\t}\r\n\t\t\tpreviousToken();\r\n\t\t}\r\n        while(true){\r\n            list.add( expression(cmd, 0) );\r\n            SQLToken token = nextToken(MISSING_COMMA_PARENTHESIS);\r\n            switch(token.value){\r\n                case SQLTokenizer.PARENTHESIS_R:\r\n                    return list;\r\n                case SQLTokenizer.COMMA:\r\n                    continue;\r\n                default:\r\n                    throw new Error();\r\n            }\r\n        }\r\n    }","startLine":23,"lastLine":29},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SQLParser.java|(38524,1051,<1093,4>,<1118,5>)","rawLines":"private void expressionDefList(Command cmd, Expressions expressions, Strings columns) throws SQLException{\r\n        SQLToken token = nextToken();\r\n        if(token.value != SQLTokenizer.PARENTHESIS_L) throw createSyntaxError(token, MISSING_PARENTHESIS_L );\r\n        Loop:\r\n        while(true){\r\n            int offset = token.offset + token.length;\r\n            token = nextToken();\r\n            if(token != null) offset = token.offset;\r\n            previousToken();  \r\n            \r\n            expressions.add( expression(cmd, 0) );\r\n            SQLToken last = lastToken();\r\n            int length = last.offset + last.length - offset;\r\n            columns.add( new String( sql, offset, length ) );\r\n\r\n            token = nextToken(MISSING_COMMA_PARENTHESIS);\r\n            switch(token.value){\r\n                case SQLTokenizer.PARENTHESIS_R:\r\n                    break Loop;\r\n                case SQLTokenizer.COMMA:\r\n                    continue;\r\n                default:\r\n                    throw new Error();\r\n            }\r\n        }\r\n    }","startLine":19,"lastLine":25}],"size":7},{"content":"if(places > 0){value /= factor;}else{value *= factor;}return value;}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionFunctionRound.java|(1590,488,<45,4>,<68,5>)","rawLines":"final double getDouble() throws Exception{\r\n\t\tif(isNull()) return 0;\r\n\t\tfinal int places = param2.getInt();\r\n\t\tdouble value = param1.getDouble();\r\n\t\tlong factor = 1;\r\n\t\tif(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}\r\n\t\tvalue = Math.rint( value );\r\n\t\tif(places > 0){\r\n\t\t\tvalue /= factor;\r\n\t\t}else{\r\n\t\t\tvalue *= factor;\r\n\t\t}\r\n\t\treturn value;\r\n    }","startLine":17,"lastLine":23},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionFunctionTruncate.java|(1599,529,<45,4>,<68,5>)","rawLines":"final double getDouble() throws Exception{\r\n\t\tif(isNull()) return 0;\r\n\t\tfinal int places = param2.getInt();\r\n\t\tdouble value = param1.getDouble();\r\n\t\tlong factor = 1;\r\n\t\tif(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}\r\n        value -= value % 1; //modulo also work with values larger long\r\n\t\tif(places > 0){\r\n\t\t\tvalue /= factor;\r\n\t\t}else{\r\n\t\t\tvalue *= factor;\r\n\t\t}\r\n\t\treturn value;\r\n    }","startLine":17,"lastLine":23}],"size":7},{"content":"wasNull = expr.isNull();if(wasNull) return null;return DateTime.getDate( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5903,322,<163,4>,<172,5>)","rawLines":"public Date getDate(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":3,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSResultSet.java|(5793,342,<168,4>,<177,5>)","rawLines":"public Date getDate(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":3,"lastLine":9}],"size":7},{"content":"wasNull = expr.isNull();if(wasNull) return null;return DateTime.getTime( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6231,322,<173,4>,<182,5>)","rawLines":"public Time getTime(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":3,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSResultSet.java|(6153,342,<180,4>,<189,5>)","rawLines":"public Time getTime(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":3,"lastLine":9}],"size":7},{"content":"public void tearDown(){try {dropTable( AllTests.getConnection(), table );} catch (SQLException ex) {ex.printStackTrace();}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestAlterTable2.java|(297,187,<20,4>,<26,5>)","rawLines":"public void tearDown(){\r\n        try {\r\n            dropTable( AllTests.getConnection(), table );\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }","startLine":0,"lastLine":6},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestAlterTable.java|(1333,187,<39,4>,<45,5>)","rawLines":"public void tearDown(){\r\n        try {\r\n            dropTable( AllTests.getConnection(), table );\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }","startLine":0,"lastLine":6}],"size":7},{"content":"node.addNode( digit, rowOffset );return null;}return node.addRoot(digit);}node = node.addNode(digit);if(node.isEmpty()){","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Index.java|(12331,909,<344,1>,<375,2>)","rawLines":"/**\r\n\t * The key has a binary sort order. This means the most significant byte is in the high byte.\r\n\t * @param digitCount The count of 16Bit digits.\r\n\t */\r\n\tfinal private IndexNode add(IndexNode node, long rowOffset, long key, boolean isLastValue, int digitCount) throws SQLException{\r\n\t\tfor(int i=digitCount-1; i>=0; i--){\r\n\t\t\tchar digit = (char)(key >> (i<<4));\r\n\t\t\tif(i == 0){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.addNode( digit, rowOffset );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot(digit);\r\n\t\t\t}\r\n\t\t\tnode = node.addNode(digit);\r\n\t\t\tif(node.isEmpty()){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRootValue( key, i);\r\n\t\t\t}else\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.saveValue( rowOffset);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot();\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\tthrow new Error();\r\n\t}","startLine":9,"lastLine":15},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Index.java|(13781,865,<400,1>,<433,2>)","rawLines":"/**\r\n\t * Add a byte array to the Index.\r\n\t */\r\n\tfinal private IndexNode add(IndexNode node, long rowOffset, char[] key, boolean isLast) throws SQLException{\r\n\t\tint length = key.length;\r\n\t\tint i=-1;\r\n\t\twhile(true){\r\n\t\t\t// the first digit include 0-null; 1-empty; 2 another value\r\n\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\r\n\t\t\t\t\t\t\t  : (key[i]);\r\n\t\t\tif(++i == length){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.addNode( digit, rowOffset );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot(digit);\r\n\t\t\t}\r\n\t\t\tnode = node.addNode(digit);\r\n\t\t\tif(node.isEmpty()){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRootValue( key, i );\r\n\t\t\t}else\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.saveValue(rowOffset);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot();\r\n\t\t\t}\r\n\t\t}\r\n\t}","startLine":12,"lastLine":18}],"size":7},{"content":"if(obj == null) return 0;switch(dataType){case SQLTokenizer.BIT:return (obj.equals(Boolean.TRUE)) ? 1 : 0;case SQLTokenizer.INT:case SQLTokenizer.BIGINT:case SQLTokenizer.DOUBLE:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionValue.java|(17211,686,<517,1>,<534,5>)","rawLines":"static double getDouble(Object obj, int dataType) throws Exception{\r\n        if(obj == null) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n                return (obj.equals(Boolean.TRUE)) ? 1 : 0;\r\n            case SQLTokenizer.INT:\r\n            case SQLTokenizer.BIGINT:\r\n            case SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n                return ((Number)obj).doubleValue();\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn ((DateTime)obj).getTimeMillis();\r\n            default: return Double.parseDouble( obj.toString() );\r\n        }\r\n    }","startLine":1,"lastLine":7},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionValue.java|(16362,747,<492,1>,<511,5>)","rawLines":"static float getFloat(Object obj, int dataType) throws Exception{\r\n        if(obj == null) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n                return (obj.equals(Boolean.TRUE)) ? 1 : 0;\r\n            case SQLTokenizer.INT:\r\n            case SQLTokenizer.BIGINT:\r\n            case SQLTokenizer.DOUBLE:\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.REAL:\r\n            case SQLTokenizer.MONEY:\r\n                return ((Number)obj).floatValue();\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn ((DateTime)obj).getTimeMillis();\r\n            default: return Float.parseFloat( obj.toString() );\r\n        }\r\n    }","startLine":1,"lastLine":7}],"size":7},{"content":"private static TestValue a(String dataType, Object small, Object large){TestValue value = new TestValue();value.dataType  = dataType;value.small     = small;value.large     = large;return value;}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestJoins.java|(10437,251,<204,4>,<210,5>)","rawLines":"private static TestValue a(String dataType, Object small, Object large){\r\n        TestValue value = new TestValue();\r\n        value.dataType  = dataType;\r\n        value.small     = small;\r\n        value.large     = large;\r\n        return value;\r\n    }","startLine":0,"lastLine":6},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(11745,251,<267,4>,<273,5>)","rawLines":"private static TestValue a(String dataType, Object small, Object large){\r\n        TestValue value = new TestValue();\r\n        value.dataType  = dataType;\r\n        value.small     = small;\r\n        value.large     = large;\r\n        return value;\r\n    }","startLine":0,"lastLine":6}],"size":7},{"content":"StringBuffer buf = new StringBuffer(bytes.length << 1);for(int i=0; i<bytes.length; i++){buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );buf.append( digits[ (bytes[i]     ) & 0x0F ] );}return buf.toString();}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(3529,284,<102,1>,<109,2>)","rawLines":"private static String bytes2hex( byte[] bytes ){\r\n\t\tStringBuffer buf = new StringBuffer(bytes.length << 1);\r\n\t\tfor(int i=0; i<bytes.length; i++){\r\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n\t\t}\r\n\t\treturn buf.toString();\r\n\t}","startLine":1,"lastLine":7},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Utils.java|(6330,321,<205,4>,<212,5>)","rawLines":"static String bytes2hex( byte[] bytes ){\r\n        StringBuffer buf = new StringBuffer(bytes.length << 1);\r\n        for(int i=0; i<bytes.length; i++){\r\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n        }\r\n        return buf.toString();\r\n    }","startLine":1,"lastLine":7}],"size":7},{"content":"}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}con.setAutoCommit(true);}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(8094,1998,<244,1>,<287,2>)","rawLines":"/**\r\n     * Insert a row and update the inserted row in the same transaction. Then make a partial rollback. Test the correct\r\n     * status after of the table after every change of the database.\r\n     * \r\n     * @throws Exception\r\n     *             if an error occur\r\n     */\r\n\tpublic void testInsertAndUpdate() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions ( v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\") );\r\n\t\t\tassertEqualsRsValue(\"qwert\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\t\t\t\r\n\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );\r\n\t\t\tassertEqualsRsValue(\"qwert1\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\t\t\t\r\n            assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );\r\n            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n            \r\n\t\t\tSavepoint savepoint = con.setSavepoint();\r\n\t\t\t\r\n\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );\r\n\t\t\tassertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n\t\t\tcon.rollback( savepoint );\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertEqualsRsValue(\"qwert2\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":37,"lastLine":43},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(4602,975,<138,1>,<163,2>)","rawLines":"public void testRollback() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t    con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.rollback();\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":19,"lastLine":25},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(2568,963,<79,1>,<104,2>)","rawLines":"public void testCommit() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions Select * From transactions\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":19,"lastLine":25},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(3539,1055,<107,1>,<135,2>)","rawLines":"/**\r\n\t * In the table there is already one row that is committed.\r\n\t */\r\n\tpublic void testCommitWithOneCommitRow() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions (Select * From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":22,"lastLine":28},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(12649,1193,<339,1>,<371,2>)","rawLines":"/**\r\n     * If there was insert a row within the ResultSet that not map WHERE than you scroll to this row. If there an Insert\r\n     * outsite the ResultSet that not map the WHERE then you can't scroll this row.\r\n     * \r\n     * @throws Exception\r\n     */\r\n\tpublic void testInsertRow_withWrongWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\r\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\r\n\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where 1=0\");\r\n\t\t\t\r\n\t\t\trs.moveToInsertRow();\r\n\t\t\trs.updateString(\"v\", \"qwert2\");\r\n\t\t\trs.insertRow();\r\n\t\t\t\r\n\t\t\trs.beforeFirst();\r\n\t\t\tassertTrue( rs.next() );\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":26,"lastLine":32},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(5584,1061,<166,1>,<194,2>)","rawLines":"/**\r\n\t * In the table there is already one row that is commited.\r\n\t */\r\n\tpublic void testRollbackWithOneCommitRow() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.rollback();\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":22,"lastLine":28}],"size":7},{"content":"}catch(Throwable e){con.rollback(savepoint);throw SmallSQLException.createFromException(e);}finally{if(con.getAutoCommit()) con.commit();}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/CommandSelect.java|(15509,518,<486,1>,<500,2>)","rawLines":"final void deleteRow(SSConnection con) throws SQLException{\r\n\t\tint savepoint = con.getSavepoint();\r\n\t\ttry{\r\n\t\t\tif(tables.size() > 1)\r\n\t\t\t\tthrow SmallSQLException.create(Language.JOIN_DELETE);\r\n\t\t\tif(tables.size() == 0)\r\n\t\t\t\tthrow SmallSQLException.create(Language.DELETE_WO_FROM);\r\n\t\t\tTableViewResult.getTableViewResult( tables.get(0) ).deleteRow();\r\n\t\t}catch(Throwable e){\r\n\t\t\tcon.rollback(savepoint);\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}finally{\r\n\t\t\tif(con.getAutoCommit()) con.commit();\r\n\t\t}\r\n\t}","startLine":8,"lastLine":14},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Command.java|(3963,383,<134,4>,<144,5>)","rawLines":"final void execute(SSConnection con, SSStatement st) throws SQLException{\r\n    \tint savepoint = con.getSavepoint();\r\n        try{\r\n            executeImpl( con, st );\r\n        }catch(Throwable e){\r\n            con.rollback(savepoint);\r\n            throw SmallSQLException.createFromException(e);\r\n        }finally{\r\n            if(con.getAutoCommit()) con.commit();\r\n        }\r\n    }","startLine":4,"lastLine":10},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/CommandSelect.java|(12464,1478,<403,1>,<442,2>)","rawLines":"final void updateRow(SSConnection con, Expression[] newRowSources) throws SQLException{\r\n\t\tint savepoint = con.getSavepoint();\r\n\t\ttry{\r\n\t\t\t//loop through all tables of this ResultSet \r\n\t\t\tfor(int t=0; t<tables.size(); t++){\r\n\t\t\t\tTableViewResult result = TableViewResult.getTableViewResult( tables.get(t) );\r\n\t\t\t\tTableView table = result.getTableView();\r\n\t\t\t\tColumns tableColumns = table.columns;\r\n\t\t\t\tint count = tableColumns.size();\r\n\t\t\t\t\r\n\t\t\t\t// order the new Values after it position in the table\r\n\t\t\t\tExpression[] updateValues = new Expression[count];\r\n\t\t\t\tboolean isUpdateNeeded = false;\r\n\t\t\t\tfor(int i=0; i<columnExpressions.size(); i++){\r\n\t\t\t\t\tExpression src = newRowSources[i];\r\n\t\t\t\t\tif(src != null && (!(src instanceof ExpressionValue) || !((ExpressionValue)src).isEmpty())){\t\r\n\t\t\t\t\t\tExpression col = columnExpressions.get(i);\r\n\t\t\t\t\t\tif(!col.isDefinitelyWritable())\r\n\t\t\t\t\t\t\tthrow SmallSQLException.create(Language.COL_READONLY, new Integer(i));\r\n\t\t\t\t\t\tExpressionName exp = (ExpressionName)col;\r\n\t\t\t\t\t\tif(table == exp.getTable()){\r\n\t\t\t\t\t\t\tupdateValues[exp.getColumnIndex()] = src;\r\n\t\t\t\t\t\t\tisUpdateNeeded = true;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// save the new values if there are new value for this table\r\n\t\t\t\tif(isUpdateNeeded){\r\n\t\t\t\t\tresult.updateRow(updateValues);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}catch(Throwable e){\r\n\t\t\tcon.rollback(savepoint);\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}finally{\r\n\t\t\tif(con.getAutoCommit()) con.commit();\r\n\t\t}\r\n\t}","startLine":33,"lastLine":39},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/CommandSelect.java|(13948,1555,<444,1>,<484,2>)","rawLines":"final void insertRow(SSConnection con, Expression[] newRowSources) throws SQLException{\r\n\t\tif(tables.size() > 1)\r\n\t\t\tthrow SmallSQLException.create(Language.JOIN_INSERT);\r\n\t\tif(tables.size() == 0)\r\n\t\t\tthrow SmallSQLException.create(Language.INSERT_WO_FROM);\r\n\t\t\r\n\t\tint savepoint = con.getSavepoint();\r\n\t\ttry{\r\n\t\t\tTableViewResult result = TableViewResult.getTableViewResult( tables.get(0) );\r\n\t\t\tTableView table = result.getTableView();\r\n\t\t\tColumns tabColumns = table.columns;\r\n\t\t\tint count = tabColumns.size();\r\n\t\t\t\t\t\r\n\t\t\t// order the new Values after it position in the table\r\n\t\t\tExpression[] updateValues = new Expression[count];\r\n\t\t\tif(newRowSources != null){\r\n\t\t\t\tfor(int i=0; i<columnExpressions.size(); i++){\r\n\t\t\t\t\tExpression src = newRowSources[i];\r\n\t\t\t\t\tif(src != null && (!(src instanceof ExpressionValue) || !((ExpressionValue)src).isEmpty())){\t\r\n\t\t\t\t\t\tExpression rsColumn = columnExpressions.get(i); // Column of the ResultSet\r\n\t\t\t\t\t\tif(!rsColumn.isDefinitelyWritable())\r\n\t\t\t\t\t\t\tthrow SmallSQLException.create(Language.COL_READONLY, new Integer(i));\r\n\t\t\t\t\t\tExpressionName exp = (ExpressionName)rsColumn;\r\n\t\t\t\t\t\tif(table == exp.getTable()){\r\n\t\t\t\t\t\t\tupdateValues[exp.getColumnIndex()] = src;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tupdateValues[i] = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t// save the new values if there are new value for this table\r\n\t\t\tresult.insertRow(updateValues);\r\n\t\t}catch(Throwable e){\r\n\t\t\tcon.rollback(savepoint);\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}finally{\r\n\t\t\tif(con.getAutoCommit()) con.commit();\r\n\t\t}\r\n\t}","startLine":34,"lastLine":40}],"size":7},{"content":"for(int t=0; t<tables.size(); t++){String tableName = tables.get(t);TableView tab = getTableView( con, tableName);if(!(tab instanceof Table)) continue;IndexDescriptions indexes = ((Table)tab).indexes;for(int i=0; i<indexes.size(); i++){IndexDescription index = indexes.get(i);","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(17286,1016,<480,1>,<508,2>)","rawLines":"Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = getTables(table);\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tIndexDescription index = indexes.get(i);\r\n\t\t\t\tif(index.isPrimary()){\r\n\t\t\t\t\tStrings columns = index.getColumns();\r\n\t\t\t\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\t\t\t\tObject[] row = new Object[6];\r\n\t\t\t\t\t\trow[0] = getName(); \t\t\t//TABLE_CAT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//TABLE_SCHEM\r\n\t\t\t\t\t\trow[2] = tableName;\t\t\t\t//TABLE_NAME\r\n\t\t\t\t\t\trow[3] = columns.get(c);\t\t//COLUMN_NAME\r\n\t\t\t\t\t\trow[4] = Utils.getShort(c+1);\t//KEY_SEQ\r\n\t\t\t\t\t\trow[5] = index.getName();\t\t//PK_NAME\r\n\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\t\t\r\n\t}","startLine":3,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(18311,1306,<511,1>,<545,2>)","rawLines":"Object[][] getIndexInfo( SSConnection con, String table, boolean unique) throws SQLException {\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = getTables(table);\r\n\t\tShort type = Utils.getShort( DatabaseMetaData.tableIndexOther );\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tIndexDescription index = indexes.get(i);\r\n\t\t\t\tStrings columns = index.getColumns();\r\n\t\t\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\t\t\tObject[] row = new Object[13];\r\n\t\t\t\t\trow[0] = getName(); \t\t\t//TABLE_CAT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//TABLE_SCHEM\r\n\t\t\t\t\trow[2] = tableName;\t\t\t\t//TABLE_NAME\r\n\t\t\t\t\trow[3] = Boolean.valueOf(!index.isUnique());//NON_UNIQUE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//INDEX_QUALIFIER\r\n\t\t\t\t\trow[5] = index.getName();\t\t//INDEX_NAME\r\n\t\t\t\t\trow[6] = type;\t\t\t\t\t//TYPE\r\n\t\t\t\t\trow[7] = Utils.getShort(c+1);\t//ORDINAL_POSITION\r\n\t\t\t\t\trow[8] = columns.get(c);\t\t//COLUMN_NAME\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//ASC_OR_DESC\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//CARDINALITY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//PAGES\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//FILTER_CONDITION\r\n\t\t\t\t\trows.add(row);\r\n\t\t\t\t}\r\n\t\t\t}\r\n    \t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\r\n\t}","startLine":4,"lastLine":10},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(15879,1399,<444,1>,<477,2>)","rawLines":"Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = getTables(table);\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tIndexDescription index = indexes.get(i);\r\n\t\t\t\tif(index.isUnique()){\r\n\t\t\t\t\tStrings columns = index.getColumns();\r\n\t\t\t\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\t\t\t\tString columnName = columns.get(c);\r\n\t\t\t\t\t\tColumn column = tab.findColumn(columnName);\r\n\t\t\t\t\t\tObject[] row = new Object[8];\r\n\t\t\t\t\t\trow[0] = Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE\r\n\t\t\t\t\t\trow[1] = columnName;\t\t\t//COLUMN_NAME\r\n\t\t\t\t\t\tfinal int dataType = column.getDataType();\r\n\t\t\t\t\t\trow[2] = Utils.getInteger(dataType);//DATA_TYPE\r\n\t\t\t\t\t\trow[3] = SQLTokenizer.getKeyWord(dataType);//TYPE_NAME\r\n\t\t\t\t\t\trow[4] = Utils.getInteger(column.getPrecision());\t//COLUMN_SIZE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//BUFFER_LENGTH\r\n\t\t\t\t\t\trow[6] = Utils.getShort(column.getScale());\t\t//DECIMAL_DIGITS\r\n\t\t\t\t\t\trow[7] = Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN\r\n\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\t\t\r\n\t}","startLine":3,"lastLine":9}],"size":7},{"content":"wasNull = obj == null;if(wasNull) return null;return obj.toBigDecimal(scale);}catch(Exception e){throw SmallSQLException.createFromException( e );}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5229,375,<144,4>,<153,5>)","rawLines":"public BigDecimal getBigDecimal(int i, int scale) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":3,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSResultSet.java|(5079,395,<149,4>,<158,5>)","rawLines":"public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":3,"lastLine":9}],"size":7},{"content":"}firstNode = false;if(shift != 0) offset += pointerSize;}shift -= 16;}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/LongTreeList.java|(7219,1623,<254,1>,<314,2>)","rawLines":"/**\r\n\t * Remove a value from this list.\r\n\t * @param value\r\n\t * @throws SQLException\r\n\t */\r\n\tfinal void remove(long value) throws SQLException{\r\n\t\tif(size == 0) return;\r\n\t\tint offset1 = 0;\r\n\t\tint offset2 = 0;\r\n\t\tint offset3 = 0;\r\n\t\toffset = 0;\r\n\t\tint shift = 48;\r\n\t\tboolean firstNode = true; // if this the first node in this tree level (0 can be the first node and are the end of the level)\r\n\t\tboolean firstNode1 = true;\r\n\t\tboolean firstNode2 = true;\r\n\t\tboolean firstNode3 = true;\r\n\t\twhile(shift>=0){\r\n\t\t\tint octet = (int)(value >> shift) & 0xFFFF;\r\n\t\t\twhile(true){\r\n\t\t\t\tint nextEntry = getUnsignedShort();\r\n\t\t\t\tif(nextEntry == octet){\r\n\t\t\t\t\tif(shift == 0){\r\n\t\t\t\t\t\t//value find\r\n\t\t\t\t\t\toffset -= 2;\r\n\t\t\t\t\t\tremoveNodeLastLevel();\r\n\t\t\t\t\t\twhile(firstNode && getUnsignedShort() == 0){\r\n\t\t\t\t\t\t\toffset -= 2;\r\n\t\t\t\t\t\t\tremoveNodeLastLevel(); // the end 0 of a node\r\n\t\t\t\t\t\t\tif(shift >= 3) \r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\toffset = offset1;\r\n\t\t\t\t\t\t\toffset1 = offset2;\r\n\t\t\t\t\t\t\toffset2 = offset3;\r\n\t\t\t\t\t\t\tfirstNode = firstNode1;\r\n\t\t\t\t\t\t\tfirstNode1 = firstNode2;\r\n\t\t\t\t\t\t\tfirstNode2 = firstNode3;\r\n\t\t\t\t\t\t\tremoveNode();\r\n\t\t\t\t\t\t\tshift++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\toffset3 = offset2;\r\n\t\t\t\t\toffset2 = offset1;\r\n\t\t\t\t\toffset1 = offset -2;\r\n\t\t\t\t\toffset = getPointer();\r\n\t\t\t\t\tfirstNode3 = firstNode2;\r\n\t\t\t\t\tfirstNode2 = firstNode1;\r\n\t\t\t\t\tfirstNode1 = firstNode;\r\n\t\t\t\t\tfirstNode = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif((nextEntry == 0 && !firstNode) || nextEntry > octet){\r\n\t\t\t\t\t//value is not in the list, this should not occur\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tfirstNode = false;\r\n\t\t\t\tif(shift != 0) offset += pointerSize;\r\n\t\t\t}\r\n\t\t\tshift -= 16;\r\n\t\t}\r\n\t}","startLine":54,"lastLine":60},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/LongTreeList.java|(5765,1445,<199,1>,<251,2>)","rawLines":"/**\r\n\t * Add a value to this list.\r\n\t * @param value\r\n\t * @throws SQLException\r\n\t */\r\n\tfinal void add(long value) throws SQLException{\r\n\t\toffset = 0;\r\n\t\tif(size == 0){\r\n\t\t\twriteShort( (int)(value >> 48) );\r\n\t\t\twritePointer ( offset+pointerSize+2 );\r\n\t\t\twriteShort( 0 );\r\n\t\t\twriteShort( (int)(value >> 32) );\r\n\t\t\twritePointer ( offset+pointerSize+2 );\r\n\t\t\twriteShort( 0 );\r\n\t\t\twriteShort( (int)(value >> 16) );\r\n\t\t\twritePointer ( offset+pointerSize+2 );\r\n\t\t\twriteShort( 0 );\r\n\t\t\twriteShort( (int)(value) );\r\n\t\t\twriteShort( 0 );\r\n\t\t\tsize = offset;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint shift = 48;\r\n\t\tboolean firstNode = (size > 2); // if this the first node in this tree level (0 can be the first node and are the end of the level)\r\n\t\twhile(shift>=0){\r\n\t\t\tint octet = (int)(value >> shift) & 0xFFFF;\r\n\t\t\twhile(true){\r\n\t\t\t\tint nextEntry = getUnsignedShort();\r\n\t\t\t\tif(nextEntry == octet){\r\n\t\t\t\t\tif(shift == 0) return; //value exist already, this case should not occur\r\n\t\t\t\t\toffset = getPointer();\r\n\t\t\t\t\tfirstNode = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif((nextEntry == 0 && !firstNode) || nextEntry > octet){\r\n\t\t\t\t\toffset -= 2;\r\n\t\t\t\t\twhile(true){\r\n\t\t\t\t\t\tif(shift != 0){\r\n\t\t\t\t\t\t\toffset = insertNode(octet);\t\t\t\t\t\t\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tinsertNodeLastLevel(octet);\t\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tshift -= 16;\r\n\t\t\t\t\t\toctet = (int)(value >> shift) & 0xFFFF;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfirstNode = false;\r\n\t\t\t\tif(shift != 0) offset += pointerSize;\r\n\t\t\t}\r\n\t\t\tshift -= 16;\r\n\t\t}\r\n\t}","startLine":46,"lastLine":52}],"size":7},{"content":"if(!previous()){return false;}}}return true;}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SortedResult.java|(6541,431,<236,4>,<252,5>)","rawLines":"boolean relative(int rows) throws Exception{\r\n        if(rows == 0) return (row != 0);\r\n        if(rows > 0){\r\n            while(rows-- > 0){\r\n                if(!next()){\r\n                    return false;\r\n                }\r\n            }\r\n        }else{\r\n            while(rows++ < 0){\r\n                if(!previous()){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }","startLine":10,"lastLine":16},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SortedResult.java|(5990,533,<215,4>,<233,5>)","rawLines":"boolean absolute(int newRow) throws Exception{\r\n        if(newRow == 0) throw SmallSQLException.create(Language.ROW_0_ABSOLUTE);\r\n        if(newRow > 0){\r\n            beforeFirst();\r\n            while(newRow-- > 0){\r\n                if(!next()){\r\n                    return false;\r\n                }\r\n            }\r\n        }else{\r\n            afterLast();\r\n            while(newRow++ < 0){\r\n                if(!previous()){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }","startLine":12,"lastLine":18}],"size":7},{"content":"}catch(Exception e){System.out.println(\"  Failed:\"+e);}finally{System.out.println();System.out.println(\"===================================================================\");}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(24166,1718,<563,4>,<606,5>)","rawLines":"/**\r\n      *  11. Test\r\n      *  Scroll and call the getXXX methods for every columns.\r\n      */  \r\n    static void test_Scroll_getXXX(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test scroll and call the getXXX methods for every columns: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement();\r\n            long time = -System.currentTimeMillis();\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n            for (int i=0; i<rowCount; i++){\r\n                    rs.next();\r\n\t                rs.getInt   (  1 );\r\n\t                rs.getBytes (  2 );\r\n\t                rs.getString(  3 );\r\n\t                rs.getDate  (  4 );\r\n\t                rs.getFloat (  5 );\r\n\t                rs.getFloat (  6 );\r\n\t                rs.getBytes (  7 );\r\n\t                rs.getInt   (  8 );\r\n\t                rs.getDouble(  9 );\r\n\t                rs.getDouble(  10 );\r\n\t                rs.getFloat (  11 );\r\n\t                rs.getTime  (  12 );\r\n\t                rs.getShort (  13 );\r\n\t                rs.getFloat (  14 );\r\n\t                rs.getString(  15 );\r\n\t                rs.getString(  16 );\r\n\t                rs.getByte  (  17 );\r\n\t                rs.getBytes (  18 );\r\n\t                rs.getString(  19 );\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":37,"lastLine":43},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(16533,2185,<404,4>,<449,5>)","rawLines":"/**\r\n      *  8. Test\r\n      *  Update rows with a PreparedStatement.\r\n      */  \r\n    static void test_UpdateRowsPrepare(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with a PreparedStatement: \" + rowCount + \" rows\");\r\n        try{\r\n            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n\t            pr.setBytes (  1, byteArray );\r\n\t            pr.setString(  2 , \"Test\" );\r\n\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t            pr.setFloat (  4, (float)1234.56789 );\r\n\t            pr.setFloat (  5 , (float)9876.54321 );\r\n\t            pr.setBytes (  6, largeByteArray );\r\n\t            pr.setInt   (  7 , i );\r\n\t            pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );\r\n\t            pr.setInt   (  19 , i );\r\n                int updateCount = pr.executeUpdate();\r\n                if (updateCount != 1){\r\n                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":39,"lastLine":45},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(25903,1379,<609,4>,<641,5>)","rawLines":"/**\r\n      *  12. Test\r\n      *  Update large binary data.\r\n      */  \r\n    static void test_UpdateLargeBinary(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update large binary data: \" + rowCount + \"KB bytes\");\r\n        \r\n        try{\r\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\r\n            byte bytes[] = new byte[1024];\r\n            for(int i=0; i<rowCount; i++){\r\n                fos.write(bytes);\r\n            }\r\n            fos.close();\r\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\r\n            long time = -System.currentTimeMillis();\r\n            PreparedStatement pr = con.prepareStatement(\"Update \" + tableName + \" set im=? WHERE pr=1\");\r\n            pr.setBinaryStream( 1, fis, rowCount*1024 );\r\n            pr.execute();\r\n            pr.close();\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            fis.close();\r\n            java.io.File file = new java.io.File(tableName+\".bin\");\r\n            file.delete();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":26,"lastLine":32},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(7700,2106,<194,4>,<243,5>)","rawLines":"/**\r\n      *  4. Test\r\n      *  Delete rows with the method deleteRow().\r\n      */  \r\n    static void test_DeleteRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test delete rows with deleteRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.next();\r\n                rs.deleteRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            count = rs.getInt(1);\r\n            if (count != 0)\r\n                 System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":43,"lastLine":49},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(12551,2566,<307,4>,<364,5>)","rawLines":"/**\r\n      *  6. Test\r\n      *  Request one page of rows from a large ResultSet.\r\n      */  \r\n    static void test_RowRequestPages(Connection con){\r\n        int pages = 100; \r\n        int rows  = rowCount / pages;\r\n        System.out.println();\r\n        System.out.println( \"Test request row pages : \" + pages + \" pages, \" +rows + \" rows per page\");\r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\r\n            st.setFetchSize( rows );\r\n            for (int i=0; i<pages; i++){\r\n                rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n                rs.absolute( i*rows+1 );\r\n                for (int r=1; r<rows; r++){\r\n                    // only (rows-1) rows because absolute has already the first row\r\n                    if (!rs.next()){\r\n                        System.out.println( \"  Failed: No rows were found at page \" + i + \" page and row \" + r);\r\n                        return;\r\n                    }\r\n                    int col_i = rs.getInt(\"i\");\r\n                    if (col_i != (i*rows+r)){\r\n                        System.out.println( \"  Failed: Wrong row \" + col_i + \", it should be row \" + (i*rows+r));\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":51,"lastLine":57},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(5466,817,<135,4>,<156,5>)","rawLines":"/**\r\n      *  2. Test\r\n      *  Delete all rows with a single statement.\r\n      */  \r\n    static void test_DeleteAll(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test delete all rows: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"DELETE FROM \" + tableName);\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":15,"lastLine":21},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(6307,1369,<160,4>,<190,5>)","rawLines":"/**\r\n      *  3. Test\r\n      *  Insert only empty rows with the default values of the row with the method insertRow().\r\n      */  \r\n    static void test_InsertEmptyRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert empty rows with insertRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.moveToInsertRow();\r\n                rs.insertRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":24,"lastLine":30},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(21582,2559,<508,4>,<559,5>)","rawLines":"/**\r\n      *  10. Test\r\n      *  Update rows with a PreparedStatement and Batch.\r\n      */  \r\n    static void test_UpdateRowsPrepareBatch(Connection con){\r\n        int batchSize = 10;\r\n        int batches = rowCount / batchSize;\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with PreparedStatement and Batches: \" + batches + \" batches, \" + batchSize + \" batch size\");\r\n        \r\n        try{\r\n            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<batches; i++){\r\n                for (int r=0; r<batchSize; r++){\r\n\t                pr.setBytes (  1, byteArray );\r\n\t                pr.setString(  2 , \"Test\" );\r\n\t                pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t                pr.setFloat (  4, (float)1234.56789 );\r\n\t                pr.setFloat (  5 , (float)9876.54321 );\r\n\t                pr.setBytes (  6, largeByteArray );\r\n\t                pr.setInt   (  7 , i*batchSize + r );\r\n\t                pr.setDouble(  8 , 23.45 );\r\n\t                pr.setDouble(  9 , 567.45 );\r\n\t                pr.setFloat (  10 , (float)78.89 );\r\n\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t                pr.setShort (  12, (short)23456 );\r\n\t                pr.setFloat (  13, (float)34.56 );\r\n\t                pr.setString(  14, \"sysname (30) NULL\" );\r\n\t                pr.setString(  15 , \"text NULL\" );\r\n\t                pr.setByte  (  16, (byte)28 );\r\n\t                pr.setBytes (  17, byteArray );\r\n\t                pr.setString(  18, \"varchar (255) NULL\" );\r\n\t                pr.setInt   (  19 , i );\r\n\t                pr.addBatch();\r\n\t            }\r\n                int[] updateCount = pr.executeBatch();\r\n                if (updateCount.length != batchSize){\r\n                    System.out.println( \"  Failed: Update count size should be \" + batchSize + \" but it is \" + updateCount.length + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":45,"lastLine":51},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(27309,1649,<646,4>,<682,5>)","rawLines":"/**\r\n      *  12. Test\r\n      *  Update large binary data with a SP.\r\n      */  \r\n    static void test_UpdateLargeBinaryWithSP(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update large binary data with a SP: \" + rowCount + \"KB bytes\");\r\n        \r\n        try{\r\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\r\n            byte bytes[] = new byte[1024];\r\n            for(int i=0; i<rowCount; i++){\r\n                fos.write(bytes);\r\n            }\r\n            fos.close();\r\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"CREATE PROCEDURE #UpdateLargeBinary(@im image) as Update \" + tableName + \" set im=@im WHERE pr=2\");\r\n            PreparedStatement pr = con.prepareStatement(\"exec #UpdateLargeBinary ?\");\r\n            pr.setBinaryStream( 1, fis, rowCount*1024 );\r\n            pr.execute();\r\n            st.execute(\"DROP PROCEDURE #UpdateLargeBinary\");\r\n            st.close();\r\n            pr.close();\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            fis.close();\r\n            java.io.File file = new java.io.File(tableName+\".bin\");\r\n            file.delete();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":30,"lastLine":36},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(4122,1320,<103,4>,<131,5>)","rawLines":"/**\r\n      *  1. Test\r\n      *  Insert rows with default values with a classic insert statement.\r\n      */  \r\n    static void test_InsertClassic(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert rows with default values with a classic insert statement: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                st.execute(\"INSERT INTO \" + tableName + \"(i) VALUES(\" + i +\")\");\r\n            }\r\n            time += System.currentTimeMillis();\r\n            ResultSet rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":22,"lastLine":28}],"size":7},{"content":"wasNull = expr.isNull();if(wasNull) return null;return DateTime.getTimestamp( expr.getLong() );}catch(Exception e){throw SmallSQLException.createFromException( e );}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSResultSet.java|(6501,357,<190,4>,<199,5>)","rawLines":"public Timestamp getTimestamp(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":3,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6559,364,<183,4>,<192,5>)","rawLines":"public Timestamp getTimestamp(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":3,"lastLine":9}],"size":7},{"content":"try{rs.getString(\"v\");fail(\"SQLException 'No current row' should be throw\");}catch(SQLException ex){assertSQLException(\"01000\", 0, ex);}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestScrollable.java|(5406,531,<129,4>,<141,5>)","rawLines":"private void testFirstWithWhereAssert(ResultSet rs) throws Exception{\r\n        assertFalse( \"isFirst\", rs.isFirst() );\r\n        assertTrue( rs.isBeforeFirst() );\r\n        assertFalse( \"There should be no rows:\", rs.first());\r\n        assertFalse( \"isFirst\", rs.isFirst() );\r\n        assertTrue( rs.isBeforeFirst() );\r\n        try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }\r\n    }","startLine":6,"lastLine":12},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestScrollable.java|(7154,502,<167,4>,<179,5>)","rawLines":"private void testPreviousWithWhereAssert(ResultSet rs) throws Exception{\r\n        assertTrue( rs.isBeforeFirst() );\r\n        assertTrue( rs.isAfterLast() );\r\n        rs.afterLast();\r\n        assertTrue( rs.isAfterLast() );\r\n        assertFalse(\"There should be no rows:\", rs.previous());\r\n        try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }\r\n    }","startLine":6,"lastLine":12}],"size":7},{"content":"case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return readNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(48523,2915,<1270,4>,<1333,5>)","rawLines":"/**\r\n     * It used for ResultSet.getObject()\r\n     */\r\n    @Override\r\n    Object getObject(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return null;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return readBinary();\r\n            case SQLTokenizer.TINYINT:\r\n                    return Utils.getInteger( readUnsignedByte() );\r\n            case SQLTokenizer.SMALLINT:\r\n                    return Utils.getInteger( readShort() );\r\n            case SQLTokenizer.INT:\r\n                    return Utils.getInteger(readInt());\r\n            case SQLTokenizer.BIGINT:\r\n                    return new Long(readLong());\r\n            case SQLTokenizer.REAL:\r\n                    return new Float( readFloat() );\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return new Double( readDouble() );\r\n            case SQLTokenizer.MONEY:\r\n                    return Money.createFromUnscaledValue(readLong());\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return Money.createFromUnscaledValue(readInt());\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return readString();\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return readLongString();\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return ois.readObject();\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return readLongBinary();\r\n            case SQLTokenizer.TIMESTAMP:\r\n                    return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP );\r\n            case SQLTokenizer.TIME:\r\n                    return new DateTime( readTime(), SQLTokenizer.TIME );\r\n            case SQLTokenizer.DATE:\r\n                    return new DateTime( readDate(), SQLTokenizer.DATE );\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP );\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    return Utils.bytes2unique( page, this.offset);\r\n            default: throw new Error();\r\n        }\r\n    }","startLine":31,"lastLine":37},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(45600,2913,<1208,4>,<1267,5>)","rawLines":"/**\r\n     * It used for ResultSet.getBigDecimal()\r\n     */\r\n    @Override\r\n    MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return null;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? new MutableNumeric(1) : new MutableNumeric(0);\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return new MutableNumeric(Utils.bytes2double( readBinary() ));\r\n            case SQLTokenizer.TINYINT:\r\n                    return new MutableNumeric(readUnsignedByte());\r\n            case SQLTokenizer.SMALLINT:\r\n                    return new MutableNumeric(readShort());\r\n            case SQLTokenizer.INT:\r\n                    return new MutableNumeric(readInt());\r\n            case SQLTokenizer.BIGINT:\r\n                    return new MutableNumeric(readLong());\r\n            case SQLTokenizer.REAL:\r\n                    return new MutableNumeric(readFloat());\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return new MutableNumeric(readDouble());\r\n            case SQLTokenizer.MONEY:\r\n                    return new MutableNumeric( readLong(), 4);\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return new MutableNumeric( readInt(), 4);\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return new MutableNumeric( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return new MutableNumeric( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return new MutableNumeric( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return new MutableNumeric( Utils.bytes2double( readLongBinary() ) );\r\n            case SQLTokenizer.TIMESTAMP:\r\n            case SQLTokenizer.TIME:\r\n            case SQLTokenizer.DATE:\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });\r\n            // SAVER: check if this should be a kind of \"type not recognized\" exception.\r\n            default: throw new Error();\r\n        }\r\n    }","startLine":31,"lastLine":37}],"size":7},{"content":"public void run(){try{assertRowCount(rowCount, sql);}catch(Throwable ex){throwable = ex;}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestThreads.java|(1191,226,<46,16>,<52,17>)","rawLines":"public void run(){\r\n                    try{\r\n                        assertRowCount(rowCount, sql);\r\n                    }catch(Throwable ex){\r\n                        throwable = ex;\r\n                    }\r\n                }","startLine":0,"lastLine":6},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestThreads.java|(279,1561,<19,4>,<69,5>)","rawLines":"/**\r\n     * Test the concurrently read of a table\r\n     * \r\n     * @throws Throwable\r\n     *             if an thread problem occur\r\n     */\r\n    public void testConcurrentRead() throws Throwable{\r\n        ArrayList threadList = new ArrayList();\r\n        throwable = null;\r\n\r\n        // Any table from another test that include rows.\r\n        final String sql = \"Select * From table_OrderBy1\";\r\n\r\n        // calculate the row count of this table\r\n        final Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        ResultSet rs = st.executeQuery(\"Select * From table_OrderBy1\");\r\n        int count = 0;\r\n        while(rs.next()){\r\n            count++;\r\n        }\r\n        final int rowCount = count;\r\n\r\n        // start threads that check the row count\r\n        for(int i = 0; i < 200; i++){\r\n            Thread thread = new Thread(new Runnable(){\r\n\r\n                public void run(){\r\n                    try{\r\n                        assertRowCount(rowCount, sql);\r\n                    }catch(Throwable ex){\r\n                        throwable = ex;\r\n                    }\r\n                }\r\n\r\n            });\r\n            threadList.add(thread);\r\n            thread.start();\r\n        }\r\n\r\n        // wait until all threads are finish\r\n        for(int i = 0; i < threadList.size(); i++){\r\n            Thread thread = (Thread)threadList.get(i);\r\n            thread.join(5000);\r\n        }\r\n\r\n        // throw the exception if one occur\r\n        if(throwable != null){\r\n            throw throwable;\r\n        }\r\n    }","startLine":27,"lastLine":33}],"size":7},{"content":"wasNull = obj == null;if(wasNull) return null;return obj.toBigDecimal();}catch(Exception e){throw SmallSQLException.createFromException( e );}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(7224,359,<202,4>,<211,5>)","rawLines":"public BigDecimal getBigDecimal(int i) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":3,"lastLine":9},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SSResultSet.java|(11116,379,<319,4>,<328,5>)","rawLines":"public BigDecimal getBigDecimal(int columnIndex) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","startLine":3,"lastLine":9}],"size":7},{"content":"assertFalse( rs.next() );}finally{try{con.createStatement().execute(\"Drop Table transactions\");}catch(Throwable e){e.printStackTrace();}}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(6652,1073,<197,1>,<228,2>)","rawLines":"private void testInsertRow_Last(Connection con, boolean callLastBefore) throws Exception{\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\r\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\r\n\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where 1=0\");\r\n\t\t\t\r\n\t\t\tif(callLastBefore) rs.last();\r\n\t\t\trs.moveToInsertRow();\r\n\t\t\trs.updateString(\"v\", \"qwert2\");\r\n\t\t\trs.insertRow();\r\n\t\t\t\r\n\t\t\trs.last();\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\t\t\tassertTrue( rs.previous() );\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\t\r\n\t\t\trs.beforeFirst();\r\n\t\t\tassertTrue( rs.next() );\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t}\r\n\t}","startLine":24,"lastLine":31},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(13853,995,<375,1>,<402,2>)","rawLines":"/**\r\n\t * A row that was inserted and committed with a valid WHERE expression should not count 2 times.\r\n\t */\r\n\tpublic void testInsertRow_withRightWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\r\n\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where v = 'qwert'\");\r\n\t\t\t\r\n\t\t\trs.moveToInsertRow();\r\n\t\t\trs.updateString(\"v\", \"qwert\");\r\n\t\t\trs.insertRow();\r\n\t\t\t\r\n\t\t\trs.beforeFirst();\r\n\t\t\tassertTrue( rs.next() );\r\n\t\t\tassertEquals(\"qwert\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t}\r\n\t}","startLine":21,"lastLine":27}],"size":7},{"content":"}}}Object[][] result = new Object[rows.size()][];rows.toArray(result);return result;}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(17286,1016,<480,1>,<508,2>)","rawLines":"Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = getTables(table);\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tIndexDescription index = indexes.get(i);\r\n\t\t\t\tif(index.isPrimary()){\r\n\t\t\t\t\tStrings columns = index.getColumns();\r\n\t\t\t\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\t\t\t\tObject[] row = new Object[6];\r\n\t\t\t\t\t\trow[0] = getName(); \t\t\t//TABLE_CAT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//TABLE_SCHEM\r\n\t\t\t\t\t\trow[2] = tableName;\t\t\t\t//TABLE_NAME\r\n\t\t\t\t\t\trow[3] = columns.get(c);\t\t//COLUMN_NAME\r\n\t\t\t\t\t\trow[4] = Utils.getShort(c+1);\t//KEY_SEQ\r\n\t\t\t\t\t\trow[5] = index.getName();\t\t//PK_NAME\r\n\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\t\t\r\n\t}","startLine":22,"lastLine":28},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(15879,1399,<444,1>,<477,2>)","rawLines":"Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = getTables(table);\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tIndexDescription index = indexes.get(i);\r\n\t\t\t\tif(index.isUnique()){\r\n\t\t\t\t\tStrings columns = index.getColumns();\r\n\t\t\t\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\t\t\t\tString columnName = columns.get(c);\r\n\t\t\t\t\t\tColumn column = tab.findColumn(columnName);\r\n\t\t\t\t\t\tObject[] row = new Object[8];\r\n\t\t\t\t\t\trow[0] = Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE\r\n\t\t\t\t\t\trow[1] = columnName;\t\t\t//COLUMN_NAME\r\n\t\t\t\t\t\tfinal int dataType = column.getDataType();\r\n\t\t\t\t\t\trow[2] = Utils.getInteger(dataType);//DATA_TYPE\r\n\t\t\t\t\t\trow[3] = SQLTokenizer.getKeyWord(dataType);//TYPE_NAME\r\n\t\t\t\t\t\trow[4] = Utils.getInteger(column.getPrecision());\t//COLUMN_SIZE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//BUFFER_LENGTH\r\n\t\t\t\t\t\trow[6] = Utils.getShort(column.getScale());\t\t//DECIMAL_DIGITS\r\n\t\t\t\t\t\trow[7] = Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN\r\n\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\t\t\r\n\t}","startLine":27,"lastLine":33},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(18311,1306,<511,1>,<545,2>)","rawLines":"Object[][] getIndexInfo( SSConnection con, String table, boolean unique) throws SQLException {\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = getTables(table);\r\n\t\tShort type = Utils.getShort( DatabaseMetaData.tableIndexOther );\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tIndexDescription index = indexes.get(i);\r\n\t\t\t\tStrings columns = index.getColumns();\r\n\t\t\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\t\t\tObject[] row = new Object[13];\r\n\t\t\t\t\trow[0] = getName(); \t\t\t//TABLE_CAT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//TABLE_SCHEM\r\n\t\t\t\t\trow[2] = tableName;\t\t\t\t//TABLE_NAME\r\n\t\t\t\t\trow[3] = Boolean.valueOf(!index.isUnique());//NON_UNIQUE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//INDEX_QUALIFIER\r\n\t\t\t\t\trow[5] = index.getName();\t\t//INDEX_NAME\r\n\t\t\t\t\trow[6] = type;\t\t\t\t\t//TYPE\r\n\t\t\t\t\trow[7] = Utils.getShort(c+1);\t//ORDINAL_POSITION\r\n\t\t\t\t\trow[8] = columns.get(c);\t\t//COLUMN_NAME\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//ASC_OR_DESC\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//CARDINALITY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//PAGES\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//FILTER_CONDITION\r\n\t\t\t\t\trows.add(row);\r\n\t\t\t\t}\r\n\t\t\t}\r\n    \t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\r\n\t}","startLine":28,"lastLine":34},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Database.java|(14095,1775,<401,1>,<441,2>)","rawLines":"Object[][] getReferenceKeys(SSConnection con, String pkTable, String fkTable) throws SQLException{\r\n\t\tList rows = new ArrayList();\r\n\t\tStrings tables = (pkTable != null) ? getTables(pkTable) : getTables(fkTable);\r\n\t\tfor(int t=0; t<tables.size(); t++){\r\n    \t\tString tableName = tables.get(t);\r\n    \t\tTableView tab = getTableView( con, tableName);\r\n\t\t\tif(!(tab instanceof Table)) continue;\r\n\t\t\tForeignKeys references = ((Table)tab).references;\r\n\t\t\tfor(int i=0; i<references.size(); i++){\r\n\t\t\t\tForeignKey foreignKey = references.get(i);\r\n\t\t\t\tIndexDescription pk = foreignKey.pk;\r\n\t\t\t\tIndexDescription fk = foreignKey.fk;\r\n\t\t\t\tif((pkTable == null || pkTable.equals(foreignKey.pkTable)) &&\r\n\t\t\t\t   (fkTable == null || fkTable.equals(foreignKey.fkTable))){\r\n\t\t\t\t\tStrings columnsPk = pk.getColumns();\r\n\t\t\t\t\tStrings columnsFk = fk.getColumns();\r\n\t\t\t\t\tfor(int c=0; c<columnsPk.size(); c++){\r\n\t\t\t\t\t\tObject[] row = new Object[14];\r\n\t\t\t\t\t\trow[0] = getName();\t\t\t\t//PKTABLE_CAT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//PKTABLE_SCHEM\r\n\t\t\t\t\t\trow[2] = foreignKey.pkTable;\t//PKTABLE_NAME\r\n\t\t\t\t\t\trow[3] = columnsPk.get(c);\t\t//PKCOLUMN_NAME\r\n\t\t\t\t\t\trow[4] = getName();\t\t\t\t//FKTABLE_CAT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//FKTABLE_SCHEM\r\n\t\t\t\t\t\trow[6] = foreignKey.fkTable;\t//FKTABLE_NAME\r\n\t\t\t\t\t\trow[7] = columnsFk.get(c);\t\t//FKCOLUMN_NAME\r\n\t\t\t\t\t\trow[8] = Utils.getShort(c+1);\t//KEY_SEQ\r\n\t\t\t\t\t\trow[9] = Utils.getShort(foreignKey.updateRule);//UPDATE_RULE\r\n\t\t\t\t\t\trow[10]= Utils.getShort(foreignKey.deleteRule); //DELETE_RULE\r\n\t\t\t\t\t\trow[11]= fk.getName();\t//FK_NAME\r\n\t\t\t\t\t\trow[12]= pk.getName();\t//PK_NAME\r\n\t\t\t\t\t\trow[13]= Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable); //DEFERRABILITY\r\n\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] result = new Object[rows.size()][];\r\n\t\trows.toArray(result);\r\n\t\treturn result;\t\t\r\n\t}","startLine":34,"lastLine":40}],"size":7},{"content":"buf.append(' ');formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":218,"lastLine":223},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":279,"lastLine":284},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":232,"lastLine":237}],"size":6},{"content":"while(rs.next()){String newValue = rs.getString(\"v\");assertTrue( oldValue.compareTo( newValue ) < 0 );oldValue = newValue;count++;}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(5248,660,<170,1>,<195,2>)","rawLines":"public void testOrderBy_varchar_asc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\trs.close();\r\n\t\tassertEquals( valueCount, count );\r\n\t}","startLine":17,"lastLine":22},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(20950,875,<788,1>,<818,2>)","rawLines":"public void testUnion() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT v, 5 as Const FROM \" + table1 + \" Union All Select vc, 6 From \" + table3 + \" ORDER by v\");\r\n\t\t\r\n\t\tassertRSMetaData(rs, new String[]{\"v\", \"Const\"}, new int[]{Types.VARCHAR, Types.INTEGER});\r\n\t\t\r\n\t\tassertTrue( rs.next() );\t\t\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\tassertNull(oldValue);\r\n\t\t\r\n\t\tassertTrue( rs.next() );\t\t\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\tassertNull(oldValue);\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 3;\r\n\t\twhile(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount+4, count );\r\n\t}","startLine":23,"lastLine":28}],"size":6},{"content":"case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(8661,882,<261,4>,<285,5>)","rawLines":"double getDouble() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl();\r\n            case SQLTokenizer.BIGINT:\r\n                return getLongImpl();\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return getFloatImpl();\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                return getDoubleImpl();\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);\r\n    }","startLine":15,"lastLine":20},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(5379,1073,<175,4>,<202,5>)","rawLines":"int getInt() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl();\r\n            case SQLTokenizer.BIGINT:\r\n                return (int)getLongImpl();\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return (int)getFloatImpl();\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n            \t// FIXME: bug! if get returns a number outside of\r\n            \t// integer interval, it's not rounded to max/min, \r\n            \t// instead it returns a wrong value\r\n                return (int)getDoubleImpl();\r\n        }\r\n        throw createUnspportedConversion( SQLTokenizer.INT);\r\n    }","startLine":15,"lastLine":20},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(7115,888,<219,1>,<243,5>)","rawLines":"long getLong() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl();\r\n            case SQLTokenizer.BIGINT:\r\n                return getLongImpl();\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return (long)getFloatImpl();\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                return (long)getDoubleImpl();\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.LONG);\r\n    }","startLine":15,"lastLine":20},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(10231,887,<308,4>,<332,5>)","rawLines":"float getFloat() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl();\r\n            case SQLTokenizer.BIGINT:\r\n                return getLongImpl();\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return getFloatImpl();\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                return (float)getDoubleImpl();\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);\r\n    }","startLine":15,"lastLine":20}],"size":6},{"content":"byte[] buffer = new byte[length];System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );return buffer;}return bytes;}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionFunctionConvert.java|(3217,3093,<114,1>,<203,2>)","rawLines":"Object getObject() throws Exception {\r\n\t\tif(param1.isNull()) return null;\r\n\t\tfinal int dataType = getDataType();\r\n\t\tswitch(dataType){\r\n\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\treturn convertToString();\r\n\t\t\tcase SQLTokenizer.VARCHAR:{\r\n\t\t\t\tString str = convertToString();\r\n\t\t\t\tint length = datatype.getDisplaySize();\r\n\t\t\t\tif(length > str.length())\r\n\t\t\t\t\treturn str;\r\n\t\t\t\treturn str.substring(0,length);\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.CHAR:{\r\n\t\t\t\tString str = convertToString();\r\n\t\t\t\tint length = datatype.getDisplaySize();\r\n\t\t\t\tif(length > str.length()){\r\n\t\t\t\t\tchar[] buffer = new char[length-str.length()];\r\n\t\t\t\t\tArrays.fill(buffer, ' ');\r\n\t\t\t\t\treturn str + new String(buffer);\r\n\t\t\t\t}\r\n\t\t\t\treturn str.substring(0,length);\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\treturn param1.getBytes();\r\n\t\t\tcase SQLTokenizer.VARBINARY:{\r\n\t\t\t\tbyte[] bytes = param1.getBytes();\r\n\t\t\t\tint length = datatype.getPrecision();\r\n\t\t\t\tif(length < bytes.length){\r\n\t\t\t\t\tbyte[] buffer = new byte[length];\r\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\r\n\t\t\t\t\treturn buffer;\r\n\t\t\t\t}\r\n\t\t\t\treturn bytes;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.BINARY:{\r\n\t\t\t\tbyte[] bytes = param1.getBytes();\r\n\t\t\t\tint length = datatype.getPrecision();\r\n\t\t\t\tif(length != bytes.length){\r\n\t\t\t\t\tbyte[] buffer = new byte[length];\r\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\r\n\t\t\t\t\treturn buffer;\r\n\t\t\t\t}\r\n\t\t\t\treturn bytes;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\treturn param1.getBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\treturn Utils.getInteger(param1.getInt() & 0xFF);\r\n\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\treturn Utils.getInteger((short)param1.getInt());\r\n\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\treturn Utils.getInteger(param1.getInt());\r\n\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\treturn new Long(param1.getLong());\r\n\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\treturn new Float(param1.getFloat());\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\treturn new Double(param1.getDouble());\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn new DateTime( getDateTimeLong(), dataType );\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\tMutableNumeric num = param1.getNumeric();\r\n\t\t\t\tif(num != null && (dataType == SQLTokenizer.NUMERIC || dataType == SQLTokenizer.DECIMAL))\r\n\t\t\t\t\tnum.setScale(getScale());\r\n\t\t\t\treturn num;\r\n\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\tcase SQLTokenizer.SMALLMONEY:\r\n\t\t\t\treturn Money.createFromUnscaledValue(param1.getMoney());\r\n\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\tswitch(param1.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\t\t\treturn Utils.bytes2unique( Utils.unique2bytes(param1.getString()), 0);\r\n\t\t\t\t}\r\n\t\t\t\treturn Utils.bytes2unique(param1.getBytes(), 0);\r\n\t\t}\r\n\t\tObject[] param = { SQLTokenizer.getKeyWord(dataType) };\r\n\t\tthrow SmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV, param);\r\n\t}","startLine":40,"lastLine":46},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionFunctionConvert.java|(3217,3093,<114,1>,<203,2>)","rawLines":"Object getObject() throws Exception {\r\n\t\tif(param1.isNull()) return null;\r\n\t\tfinal int dataType = getDataType();\r\n\t\tswitch(dataType){\r\n\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\treturn convertToString();\r\n\t\t\tcase SQLTokenizer.VARCHAR:{\r\n\t\t\t\tString str = convertToString();\r\n\t\t\t\tint length = datatype.getDisplaySize();\r\n\t\t\t\tif(length > str.length())\r\n\t\t\t\t\treturn str;\r\n\t\t\t\treturn str.substring(0,length);\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.CHAR:{\r\n\t\t\t\tString str = convertToString();\r\n\t\t\t\tint length = datatype.getDisplaySize();\r\n\t\t\t\tif(length > str.length()){\r\n\t\t\t\t\tchar[] buffer = new char[length-str.length()];\r\n\t\t\t\t\tArrays.fill(buffer, ' ');\r\n\t\t\t\t\treturn str + new String(buffer);\r\n\t\t\t\t}\r\n\t\t\t\treturn str.substring(0,length);\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\treturn param1.getBytes();\r\n\t\t\tcase SQLTokenizer.VARBINARY:{\r\n\t\t\t\tbyte[] bytes = param1.getBytes();\r\n\t\t\t\tint length = datatype.getPrecision();\r\n\t\t\t\tif(length < bytes.length){\r\n\t\t\t\t\tbyte[] buffer = new byte[length];\r\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\r\n\t\t\t\t\treturn buffer;\r\n\t\t\t\t}\r\n\t\t\t\treturn bytes;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.BINARY:{\r\n\t\t\t\tbyte[] bytes = param1.getBytes();\r\n\t\t\t\tint length = datatype.getPrecision();\r\n\t\t\t\tif(length != bytes.length){\r\n\t\t\t\t\tbyte[] buffer = new byte[length];\r\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\r\n\t\t\t\t\treturn buffer;\r\n\t\t\t\t}\r\n\t\t\t\treturn bytes;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\treturn param1.getBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\treturn Utils.getInteger(param1.getInt() & 0xFF);\r\n\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\treturn Utils.getInteger((short)param1.getInt());\r\n\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\treturn Utils.getInteger(param1.getInt());\r\n\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\treturn new Long(param1.getLong());\r\n\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\treturn new Float(param1.getFloat());\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\treturn new Double(param1.getDouble());\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn new DateTime( getDateTimeLong(), dataType );\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\tMutableNumeric num = param1.getNumeric();\r\n\t\t\t\tif(num != null && (dataType == SQLTokenizer.NUMERIC || dataType == SQLTokenizer.DECIMAL))\r\n\t\t\t\t\tnum.setScale(getScale());\r\n\t\t\t\treturn num;\r\n\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\tcase SQLTokenizer.SMALLMONEY:\r\n\t\t\t\treturn Money.createFromUnscaledValue(param1.getMoney());\r\n\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\tswitch(param1.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\t\t\treturn Utils.bytes2unique( Utils.unique2bytes(param1.getString()), 0);\r\n\t\t\t\t}\r\n\t\t\t\treturn Utils.bytes2unique(param1.getBytes(), 0);\r\n\t\t}\r\n\t\tObject[] param = { SQLTokenizer.getKeyWord(dataType) };\r\n\t\tthrow SmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV, param);\r\n\t}","startLine":29,"lastLine":35}],"size":6},{"content":"formatNumber( details.day, 2, buf);buf.append(' ');buf.append( SHORT_MONTHS[ details.month ]);buf.append(' ');formatNumber( details.year, 4, buf);buf.append(' ');","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":187,"lastLine":192},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":258,"lastLine":263}],"size":6},{"content":"Connection con = AllTests.getConnection();try{con.setAutoCommit(false);con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(2568,963,<79,1>,<104,2>)","rawLines":"public void testCommit() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions Select * From transactions\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":1,"lastLine":7},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(12649,1193,<339,1>,<371,2>)","rawLines":"/**\r\n     * If there was insert a row within the ResultSet that not map WHERE than you scroll to this row. If there an Insert\r\n     * outsite the ResultSet that not map the WHERE then you can't scroll this row.\r\n     * \r\n     * @throws Exception\r\n     */\r\n\tpublic void testInsertRow_withWrongWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\r\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\r\n\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where 1=0\");\r\n\t\t\t\r\n\t\t\trs.moveToInsertRow();\r\n\t\t\trs.updateString(\"v\", \"qwert2\");\r\n\t\t\trs.insertRow();\r\n\t\t\t\r\n\t\t\trs.beforeFirst();\r\n\t\t\tassertTrue( rs.next() );\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","startLine":7,"lastLine":13}],"size":6},{"content":"rs.beforeFirst();assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );assertFalse(\"isAfterLast\", rs.isAfterLast() );assertEquals(\"getRow\", 0, rs.getRow() );assertTrue(\"next\", rs.next() );assertTrue(\"isFirst\", rs.isFirst() );","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(3963,1903,<111,4>,<151,5>)","rawLines":"public void testScrollStatesGroupBy() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n        ResultSet rs = st.executeQuery(\"Select i,max(c) From ResultSet Group By i HAVING i=1\");\r\n        \r\n        assertEquals(\"getConcurrency\",ResultSet.CONCUR_READ_ONLY, rs.getConcurrency());\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        rs.beforeFirst();\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"next\", rs.next() );\r\n        assertTrue(\"isFirst\", rs.isFirst() );\r\n        assertFalse(\"rowInserted\", rs.rowInserted() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        assertFalse(\"next\", rs.next() );\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        assertTrue(\"first\", rs.first() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        \r\n        assertFalse(\"previous\", rs.previous() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        \r\n        assertTrue(\"last\", rs.last() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        \r\n        rs.afterLast();\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n    }","startLine":10,"lastLine":15},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(2097,1852,<66,4>,<108,5>)","rawLines":"public void testScrollStates() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n        ResultSet rs = st.executeQuery(\"Select * From ResultSet Where 1=0\");\r\n        \r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        rs.moveToInsertRow();\r\n        rs.insertRow();\r\n        \r\n        rs.beforeFirst();\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"next\", rs.next() );\r\n        assertTrue(\"isFirst\", rs.isFirst() );\r\n        assertTrue(\"rowInserted\", rs.rowInserted() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        assertFalse(\"next\", rs.next() );\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        \r\n        assertTrue(\"first\", rs.first() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        \r\n        assertFalse(\"previous\", rs.previous() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertFalse(\"isAfterLast\", rs.isAfterLast() );\r\n        \r\n        assertTrue(\"last\", rs.last() );\r\n        assertEquals(\"getRow\", 1, rs.getRow() );\r\n        assertTrue(\"isLast\", rs.isLast() );\r\n        \r\n        rs.afterLast();\r\n        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );\r\n        assertTrue(\"isAfterLast\", rs.isAfterLast() );\r\n        assertEquals(\"getRow\", 0, rs.getRow() );\r\n    }","startLine":12,"lastLine":17}],"size":6},{"content":"keyColumnNames.add(column.getName());keys.add(valueExpress.getObject());break;}}}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/CommandInsert.java|(4131,3260,<114,4>,<189,5>)","rawLines":"void executeImpl(SSConnection con, SSStatement st) throws Exception {\r\n        // on first time and on change of the table we need to recompile\r\n        if(table == null || tableTimestamp != table.getTimestamp()) compile( con );\r\n\r\n\t\tfinal IndexDescriptions indexes = table.indexes;\r\n\t\t\r\n\t\tupdateCount = 0;\r\n\t\tcmdSel.from.execute();\r\n\t\tcmdSel.beforeFirst();\r\n        \r\n        //Variables for GeneratedKeys\r\n        Strings keyColumnNames = null;\r\n        ArrayList keys = null;\r\n        boolean needGeneratedKeys = st.needGeneratedKeys();\r\n        int generatedKeysType = 0;\r\n\r\n        while(cmdSel.next()){\r\n            if(needGeneratedKeys){\r\n                keyColumnNames = new Strings();\r\n                keys = new ArrayList();\r\n                if(st.getGeneratedKeyNames() != null)\r\n                    generatedKeysType = 1;\r\n                if(st.getGeneratedKeyIndexes() != null)\r\n                    generatedKeysType = 2;\r\n            }\r\n\t        StoreImpl store = table.getStoreInsert( con );\r\n\t        for(int c=0; c<matrix.length; c++){\r\n\t            Column column = table.columns.get(c);\r\n\t            int idx = matrix[c];\r\n\t            Expression valueExpress;\r\n                if(idx >= 0){\r\n                    valueExpress = cmdSel.columnExpressions.get(idx);\r\n                }else{\r\n                    valueExpress = column.getDefaultValue(con);\r\n                    if(needGeneratedKeys && generatedKeysType == 0 && valueExpress != Expression.NULL){\r\n                        keyColumnNames.add(column.getName());\r\n                        keys.add(valueExpress.getObject());\r\n                    }\r\n                }\r\n                if(needGeneratedKeys && generatedKeysType == 1){\r\n                    String[] keyNames = st.getGeneratedKeyNames();\r\n                    for(int i=0; i<keyNames.length; i++){\r\n                        if(column.getName().equalsIgnoreCase(keyNames[i])){\r\n                            keyColumnNames.add(column.getName());\r\n                            keys.add(valueExpress.getObject());\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if(needGeneratedKeys && generatedKeysType == 2){\r\n                    int[] keyIndexes = st.getGeneratedKeyIndexes();\r\n                    for(int i=0; i<keyIndexes.length; i++){\r\n                        if(c+1 == keyIndexes[i]){\r\n                            keyColumnNames.add(column.getName());\r\n                            keys.add(valueExpress.getObject());\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\t            store.writeExpression( valueExpress, column );\r\n\t\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\t\tindexes.get(i).writeExpression( c, valueExpress );\r\n\t\t\t\t}\r\n\t        }\r\n\t        store.writeFinsh( con );\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tindexes.get(i).writeFinish( con );\r\n\t\t\t}\r\n\t        updateCount++;\r\n            if(needGeneratedKeys){\r\n                Object[][] data = new Object[1][keys.size()];\r\n                keys.toArray(data[0]);\r\n                st.setGeneratedKeys(new SSResultSet( st, Utils.createMemoryCommandSelect( con, keyColumnNames.toArray(), data)));\r\n            }\r\n        }\r\n    }","startLine":53,"lastLine":58},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/CommandInsert.java|(4131,3260,<114,4>,<189,5>)","rawLines":"void executeImpl(SSConnection con, SSStatement st) throws Exception {\r\n        // on first time and on change of the table we need to recompile\r\n        if(table == null || tableTimestamp != table.getTimestamp()) compile( con );\r\n\r\n\t\tfinal IndexDescriptions indexes = table.indexes;\r\n\t\t\r\n\t\tupdateCount = 0;\r\n\t\tcmdSel.from.execute();\r\n\t\tcmdSel.beforeFirst();\r\n        \r\n        //Variables for GeneratedKeys\r\n        Strings keyColumnNames = null;\r\n        ArrayList keys = null;\r\n        boolean needGeneratedKeys = st.needGeneratedKeys();\r\n        int generatedKeysType = 0;\r\n\r\n        while(cmdSel.next()){\r\n            if(needGeneratedKeys){\r\n                keyColumnNames = new Strings();\r\n                keys = new ArrayList();\r\n                if(st.getGeneratedKeyNames() != null)\r\n                    generatedKeysType = 1;\r\n                if(st.getGeneratedKeyIndexes() != null)\r\n                    generatedKeysType = 2;\r\n            }\r\n\t        StoreImpl store = table.getStoreInsert( con );\r\n\t        for(int c=0; c<matrix.length; c++){\r\n\t            Column column = table.columns.get(c);\r\n\t            int idx = matrix[c];\r\n\t            Expression valueExpress;\r\n                if(idx >= 0){\r\n                    valueExpress = cmdSel.columnExpressions.get(idx);\r\n                }else{\r\n                    valueExpress = column.getDefaultValue(con);\r\n                    if(needGeneratedKeys && generatedKeysType == 0 && valueExpress != Expression.NULL){\r\n                        keyColumnNames.add(column.getName());\r\n                        keys.add(valueExpress.getObject());\r\n                    }\r\n                }\r\n                if(needGeneratedKeys && generatedKeysType == 1){\r\n                    String[] keyNames = st.getGeneratedKeyNames();\r\n                    for(int i=0; i<keyNames.length; i++){\r\n                        if(column.getName().equalsIgnoreCase(keyNames[i])){\r\n                            keyColumnNames.add(column.getName());\r\n                            keys.add(valueExpress.getObject());\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if(needGeneratedKeys && generatedKeysType == 2){\r\n                    int[] keyIndexes = st.getGeneratedKeyIndexes();\r\n                    for(int i=0; i<keyIndexes.length; i++){\r\n                        if(c+1 == keyIndexes[i]){\r\n                            keyColumnNames.add(column.getName());\r\n                            keys.add(valueExpress.getObject());\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\t            store.writeExpression( valueExpress, column );\r\n\t\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\t\tindexes.get(i).writeExpression( c, valueExpress );\r\n\t\t\t\t}\r\n\t        }\r\n\t        store.writeFinsh( con );\r\n\t\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\t\tindexes.get(i).writeFinish( con );\r\n\t\t\t}\r\n\t        updateCount++;\r\n            if(needGeneratedKeys){\r\n                Object[][] data = new Object[1][keys.size()];\r\n                keys.toArray(data[0]);\r\n                st.setGeneratedKeys(new SSResultSet( st, Utils.createMemoryCommandSelect( con, keyColumnNames.toArray(), data)));\r\n            }\r\n        }\r\n    }","startLine":43,"lastLine":48}],"size":6},{"content":"assertEquals(1,pr.executeUpdate());rs = pr.getGeneratedKeys();assertNotNull(\"RETURN_GENERATED_KEYS\", rs);assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));assertRowCount(1,rs);","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestStatement.java|(9479,2934,<243,4>,<304,5>)","rawLines":"public void testGeneratedKeysWithPrepare() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        ResultSet rs;\r\n        \r\n        PreparedStatement pr = con.prepareStatement(\"Insert Into statement(c) Values('key1')\", Statement.NO_GENERATED_KEYS);\r\n        pr.execute();\r\n        try{\r\n            pr.getGeneratedKeys();\r\n            fail(\"NO_GENERATED_KEYS\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }\r\n        assertEquals(\"UpdateCount\", 1, pr.getUpdateCount());\r\n        assertNull(\"getResultSet\", pr.getResultSet());\r\n        pr.close();\r\n        \r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key2')\", Statement.RETURN_GENERATED_KEYS);\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key3')\", Statement.RETURN_GENERATED_KEYS);\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key5')\", new int[]{2});\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"});\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n    }","startLine":40,"lastLine":45},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestStatement.java|(9479,2934,<243,4>,<304,5>)","rawLines":"public void testGeneratedKeysWithPrepare() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        ResultSet rs;\r\n        \r\n        PreparedStatement pr = con.prepareStatement(\"Insert Into statement(c) Values('key1')\", Statement.NO_GENERATED_KEYS);\r\n        pr.execute();\r\n        try{\r\n            pr.getGeneratedKeys();\r\n            fail(\"NO_GENERATED_KEYS\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }\r\n        assertEquals(\"UpdateCount\", 1, pr.getUpdateCount());\r\n        assertNull(\"getResultSet\", pr.getResultSet());\r\n        pr.close();\r\n        \r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key2')\", Statement.RETURN_GENERATED_KEYS);\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key3')\", Statement.RETURN_GENERATED_KEYS);\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key5')\", new int[]{2});\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"});\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n    }","startLine":25,"lastLine":30},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestStatement.java|(9479,2934,<243,4>,<304,5>)","rawLines":"public void testGeneratedKeysWithPrepare() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        ResultSet rs;\r\n        \r\n        PreparedStatement pr = con.prepareStatement(\"Insert Into statement(c) Values('key1')\", Statement.NO_GENERATED_KEYS);\r\n        pr.execute();\r\n        try{\r\n            pr.getGeneratedKeys();\r\n            fail(\"NO_GENERATED_KEYS\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }\r\n        assertEquals(\"UpdateCount\", 1, pr.getUpdateCount());\r\n        assertNull(\"getResultSet\", pr.getResultSet());\r\n        pr.close();\r\n        \r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key2')\", Statement.RETURN_GENERATED_KEYS);\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key3')\", Statement.RETURN_GENERATED_KEYS);\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key5')\", new int[]{2});\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"});\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n    }","startLine":55,"lastLine":60}],"size":6},{"content":"try{int maxRows = Integer.parseInt(token.getName(sql));selCmd.setMaxRows(maxRows);}catch(NumberFormatException e){throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SQLParser.java|(11485,2480,<338,4>,<409,5>)","rawLines":"/**\r\n     * A single SELECT of a UNION or only a simple single SELECT.\r\n     * @return\r\n     * @throws SQLException\r\n     */\r\n    private CommandSelect singleSelect() throws SQLException{\r\n        CommandSelect selCmd = new CommandSelect(con.log);\r\n\t\tSQLToken token;\r\n        // scan for prefix like DISTINCT, ALL and the TOP clause; sample: SELECT TOP 15 ...\r\nSwitch: while(true){\r\n\t\t\ttoken = nextToken(MISSING_EXPRESSION);\r\n\t\t\tswitch(token.value){\r\n\t\t\t\tcase SQLTokenizer.TOP:\r\n\t\t\t\t\ttoken = nextToken(MISSING_EXPRESSION);\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tint maxRows = Integer.parseInt(token.getName(sql));\r\n\t\t\t\t\t\tselCmd.setMaxRows(maxRows);\r\n\t\t\t\t\t}catch(NumberFormatException e){\r\n\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.ALL:\r\n\t\t\t\t\tselCmd.setDistinct(false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.DISTINCT:\r\n\t\t\t\t\tselCmd.setDistinct(true);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tpreviousToken();\r\n\t\t\t\t\tbreak Switch;\r\n\t\t\t}\r\n\t\t}\r\n\r\n        while(true){\r\n            Expression column = expression(selCmd, 0);\r\n            selCmd.addColumnExpression( column );\r\n\r\n            token = nextToken();\r\n            if(token == null) return selCmd; // SELECT without FROM\r\n\r\n            boolean as = false;\r\n            if(token.value == SQLTokenizer.AS){\r\n                token = nextToken(MISSING_EXPRESSION);\r\n                as = true;\r\n            }\r\n\r\n            if(as || (!isKeyword(token))){\r\n            \tString alias = getIdentifier( token);\r\n                column.setAlias( alias );\r\n                token = nextToken();\r\n                if(token == null) return selCmd; // SELECT without FROM\r\n            }\r\n\r\n            switch(token.value){\r\n                case SQLTokenizer.COMMA:\r\n                        if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );\r\n                        column = null;\r\n                        break;\r\n                case SQLTokenizer.FROM:\r\n                        if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );\r\n                        column = null;\r\n                        from(selCmd);\r\n                        return selCmd;\r\n\r\n                default:\r\n                        if(!isKeyword(token))\r\n                \t\t\tthrow createSyntaxError( token, new int[]{SQLTokenizer.COMMA, SQLTokenizer.FROM} );\r\n                        previousToken();\r\n                        return selCmd;\r\n            }\r\n        }\r\n    }","startLine":14,"lastLine":19},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/SQLParser.java|(74321,391,<1930,4>,<1938,5>)","rawLines":"private void limit(CommandSelect selCmd) throws SQLException{\r\n        SQLToken token = nextToken(MISSING_EXPRESSION);\r\n        try{\r\n            int maxRows = Integer.parseInt(token.getName(sql));\r\n            selCmd.setMaxRows(maxRows);\r\n        }catch(NumberFormatException e){\r\n            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n        }\r\n    }","startLine":2,"lastLine":7}],"size":6},{"content":"if(num.scale < scale){num.setScale(scale);}elseif(num.scale > scale){setScale(num.scale);}","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/MutableNumeric.java|(6544,330,<230,4>,<242,5>)","rawLines":"/**\r\n     * Subtract the value to the current MutableNumeric Object and change it.\r\n     * @param num the subtracted  value\r\n     */\r\n    void sub(MutableNumeric num){\r\n\t\tif(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}\r\n        add( -num.signum, num.value );\r\n    }","startLine":5,"lastLine":10},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/MutableNumeric.java|(4721,318,<162,4>,<174,5>)","rawLines":"/**\r\n     * Add the value to the current MutableNumeric Object and change it.\r\n     * @param num the added value\r\n     */\r\n    void add(MutableNumeric num){\r\n\t\tif(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}\r\n        add( num.signum, num.value );\r\n    }","startLine":5,"lastLine":10}],"size":6},{"content":"final byte[] getBytes() throws Exception{if(isNull()) return null;byte[] bytes = param1.getBytes();int length = param2.getInt();if(bytes.length <= length) return bytes;byte[] b = new byte[length];","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionFunctionLeft.java|(1655,282,<52,1>,<61,2>)","rawLines":"final byte[] getBytes() throws Exception{\r\n\t\tif(isNull()) return null;\r\n\t\tbyte[] bytes = param1.getBytes();\r\n\t\tint length = param2.getInt();\r\n\t\tif(bytes.length <= length) return bytes;\r\n\r\n\t\tbyte[] b = new byte[length];\r\n\t\tSystem.arraycopy(bytes, 0, b, 0, length);\r\n\t\treturn b;\t\t\r\n\t}","startLine":0,"lastLine":6},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionFunctionRight.java|(1658,301,<52,1>,<61,2>)","rawLines":"final byte[] getBytes() throws Exception{\r\n\t\tif(isNull()) return null;\r\n\t\tbyte[] bytes = param1.getBytes();\r\n\t\tint length = param2.getInt();\r\n\t\tif(bytes.length <= length) return bytes;\r\n\r\n\t\tbyte[] b = new byte[length];\r\n\t\tSystem.arraycopy(bytes, bytes.length -length, b, 0, length);\r\n\t\treturn b;\t\t\r\n\t}","startLine":0,"lastLine":6}],"size":6},{"content":"raFile = Utils.openRaFile( file, database.isReadOnly() );ByteBuffer buffer = ByteBuffer.allocate(8);raFile.read(buffer);buffer.position(0);int magic   = buffer.getInt();int version = buffer.getInt();","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/TableView.java|(2638,1483,<75,1>,<114,2>)","rawLines":"/**\r\n\t * Load a Table or View object. \r\n\t */\r\n\tstatic TableView load(SSConnection con, Database database, String name) throws SQLException{\r\n\t    FileChannel raFile = null;\r\n\t\ttry{\r\n\t\t\tString fileName = Utils.createTableViewFileName( database, name );\r\n\t\t\tFile file = new File( fileName );\r\n\t\t\tif(!file.exists())\r\n\t\t\t\tthrow SmallSQLException.create(Language.TABLE_OR_VIEW_MISSING, name);\r\n\t\t\traFile = Utils.openRaFile( file, database.isReadOnly() );\r\n\t\t\tByteBuffer buffer = ByteBuffer.allocate(8);\r\n\t\t\traFile.read(buffer);\r\n\t\t\tbuffer.position(0);\r\n\t\t\tint magic   = buffer.getInt();\r\n\t\t\tint version = buffer.getInt();\r\n\t\t\tswitch(magic){\r\n\t\t\t\tcase MAGIC_TABLE:\r\n\t\t\t\tcase MAGIC_VIEW:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow SmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID, fileName);\r\n\t\t\t}\r\n\t\t\tif(version > TABLE_VIEW_VERSION)\r\n\t\t\t\tthrow SmallSQLException.create(Language.FILE_TOONEW, new Object[] { new Integer(version), fileName });\r\n\t\t\tif(version < TABLE_VIEW_OLD_VERSION)\r\n\t\t\t\tthrow SmallSQLException.create(Language.FILE_TOOOLD, new Object[] { new Integer(version), fileName });\r\n\t\t\tif(magic == MAGIC_TABLE)\r\n\t\t\t\treturn new Table( database, con, name, raFile, raFile.position(), version);\r\n\t\t\t\treturn new View ( con, name, raFile, raFile.position());\r\n\t\t}catch(Throwable e){\r\n\t\t\tif(raFile != null)\r\n\t\t\t\ttry{\r\n\t\t\t\t\traFile.close();\r\n\t\t\t\t}catch(Exception e2){\r\n\t\t\t\t\tDriverManager.println(e2.toString());\r\n\t\t\t\t}\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n\t}","startLine":10,"lastLine":15},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/IndexDescription.java|(5250,1192,<168,4>,<195,5>)","rawLines":"private void load(Database database) throws SQLException{\r\n        try{\r\n            File file = getFile( database, name );\r\n            if(!file.exists())\r\n                throw SmallSQLException.create(Language.INDEX_MISSING, name);\r\n            raFile = Utils.openRaFile( file, database.isReadOnly() );\r\n            ByteBuffer buffer = ByteBuffer.allocate(8);\r\n            raFile.read(buffer);\r\n            buffer.position(0);\r\n            int magic   = buffer.getInt();\r\n            int version = buffer.getInt();\r\n            if(magic != MAGIC_INDEX){\r\n                throw SmallSQLException.create(Language.INDEX_FILE_INVALID, file.getName());\r\n            }\r\n            if(version > INDEX_VERSION){\r\n            \tObject[] params = { new Integer(version), file.getName() };\r\n                throw SmallSQLException.create(Language.FILE_TOONEW, params);\r\n            }\r\n        }catch(Throwable e){\r\n            if(raFile != null)\r\n                try{\r\n                    raFile.close();\r\n                }catch(Exception e2){\r\n                    DriverManager.println(e2.toString());\r\n                }\r\n            throw SmallSQLException.createFromException(e);\r\n        }\r\n    }","startLine":5,"lastLine":10}],"size":6},{"content":"case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:case SQLTokenizer.TINYINT:offset++;break;case SQLTokenizer.SMALLINT:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(22627,6766,<655,4>,<814,5>)","rawLines":"/**\r\n     * Here are pass only Expression instead of Objects to optimize \r\n     * it for native data (no object).\r\n     * The value of offset must be correctly. \r\n     * @param expr the value that should be written\r\n     * @param column a description of the target column\r\n     * @throws Exception if any error occur like conversions or io exceptions\r\n     */\r\n    void writeExpression( Expression expr, Column column) throws Exception{\r\n        boolean isNull = expr.isNull();\r\n        if(isNull && !column.isNullable()){\r\n            throw SmallSQLException.create(Language.VALUE_NULL_INVALID, column.getName());\r\n        }\r\n        int dataType = column.getDataType();\r\n        if(isNull){\r\n            writeBoolean(true); //true - is null\r\n            switch(dataType){\r\n                case SQLTokenizer.BIT:\r\n                case SQLTokenizer.BOOLEAN:\r\n                case SQLTokenizer.TINYINT:\r\n                    offset++;\r\n                    break;\r\n                case SQLTokenizer.SMALLINT:\r\n                case SQLTokenizer.BINARY:\r\n                case SQLTokenizer.VARBINARY:\r\n                case SQLTokenizer.CHAR:\r\n                case SQLTokenizer.NCHAR:\r\n                case SQLTokenizer.VARCHAR:\r\n                case SQLTokenizer.NVARCHAR:\r\n                    offset += 2;\r\n                    break;\r\n                case SQLTokenizer.INT:\r\n                case SQLTokenizer.REAL:\r\n                case SQLTokenizer.SMALLMONEY:\r\n                case SQLTokenizer.TIME:\r\n                case SQLTokenizer.DATE:\r\n                case SQLTokenizer.SMALLDATETIME:\r\n                    offset += 4;\r\n                    break;\r\n                case SQLTokenizer.BIGINT:\r\n                case SQLTokenizer.FLOAT:\r\n                case SQLTokenizer.DOUBLE:\r\n                case SQLTokenizer.MONEY:\r\n                case SQLTokenizer.JAVA_OBJECT:\r\n                case SQLTokenizer.LONGVARBINARY:\r\n                case SQLTokenizer.BLOB:\r\n\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\tcase SQLTokenizer.NCLOB:\r\n                case SQLTokenizer.LONGNVARCHAR:\r\n                case SQLTokenizer.LONGVARCHAR:\r\n                case SQLTokenizer.TIMESTAMP:\r\n                    offset += 8;\r\n                    break;\r\n                case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    offset += 16;\r\n                    break;\r\n                case SQLTokenizer.NUMERIC:\r\n                case SQLTokenizer.DECIMAL:\r\n                    offset += 3;\r\n                    break;\r\n                default: throw new Error();\r\n            }\r\n            return;\r\n        }\r\n        writeBoolean(false); // false - is not null\r\n       \tcolumn.setNewAutoIncrementValue(expr);\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    writeBoolean( expr.getBoolean() );\r\n                    break;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    writeBinary( expr.getBytes(), column.getPrecision(), dataType != SQLTokenizer.BINARY );\r\n                    break;\r\n            case SQLTokenizer.TINYINT:\r\n                    writeByte( expr.getInt() );\r\n                    break;\r\n            case SQLTokenizer.SMALLINT:\r\n                    writeShort( expr.getInt() );\r\n                    break;\r\n            case SQLTokenizer.INT:\r\n                    writeInt( expr.getInt() );\r\n                    break;\r\n            case SQLTokenizer.BIGINT:\r\n                    writeLong( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.REAL:\r\n                    writeFloat( expr.getFloat() );\r\n                    break;\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    writeDouble( expr.getDouble() );\r\n                    break;\r\n            case SQLTokenizer.MONEY:\r\n                    writeLong( expr.getMoney() );\r\n                    break;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    writeInt( (int)expr.getMoney() );\r\n                    break;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n            \t\tMutableNumeric numeric = expr.getNumeric();\r\n            \t\tnumeric.setScale( column.getScale() );\r\n                    writeNumeric( numeric );\r\n                    break;\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n                    writeString( expr.getString(), column.getDisplaySize(), false );\r\n                    break;\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    writeString( expr.getString(), column.getDisplaySize(), true );\r\n                    break;\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    writeLongString( expr.getString() );\r\n                    break;\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    // FIXME a MemoryStream can be faster because there are no additional array copy\r\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n                    ObjectOutputStream oos = new ObjectOutputStream(baos);\r\n                    oos.writeObject( expr.getObject() );\r\n                    writeLongBinary( baos.toByteArray() );\r\n                    break;\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    writeLongBinary( expr.getBytes() );\r\n                    break;\r\n            case SQLTokenizer.TIMESTAMP:\r\n                    writeTimestamp( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.TIME:\r\n                    writeTime( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.DATE:\r\n                    writeDate( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    writeSmallDateTime( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\tswitch(expr.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BLOB:\r\n\t\t\t\t\t\tbyte[] bytes = expr.getBytes();\r\n                        if(bytes.length != 16) throw SmallSQLException.create(Language.BYTEARR_INVALID_SIZE, String.valueOf(bytes.length));\r\n                        writeBytes( bytes );\r\n\t\t\t\t\tdefault:\r\n                        writeBytes( Utils.unique2bytes(expr.getString()) );\r\n\t\t\t\t\t}\r\n                    break;\r\n            default: throw new Error(String.valueOf(column.getDataType()));\r\n        }\r\n    }","startLine":17,"lastLine":22},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/StoreImpl.java|(57166,2557,<1466,4>,<1527,5>)","rawLines":"@Override\r\n    void scanObjectOffsets( int[] offsets, int dataTypes[] ){\r\n        offset = PAGE_CONTROL_SIZE;\r\n        for(int i=0; i<offsets.length; i++){\r\n            offsets[i] = offset;\r\n            boolean isNull = readBoolean(); // for isNull\r\n            switch(dataTypes[i]){\r\n                case SQLTokenizer.BIT:\r\n                case SQLTokenizer.BOOLEAN:\r\n                case SQLTokenizer.TINYINT:\r\n                    offset++;\r\n                    break;\r\n                case SQLTokenizer.SMALLINT:\r\n                    offset += 2;\r\n                    break;\r\n                case SQLTokenizer.INT:\r\n                case SQLTokenizer.REAL:\r\n                case SQLTokenizer.SMALLMONEY:\r\n                case SQLTokenizer.TIME:\r\n                case SQLTokenizer.DATE:\r\n                case SQLTokenizer.SMALLDATETIME:\r\n                    offset += 4;\r\n                    break;\r\n                case SQLTokenizer.BIGINT:\r\n                case SQLTokenizer.FLOAT:\r\n                case SQLTokenizer.DOUBLE:\r\n                case SQLTokenizer.MONEY:\r\n                case SQLTokenizer.JAVA_OBJECT:\r\n                case SQLTokenizer.LONGVARBINARY:\r\n                case SQLTokenizer.BLOB:\r\n\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\tcase SQLTokenizer.NCLOB:\r\n                case SQLTokenizer.LONGNVARCHAR:\r\n                case SQLTokenizer.LONGVARCHAR:\r\n                case SQLTokenizer.TIMESTAMP:\r\n                    offset += 8;\r\n                    break;\r\n                case SQLTokenizer.BINARY:\r\n                case SQLTokenizer.VARBINARY:\r\n                    int count = readShort() & 0xFFFF;\r\n                    if(!isNull) offset += count;  // not use += directly because readShort change the offset\r\n                    break;\r\n                case SQLTokenizer.NUMERIC:\r\n                case SQLTokenizer.DECIMAL:\r\n                    count = readByte();\r\n\t\t\t\t\toffset += 2;\r\n\t\t\t\t\tif(!isNull) offset += count*4;\r\n                    break;\r\n                case SQLTokenizer.CHAR:\r\n                case SQLTokenizer.NCHAR:\r\n                case SQLTokenizer.VARCHAR:\r\n                case SQLTokenizer.NVARCHAR:\r\n                    count = readShort() & 0xFFFF;\r\n                    if(!isNull) offset += count << 1; // not use += directly because readShort change the offset\r\n                    break;\r\n                case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    offset += 16;\r\n                    break;\r\n                default: throw new Error(String.valueOf( dataTypes[i] ) );\r\n            }\r\n        }\r\n    }","startLine":7,"lastLine":12}],"size":6},{"content":"break;case SQLTokenizer.VARBINARY:case SQLTokenizer.BINARY:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.UNIQUEIDENTIFIER:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Index.java|(8083,2880,<220,1>,<291,2>)","rawLines":"/**\r\n\t * Add a value to the index.\r\n\t * @param rowOffset Is the value that is save in the index. It is typical a row number or a rowOffset.\r\n\t * @param expressions This is the list of ORDER BY columns and describe the position in the index.\r\n\t */\r\n\tfinal void addValues( long rowOffset, Expressions expressions ) throws Exception{\r\n\t\tIndexNode page = this.rootPage;\r\n\t\tint count = expressions.size();\r\n\t\tfor(int i=0; i<count; i++){\r\n\t\t\tExpression expr = expressions.get(i);\r\n\t\t\tboolean isLastValues = (i == count-1);\r\n\t\t\tif(expr.isNull()){\r\n\t\t\t\tpage = addNull(page, rowOffset, isLastValues);\r\n\t\t\t}else{\r\n\t\t\t\tswitch(expr.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, floatToBinarySortOrder( expr.getFloat()), isLastValues, 2 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, doubleToBinarySortOrder( expr.getDouble()), isLastValues, 4 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, expr.getInt(), isLastValues, 1 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, shortToBinarySortOrder( expr.getInt()), isLastValues, 1 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, intToBinarySortOrder( expr.getInt()), isLastValues, 2 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLMONEY:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.NVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGNVARCHAR:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), false ), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), true ), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BLOB:\r\n\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, bytesToBinarySortOrder( expr.getBytes()), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, expr.getBoolean() ? 2 : 1, isLastValues, 1 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, numericToBinarySortOrder( expr.getNumeric()), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault: \r\n\t\t\t\t\t\t//TODO more data types\r\n\t\t\t\t\t\tthrow new Error(String.valueOf(expr.getDataType()));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}","startLine":49,"lastLine":54},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/Index.java|(5028,3047,<139,1>,<217,2>)","rawLines":"/**\r\n     * Return the last IndexNode for the expression. If the value in expressions does not exist then it return a null.\r\n     * \r\n     * @param page\r\n     *            the start point of the search. If it the first expression of a list then it is the rootPage\r\n     * @param expr\r\n     *            the searching expression\r\n     * @param searchNullValues\r\n     *            a expression with NULL values should return a result.\r\n     * @param nodeList\r\n     *            optional, can be null. The search path in the index tree.\r\n     * @return the mapping IndexNode or null.\r\n     */\r\n\tfinal private IndexNode findRows(IndexNode page, Expression expr, boolean searchNullValues, ArrayList nodeList) throws Exception{\r\n\t\t\tif(expr.isNull()){\r\n                if(!searchNullValues){\r\n                    return null;\r\n                }\r\n\t\t\t\tpage = findNull(page);\r\n\t\t\t}else{\r\n\t\t\t\tswitch(expr.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\tpage = find( page, floatToBinarySortOrder( expr.getFloat()), 2, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\tpage = find( page, doubleToBinarySortOrder( expr.getDouble()), 4, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\tpage = find( page, expr.getInt(), 1, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\tpage = find( page, shortToBinarySortOrder( expr.getInt()), 1, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\tpage = find( page, intToBinarySortOrder( expr.getInt()), 2, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLMONEY:\r\n\t\t\t\t\t\tpage = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.NVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGNVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\t\t\tpage = find( page, stringToBinarySortOrder( expr.getString(), false ), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\t\tpage = find( page, stringToBinarySortOrder( expr.getString(), true ), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BLOB:\r\n\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\t\tpage = find( page, bytesToBinarySortOrder( expr.getBytes()), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\t\tpage = find( page, expr.getBoolean() ? 2 : 1, 1, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\tcase SQLTokenizer.DECIMAL:\t\t\t\t\t\t\r\n\t\t\t\t\t\tpage = find( page, numericToBinarySortOrder( expr.getNumeric() ), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault: \r\n\t\t\t\t\t\t//TODO more data types\r\n\t\t\t\t\t\tthrow new Error(String.valueOf(expr.getDataType()));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn page;\r\n\t}","startLine":56,"lastLine":61}],"size":6},{"content":"formatNumber( details.hour, 2, buf);buf.append(':');formatNumber( details.minute, 2, buf);buf.append(':');formatNumber( details.second, 2, buf);return buf.toString();","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":219,"lastLine":224},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>)","rawLines":"/**\r\n\t * @param style a value like the syle of CONVERT function from MS SQL Server.\r\n\t */\r\n\tString toString(int style){\r\n\t\tif(style < 0)\r\n\t\t\treturn toString();\r\n\t\tDetails details = new Details(time);\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tswitch(style){\r\n\t\t\tcase 0:\r\n\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 1:   // USA mm/dd/yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 101:   // USA mm/dd/yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 2: // ANSI yy.mm.dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 102: // ANSI yyyy.mm.dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 3: // britsh dd/mm/yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 103: // britsh dd/mm/yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 4: // german dd.mm.yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 104: // german dd.mm.yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 5: // italiano dd-mm-yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 105: // italiano dd-mm-yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 6: // dd mon yy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 106: // dd mon yyyy\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 7: // Mon dd, yy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 107: // Mon dd, yyyy\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(',');\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 8: //hh:mm:ss\r\n\t\t\tcase 108:\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 9:\r\n\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 10: // USA mm-dd-yy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 110: // USA mm-dd-yyyy\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 11: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 111: // Japan yy/mm/dd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 12: // ISO yymmdd\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 112: // ISO yyyymmdd\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 13:\r\n\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 14:\r\n\t\t\tcase 114: // hh:mi:ss:mmm(24h)\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 20:\r\n\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 21:\r\n\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 26:\r\n\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('-');\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('T');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append('.');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.year, 4, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatHour12( details.hour, buf );\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf);\r\n\t\t\t\tbuf.append( details.hour < 12 ? \"AM\" : \"PM\" );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM\r\n\t\t\t\tformatNumber( details.day, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.month+1, 2, buf);\r\n\t\t\t\tbuf.append('/');\r\n\t\t\t\tformatNumber( details.year % 100, 2, buf);\r\n\t\t\t\tbuf.append(' ');\r\n\t\t\t\tformatNumber( details.hour, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.minute, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatNumber( details.second, 2, buf);\r\n\t\t\t\tbuf.append(':');\r\n\t\t\t\tformatMillis( details.millis, buf );\r\n\t\t\t\treturn buf.toString();\r\n\t\t\tdefault:\r\n\t\t\t\treturn toString();\r\n\t\t}\r\n\t\t\r\n\t}","startLine":124,"lastLine":129}],"size":6},{"content":"rs.insertRow();}time += System.currentTimeMillis();rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();int count = rs.getInt(1);","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(6307,1369,<160,4>,<190,5>)","rawLines":"/**\r\n      *  3. Test\r\n      *  Insert only empty rows with the default values of the row with the method insertRow().\r\n      */  \r\n    static void test_InsertEmptyRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert empty rows with insertRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.moveToInsertRow();\r\n                rs.insertRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":14,"lastLine":19},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(9830,2697,<247,4>,<303,5>)","rawLines":"/**\r\n      *  5. Test\r\n      *  Insert rows with the method insertRow().\r\n      */  \r\n    static void test_InsertRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert rows with insertRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.moveToInsertRow();\r\n\t            rs.updateBytes (  \"bi\", byteArray );\r\n\t            rs.updateString(  \"c\" , \"Test\" );\r\n\t            rs.updateDate  (  \"d\" , new Date( System.currentTimeMillis() ) );\r\n\t            rs.updateFloat (  \"de\", (float)1234.56789 );\r\n\t            rs.updateFloat (  \"f\" , (float)9876.54321 );\r\n\t            rs.updateBytes (  \"im\", largeByteArray );\r\n\t            rs.updateInt   (  \"i\" , i );\r\n\t            rs.updateDouble(  \"m\" , 23.45 );\r\n\t            rs.updateDouble(  \"n\" , 567.45 );\r\n\t            rs.updateFloat (  \"r\" , (float)78.89 );\r\n\t            rs.updateTime  (  \"sd\", new Time( System.currentTimeMillis() ) );\r\n\t            rs.updateShort (  \"si\", (short)i );\r\n\t            rs.updateFloat (  \"sm\", (float)34.56 );\r\n\t            rs.updateString(  \"sy\", \"sysname (30) NULL\" );\r\n\t            rs.updateString(  \"t\" , \"ntext NULL, sample to save in the field\" );\r\n\t            rs.updateByte  (  \"ti\", (byte)i );\r\n\t            rs.updateBytes (  \"vb\", byteArray );\r\n\t            rs.updateString(  \"vc\", \"nvarchar (255) NULL\" );\r\n                rs.insertRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                  st.execute(\"DELETE FROM \" + tableName);\r\n                  System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            }else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n        \te.printStackTrace();\r\n            try{\r\n                // reset for the next test\r\n                Statement st = con.createStatement();\r\n                st.execute(\"DELETE FROM \" + tableName);\r\n                st.close();\r\n            }catch(Exception ee){/* ignore it */}\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":32,"lastLine":37}],"size":6},{"content":"case OR:case AND:case NOT:case LIKE:case ISNULL:case ISNOTNULL:","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(29624,510,<784,4>,<799,5>)","rawLines":"boolean isNull() throws Exception{\r\n        switch(operation){\r\n\t        case OR:\r\n\t        case AND:\r\n\t        case NOT:\r\n\t        case LIKE:\r\n\t        case ISNULL:\r\n\t\t\tcase ISNOTNULL:\r\n\t\t\tcase IN:\r\n\t\t\t\t\t\t\treturn false; //Boolean operations return ever a result ???, but at least ISNULL and ISNOTNULL\r\n            case NEGATIVE: \r\n            case BIT_NOT:\r\n                           return                  left.isNull();\r\n            default:       return left.isNull() || right.isNull();\r\n        }\r\n    }","startLine":2,"lastLine":7},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(28574,505,<735,4>,<758,5>)","rawLines":"int getDataType() {\r\n        switch(operation){\r\n            case NEGATIVE:\r\n            case BIT_NOT:\r\n            \treturn left.getDataType();\r\n\t\t\tcase EQUALS:\r\n\t\t\tcase EQUALS_NULL:\r\n\t\t\tcase GREATER:\r\n\t\t\tcase GRE_EQU:\r\n\t\t\tcase LESSER:\r\n\t\t\tcase LES_EQU:\r\n\t\t\tcase UNEQUALS:\r\n\t\t\tcase BETWEEN:\r\n\t\t\tcase OR:\r\n\t\t\tcase AND:\r\n\t\t\tcase NOT:\r\n\t\t\tcase LIKE:\r\n\t\t\tcase ISNULL:\r\n\t\t\tcase ISNOTNULL:\r\n\t\t\t \treturn SQLTokenizer.BOOLEAN;\r\n            default:\r\n            \treturn getDataType(left, right);\r\n        }\r\n    }","startLine":13,"lastLine":18}],"size":6},{"content":"public void runTest() throws Exception{Connection con = AllTests.getConnection();Statement st = con.createStatement();ResultSet rs;rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");assertFalse( \"To many rows\", rs.next() );","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestJoins.java|(7129,3045,<158,4>,<193,5>)","rawLines":"public void runTest() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        ResultSet rs;\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        assertRowCount( 7, \"Select * from \" + table);\r\n        assertRowCount( 49, \"Select * from \" + table + \" t1, \" + table2 + \" t2\");\r\n        assertRowCount( 0, \"Select * from \" + table + \", \" + table3);\r\n        assertRowCount( 49, \"Select * from (\"+ table +\"), \" + table2);\r\n        assertRowCount( 49, \"Select * from \" + table + \" Cross Join \" + table2);\r\n        assertRowCount( 13, \"Select * from \" + table + \" INNER JOIN \" + table2 + \" ON \" + table + \".a = \" + table2 + \".c\");\r\n        assertRowCount( 13, \"Select * from \" + table + \"       JOIN \" + table2 + \" ON \" + table2 + \".c = \" + table + \".a\");\r\n        assertRowCount( 13, \"Select * from {oj \" + table + \" INNER JOIN \" + table2 + \" ON \" + table + \".a = \" + table2 + \".c}\");\r\n        assertRowCount( 13, \"Select * from \" + table + \" AS t1 INNER JOIN \" + table2 + \" t2 ON t1.a = t2.c\");\r\n        assertRowCount( 13, \"Select * from {oj \" + table + \" t1 INNER JOIN \" + table2 + \" t2 ON t1.a = t2.c}\");\r\n        assertRowCount( 4, \"Select * from \" + table + \" t1 INNER JOIN \" + table2 + \" t2 ON t1.a = t2.c and t1.b=t2.d\");\r\n        assertRowCount( 4, \"Select * from \" + table + \" t1       JOIN \" + table2 + \" t2 ON t1.a = t2.c and t2.d=t1.b\");\r\n        assertRowCount( 7, \"Select * from \" + table + \" t1 LEFT OUTER JOIN \" + table2 + \" t2 ON t1.a = t2.c and t1.b=t2.d\");\r\n        assertRowCount( 7, \"Select * from \" + table + \" t1 LEFT       JOIN \" + table2 + \" t2 ON t1.a = t2.c and t1.b=t2.d\");\r\n        assertRowCount( 15, \"Select * from \" + table + \" t1 LEFT OUTER JOIN \" + table2 + \" t2 ON t1.a = t2.c\");\r\n        assertRowCount( 7, \"Select * from \" + table + \" t1 LEFT OUTER JOIN \" + table3 + \" t2 ON t1.a = t2.c\");\r\n        assertRowCount( 7, \"Select * from \" + table + \" t1 RIGHT OUTER JOIN \" + table2 + \" t2 ON t1.a = t2.c and t1.b=t2.d\");\r\n        assertRowCount( 7, \"Select * from \" + table + \" t1 RIGHT OUTER JOIN \" + table2 + \" t2 ON false\");\r\n        assertRowCount( 15, \"Select * from \" + table + \" t1 RIGHT OUTER JOIN \" + table2 + \" t2 ON t1.a = t2.c\");\r\n        assertRowCount( 0, \"Select * from \" + table + \" t1 RIGHT OUTER JOIN \" + table3 + \" t2 ON t1.a = t2.c\");\r\n        assertRowCount( 14, \"Select * from \" + table + \" t1 FULL OUTER JOIN \" + table2 + \" t2 ON 1=0\");\r\n        assertRowCount( 17, \"Select * from \" + table + \" t1 FULL OUTER JOIN \" + table2 + \" t2 ON t1.a = t2.c\");\r\n\t\tassertRowCount( 7, \"Select * from \" + table + \" t1 FULL OUTER JOIN \" + table3 + \" t2 ON t1.a = t2.c\");\r\n\t\tassertRowCount( 7, \"Select * from \" + table3 + \" t1 FULL OUTER JOIN \" + table + \" t2 ON t1.c = t2.a\");\r\n        assertRowCount( 5, \"Select * from \" + table + \" INNER JOIN (SELECT DISTINCT c FROM \" + table2 + \") t1 ON \" + table + \".a = t1.c\");\r\n        \r\n        st.close();\r\n    }","startLine":0,"lastLine":6},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(6811,4518,<149,4>,<251,5>)","rawLines":"public void runTest() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        ResultSet rs;\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a = b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <= b and b <= a\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where (a > (b))\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a >= b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where not (a >= b)\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a < b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a < b or a>b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <= b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <> b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        PreparedStatement pr = con.prepareStatement(\"Select * from \" + table + \" where a between ? and ?\");\r\n        pr.setObject( 1, testValue.small);\r\n        pr.setObject( 2, testValue.large);\r\n        rs = pr.executeQuery();\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n        st.close();\r\n    }","startLine":0,"lastLine":6}],"size":6},{"content":"con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");assertRowCount( 0, \"Select * from transactions\");con1.setAutoCommit(false);con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");assertTrue( rs2.next() );","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(15641,778,<427,1>,<446,2>)","rawLines":"public void testReadCommited() throws Exception{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\tassertTrue( rs2.next() );\r\n\t\t\tassertEquals( 0, rs2.getInt(1) );\r\n\t\t}finally{\r\n            dropTable(con1, \"transactions\");\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tcon2.close();\r\n\t\t}\r\n\t}","startLine":5,"lastLine":12},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(14857,776,<405,1>,<424,2>)","rawLines":"public void testReadUncommited() throws Exception{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\tassertTrue( rs2.next() );\r\n\t\t\tassertEquals( 1, rs2.getInt(1) );\r\n\t\t}finally{\r\n\t\t    dropTable(con1, \"transactions\");\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tcon2.close();\r\n\t\t}\r\n\t}","startLine":5,"lastLine":12}],"size":6},{"content":"pr.setBytes (  1, byteArray );pr.setString(  2 , \"Test\" );pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );pr.setFloat (  4, (float)1234.56789 );pr.setFloat (  5 , (float)9876.54321 );pr.setBytes (  6, largeByteArray );","cloneLocs":[{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(16533,2185,<404,4>,<449,5>)","rawLines":"/**\r\n      *  8. Test\r\n      *  Update rows with a PreparedStatement.\r\n      */  \r\n    static void test_UpdateRowsPrepare(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with a PreparedStatement: \" + rowCount + \" rows\");\r\n        try{\r\n            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n\t            pr.setBytes (  1, byteArray );\r\n\t            pr.setString(  2 , \"Test\" );\r\n\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t            pr.setFloat (  4, (float)1234.56789 );\r\n\t            pr.setFloat (  5 , (float)9876.54321 );\r\n\t            pr.setBytes (  6, largeByteArray );\r\n\t            pr.setInt   (  7 , i );\r\n\t            pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );\r\n\t            pr.setInt   (  19 , i );\r\n                int updateCount = pr.executeUpdate();\r\n                if (updateCount != 1){\r\n                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":11,"lastLine":16},{"locFile":"|java+compilationUnit:///Users/spoton/Documents/uva/evolution/uva-software-evolution/series2/test-projects/smallsql0.21_src/src/smallsql/junit/BenchTest.java|(21582,2559,<508,4>,<559,5>)","rawLines":"/**\r\n      *  10. Test\r\n      *  Update rows with a PreparedStatement and Batch.\r\n      */  \r\n    static void test_UpdateRowsPrepareBatch(Connection con){\r\n        int batchSize = 10;\r\n        int batches = rowCount / batchSize;\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with PreparedStatement and Batches: \" + batches + \" batches, \" + batchSize + \" batch size\");\r\n        \r\n        try{\r\n            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<batches; i++){\r\n                for (int r=0; r<batchSize; r++){\r\n\t                pr.setBytes (  1, byteArray );\r\n\t                pr.setString(  2 , \"Test\" );\r\n\t                pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t                pr.setFloat (  4, (float)1234.56789 );\r\n\t                pr.setFloat (  5 , (float)9876.54321 );\r\n\t                pr.setBytes (  6, largeByteArray );\r\n\t                pr.setInt   (  7 , i*batchSize + r );\r\n\t                pr.setDouble(  8 , 23.45 );\r\n\t                pr.setDouble(  9 , 567.45 );\r\n\t                pr.setFloat (  10 , (float)78.89 );\r\n\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t                pr.setShort (  12, (short)23456 );\r\n\t                pr.setFloat (  13, (float)34.56 );\r\n\t                pr.setString(  14, \"sysname (30) NULL\" );\r\n\t                pr.setString(  15 , \"text NULL\" );\r\n\t                pr.setByte  (  16, (byte)28 );\r\n\t                pr.setBytes (  17, byteArray );\r\n\t                pr.setString(  18, \"varchar (255) NULL\" );\r\n\t                pr.setInt   (  19 , i );\r\n\t                pr.addBatch();\r\n\t            }\r\n                int[] updateCount = pr.executeBatch();\r\n                if (updateCount.length != batchSize){\r\n                    System.out.println( \"  Failed: Update count size should be \" + batchSize + \" but it is \" + updateCount.length + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }","startLine":15,"lastLine":20}],"size":6}]